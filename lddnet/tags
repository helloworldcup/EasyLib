!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	sample/a.cc	/^  A() {}$/;"	f	struct:A
A	sample/a.cc	/^struct A : public Msg {$/;"	s	file:
Accept	internal/server_impl.cc	/^void Server::Impl::Accept() {$/;"	f	class:ldd::net::Server::Impl
Action	incoming_msg.h	/^    enum Action { kWait, kEmit, kDone };$/;"	g	class:ldd::net::IncomingMsg
Add	event.cc	/^bool SignalEvent::Add(int signo) {$/;"	f	class:ldd::net::SignalEvent
Add	internal/event_impl.cc	/^bool SignalEvent::Impl::Add(int signo) {$/;"	f	class:ldd::net::SignalEvent::Impl
AddEvent	internal/channel_impl.h	/^    void AddEvent(short flag) { SetEvent(events_ | flag); }$/;"	f	class:ldd::net::Channel::Impl
AddExtItem	internal/protocol.cc	/^void ExtHeader::Builder::AddExtItem(uint8_t type, uint8_t len)$/;"	f	class:ldd::net::ExtHeader::Builder
AddIncomingMsg	internal/channel_impl.cc	/^bool Channel::Impl::AddIncomingMsg(const boost::shared_ptr<IncomingMsg>& msg) {$/;"	f	class:ldd::net::Channel::Impl
Address	address.cc	/^Address::Address(Family family)$/;"	f	class:ldd::net::Address
Address	address.cc	/^Address::Address(const in6_addr& addr)$/;"	f	class:ldd::net::Address
Address	address.cc	/^Address::Address(const in_addr& addr)$/;"	f	class:ldd::net::Address
Address	address.cc	/^Address::Address(uint32_t addr)$/;"	f	class:ldd::net::Address
Address	address.h	/^class Address : boost::equality_comparable<Address> {$/;"	c	namespace:ldd::net
AfterFork	event_loop.cc	/^void EventLoop::AfterFork() {$/;"	f	class:ldd::net::EventLoop
AfterFork	internal/event_loop_impl.cc	/^void EventLoop::Impl::AfterFork() {$/;"	f	class:ldd::net::EventLoop::Impl
Any	address.cc	/^Address Address::Any(Family family) {$/;"	f	class:ldd::net::Address
AsyncConnect	internal/channel_impl.cc	/^void OutgoingChannel::AsyncConnect(const std::string &host$/;"	f	class:ldd::net::OutgoingChannel
AsyncWait	event.cc	/^void FdEvent::AsyncWait(int fd, int events, const Functor& handler) {$/;"	f	class:ldd::net::FdEvent
AsyncWait	event.cc	/^void FdEvent::AsyncWait(int fd, int events, const Functor& handler,$/;"	f	class:ldd::net::FdEvent
AsyncWait	event.cc	/^void SignalEvent::AsyncWait(const Functor& handler) {$/;"	f	class:ldd::net::SignalEvent
AsyncWait	event.cc	/^void SignalEvent::AsyncWait(const Functor& handler,$/;"	f	class:ldd::net::SignalEvent
AsyncWait	event.cc	/^void TimerEvent::AsyncWait(const Functor& handler,$/;"	f	class:ldd::net::TimerEvent
AsyncWait	internal/event_impl.cc	/^void FdEvent::Impl::AsyncWait(int fd, int events, const Functor& handler) {$/;"	f	class:ldd::net::FdEvent::Impl
AsyncWait	internal/event_impl.cc	/^void FdEvent::Impl::AsyncWait(int fd, int events, const Functor& handler,$/;"	f	class:ldd::net::FdEvent::Impl
AsyncWait	internal/event_impl.cc	/^void SignalEvent::Impl::AsyncWait(const Functor& handler)$/;"	f	class:ldd::net::SignalEvent::Impl
AsyncWait	internal/event_impl.cc	/^void SignalEvent::Impl::AsyncWait(const Functor& handler,$/;"	f	class:ldd::net::SignalEvent::Impl
AsyncWait	internal/event_impl.cc	/^void TimerEvent::Impl::AsyncWait(const Functor& handler,$/;"	f	class:ldd::net::TimerEvent::Impl
B	sample/a.cc	/^  B(int x) : x_(x) {}$/;"	f	struct:B
B	sample/a.cc	/^struct B : public Msg {$/;"	s	file:
Buffer	buffer.cc	/^Buffer::Buffer()$/;"	f	class:ldd::net::Buffer
Buffer	buffer.cc	/^Buffer::Buffer(const Buffer &buffer) $/;"	f	class:ldd::net::Buffer
Buffer	buffer.cc	/^Buffer::Buffer(const char* data, size_t size)$/;"	f	class:ldd::net::Buffer
Buffer	buffer.cc	/^Buffer::Buffer(const std::string& s)$/;"	f	class:ldd::net::Buffer
Buffer	buffer.cc	/^Buffer::Buffer(size_t size)$/;"	f	class:ldd::net::Buffer
Buffer	buffer.h	/^class Buffer {$/;"	c	namespace:ldd::net
BufferMap	buffer.h	/^typedef std::map<uint8_t, Buffer> BufferMap;$/;"	t	namespace:ldd::net
Build	internal/protocol.cc	/^void Header::Builder::Build() {$/;"	f	class:ldd::net::Header::Builder
Builder	internal/protocol.cc	/^ExtHeader::Builder::Builder(char* buf) $/;"	f	class:ldd::net::ExtHeader::Builder
Builder	internal/protocol.cc	/^Header::Builder::Builder(char* buf)$/;"	f	class:ldd::net::Header::Builder
Builder	internal/protocol.h	/^    class Builder {$/;"	c	class:ldd::net::ExtHeader
Builder	internal/protocol.h	/^    class Builder {$/;"	c	class:ldd::net::Header
C	sample/a.cc	/^  C(int x, int y) : x_(x), y_(y) {}$/;"	f	struct:C
C	sample/a.cc	/^struct C : public Msg {$/;"	s	file:
CLEAN	Makefile	/^CLEAN = $/;"	m
CLEAN	test/benchmark/client/Makefile	/^CLEAN = $/;"	m
CLEAN	test/benchmark/server/Makefile	/^CLEAN = $/;"	m
CLEAN	test/event_loop/Makefile	/^CLEAN = $/;"	m
CLEAN	ut/Makefile	/^CLEAN = $/;"	m
CONNECT	ut/my_lddnet.cc	/^const int CONNECT = 10;$/;"	v
CXX	other/Makefile	/^CXX := g++$/;"	m
CXX	other/client/Makefile	/^CXX := g++$/;"	m
CXX	test/client/Makefile	/^CXX := g++$/;"	m
CXX	test/server/Makefile	/^CXX := g++$/;"	m
CXX	test1/atomic/Makefile	/^CXX := g++$/;"	m
CXX	test1/client/Makefile	/^CXX := g++$/;"	m
CXX	test1/concurrency_connect/Makefile	/^CXX := g++$/;"	m
CXX	test1/deadline_timer/Makefile	/^CXX := g++ $/;"	m
CXX	test1/event/Makefile	/^CXX := g++$/;"	m
CXX	test1/noblocking_accept/Makefile	/^CXX := g++$/;"	m
CXXFLAGS	other/Makefile	/^CXXFLAGS := -g3 -O0 -Wall -Werror \\$/;"	m
CXXFLAGS	other/client/Makefile	/^CXXFLAGS := -g3 -O0 -Wall -Werror \\$/;"	m
CXXFLAGS	test/client/Makefile	/^CXXFLAGS := -g3 -O0 -Wall -Werror \\$/;"	m
CXXFLAGS	test/server/Makefile	/^CXXFLAGS := -g3 -O0 -Wall -Werror \\$/;"	m
CXXFLAGS	test1/atomic/Makefile	/^CXXFLAGS := -g3 -O0 -Wall -Werror \\$/;"	m
CXXFLAGS	test1/client/Makefile	/^CXXFLAGS := -g3 -O0 -Wall -Werror \\$/;"	m
CXXFLAGS	test1/concurrency_connect/Makefile	/^CXXFLAGS := -g3 -O0 -Wall -Werror \\$/;"	m
CXXFLAGS	test1/deadline_timer/Makefile	/^CXXFLAGS := -g3 -O0 -Wall -Werror -fPIC \\$/;"	m
CXXFLAGS	test1/event/Makefile	/^CXXFLAGS := -g3 -O0 -Wall -Werror \\$/;"	m
CXXFLAGS	test1/noblocking_accept/Makefile	/^CXXFLAGS := -g3 -O0 -Wall -Werror \\$/;"	m
Cancel	event.cc	/^void FdEvent::Cancel() {$/;"	f	class:ldd::net::FdEvent
Cancel	event.cc	/^void SignalEvent::Cancel() {$/;"	f	class:ldd::net::SignalEvent
Cancel	event.cc	/^void TimerEvent::Cancel() {$/;"	f	class:ldd::net::TimerEvent
Cancel	incoming_msg.h	/^    virtual void Cancel() {}$/;"	f	class:ldd::net::DynamicIncomingMsg
Cancel	incoming_msg.h	/^    virtual void Cancel() {}$/;"	f	class:ldd::net::TypedIncomingMsg
Cancel	internal/event_impl.cc	/^void FdEvent::Impl::Cancel() {$/;"	f	class:ldd::net::FdEvent::Impl
Cancel	internal/event_impl.cc	/^void SignalEvent::Impl::Cancel()$/;"	f	class:ldd::net::SignalEvent::Impl
Cancel	internal/event_impl.cc	/^void TimerEvent::Impl::Cancel() {$/;"	f	class:ldd::net::TimerEvent::Impl
Cancel	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::Cancel() {$/;"	f	class:ldd::net::OutgoingMsg::Impl
Cancel	other/imsg.cc	/^void MyEchoMsg::Cancel() {$/;"	f	class:MyEchoMsg
Cancel	outgoing_msg.cc	/^void OutgoingMsg::Cancel() {$/;"	f	class:ldd::net::OutgoingMsg
Cancel	test/benchmark/server/imsg.cc	/^void MyEchoMsg::Cancel() {$/;"	f	class:MyEchoMsg
Cancel	test/client/imsg.cc	/^void MyEchoMsg::Cancel() {$/;"	f	class:MyEchoMsg
Cancel	test/server/imsg.cc	/^void MyEchoMsg::Cancel() {$/;"	f	class:MyEchoMsg
Cancel	ut/imsg.cc	/^void MyEchoMsg::Cancel() {$/;"	f	class:MyEchoMsg
Canceled	result.h	/^    static Result Canceled() { return Result(kCanceled); }$/;"	f	class:ldd::net::Result
Channel	channel.cc	/^Channel::Channel(EventLoop* event_loop, Client::Impl* client,$/;"	f	class:ldd::net::Channel
Channel	channel.cc	/^Channel::Channel(EventLoop* event_loop, Server::Impl* server)$/;"	f	class:ldd::net::Channel
Channel	channel.h	/^class Channel : public boost::enable_shared_from_this<Channel>,$/;"	c	namespace:ldd::net
CleanUp	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::CleanUp() {$/;"	f	class:ldd::net::OutgoingMsg::Impl
Clear	event.cc	/^bool SignalEvent::Clear() {$/;"	f	class:ldd::net::SignalEvent
Clear	internal/event_impl.cc	/^bool SignalEvent::Impl::Clear() {$/;"	f	class:ldd::net::SignalEvent::Impl
ClearExtras	payload.cc	/^void Payload::ClearExtras() {$/;"	f	class:ldd::net::Payload
ClearIncomingMsg	internal/channel_impl.cc	/^void Channel::Impl::ClearIncomingMsg() {$/;"	f	class:ldd::net::Channel::Impl
ClearOutgoingMsg	internal/channel_impl.cc	/^void Channel::Impl::ClearOutgoingMsg() {$/;"	f	class:ldd::net::Channel::Impl
ClearRequest	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::ClearRequest() {$/;"	f	class:ldd::net::OutgoingMsg::Impl
ClearTimer	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::ClearTimer() {$/;"	f	class:ldd::net::OutgoingMsg::Impl
Client	client.cc	/^Client::Client(const Options& options)$/;"	f	class:ldd::net::Client
Client	client.h	/^class Client : public IncomingMsgRegistry {$/;"	c	namespace:ldd::net
ClockPulseEmitter	internal/pulse_emitter.h	/^    ClockPulseEmitter(EventLoop* event_loop, const Pulser& pulser,$/;"	f	class:ldd::net::ClockPulseEmitter
ClockPulseEmitter	internal/pulse_emitter.h	/^class ClockPulseEmitter : public PulseEmitter {$/;"	c	namespace:ldd::net
Close	channel.cc	/^void Channel::Close() {$/;"	f	class:ldd::net::Channel
Close	internal/channel_impl.cc	/^void Channel::Impl::Close() {$/;"	f	class:ldd::net::Channel::Impl
Close	internal/listener_impl.cc	/^void Listener::Impl::Close() {$/;"	f	class:ldd::net::Listener::Impl
Close	listener.cc	/^void Listener::Close() {$/;"	f	class:ldd::net::Listener
Close	ut/event_test.cc	/^void TCPClient::Close()$/;"	f	class:TCPClient
CloseSocket	internal/channel_impl.cc	/^void Channel::Impl::CloseSocket()$/;"	f	class:ldd::net::Channel::Impl
Code	incoming_msg.h	/^    typedef ldd::net::Code Code;$/;"	t	class:ldd::net::IncomingMsg
Code	internal/incoming_msg_impl.h	/^    typedef ldd::net::Code Code;$/;"	t	class:ldd::net::IncomingMsg::Impl
Code	message.h	/^typedef int16_t     Code;$/;"	t	namespace:ldd::net
Connect	internal/channel_impl.cc	/^void OutgoingChannel::Connect() {$/;"	f	class:ldd::net::OutgoingChannel
Create	client.cc	/^boost::shared_ptr<Channel> Client::Create(EventLoop* event_loop,$/;"	f	class:ldd::net::Client
Create	internal/client_impl.cc	/^boost::shared_ptr<Channel> Client::Impl::Create(EventLoop* event_loop,$/;"	f	class:ldd::net::Client::Impl
DEBUGING	test/event_loop/Makefile	/^DEBUGING = -g # Comment this line for non-debugging code$/;"	m
DEBUGING	ut/Makefile	/^DEBUGING = -g # Comment this line for non-debugging code$/;"	m
DEP	other/Makefile	/^DEP := $(patsubst %.o, %.d, $(OBJ))$/;"	m
DEP	other/client/Makefile	/^DEP := $(patsubst %.o, %.d, $(OBJ))$/;"	m
DEP	test/client/Makefile	/^DEP := $(patsubst %.o, %.d, $(OBJ))$/;"	m
DEP	test/server/Makefile	/^DEP := $(patsubst %.o, %.d, $(OBJ))$/;"	m
DEP	test1/atomic/Makefile	/^DEP := $(patsubst %.o, %.d, $(OBJ))$/;"	m
DEP	test1/client/Makefile	/^DEP := $(patsubst %.o, %.d, $(OBJ))$/;"	m
DEP	test1/concurrency_connect/Makefile	/^DEP := $(patsubst %.o, %.d, $(OBJ))$/;"	m
DEP	test1/event/Makefile	/^DEP := $(patsubst %.o, %.d, $(OBJ))$/;"	m
DEP	test1/noblocking_accept/Makefile	/^DEP := $(patsubst %.o, %.d, $(OBJ))$/;"	m
DIR	other/Makefile	/^DIR := .$/;"	m
DIR	other/client/Makefile	/^DIR := .$/;"	m
DIR	test/client/Makefile	/^DIR := .$/;"	m
DIR	test/server/Makefile	/^DIR := .$/;"	m
DIR	test1/atomic/Makefile	/^DIR := .$/;"	m
DIR	test1/client/Makefile	/^DIR := .$/;"	m
DIR	test1/concurrency_connect/Makefile	/^DIR := .$/;"	m
DIR	test1/event/Makefile	/^DIR := .$/;"	m
DIR	test1/noblocking_accept/Makefile	/^DIR := .$/;"	m
DUMP_STACK_DEPTH_MAX	backtrace.cc	9;"	d	file:
DelEvent	internal/channel_impl.h	/^    void DelEvent(short flag) { SetEvent(events_ & ~flag); }$/;"	f	class:ldd::net::Channel::Impl
DelExtra	payload.cc	/^void Payload::DelExtra(uint8_t id) {$/;"	f	class:ldd::net::Payload
DelayConnect	internal/channel_impl.cc	/^void OutgoingChannel::DelayConnect() {$/;"	f	class:ldd::net::OutgoingChannel
Disable	internal/outgoing_packet.h	/^    void Disable() { disabled_ = true; }$/;"	f	class:ldd::net::OutgoingPacket
DnsCtx	internal/channel_impl.h	/^    DnsCtx(OutgoingChannel *oc$/;"	f	class:ldd::net::DnsCtx
DnsCtx	internal/channel_impl.h	/^class DnsCtx {$/;"	c	namespace:ldd::net
DoCancel	internal/incoming_msg_impl.cc	/^void IncomingMsg::Impl::DoCancel() {$/;"	f	class:ldd::net::IncomingMsg::Impl
DoCancel	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::DoCancel() {$/;"	f	class:ldd::net::OutgoingMsg::Impl
DoCancel	outgoing_msg.cc	/^void OutgoingMsg::DoCancel() {$/;"	f	class:ldd::net::OutgoingMsg
DoClose	channel.cc	/^void Channel::DoClose() {$/;"	f	class:ldd::net::Channel
DoConnect	internal/channel_impl.cc	/^void OutgoingChannel::DoConnect() {$/;"	f	class:ldd::net::OutgoingChannel
DoDelayConnect	internal/channel_impl.cc	/^void OutgoingChannel::DoDelayConnect(const boost::shared_ptr<Channel>&) {$/;"	f	class:ldd::net::OutgoingChannel
DoDone	internal/incoming_msg_impl.cc	/^void IncomingMsg::Impl::DoDone() {$/;"	f	class:ldd::net::IncomingMsg::Impl
DoEmit	internal/incoming_msg_impl.cc	/^void IncomingMsg::Impl::DoEmit() {$/;"	f	class:ldd::net::IncomingMsg::Impl
DoNotify	incoming_msg.cc	/^void IncomingMsg::DoNotify(bool done) {$/;"	f	class:ldd::net::IncomingMsg
DoPost	channel.cc	/^void Channel::DoPost(const boost::shared_ptr<OutgoingMsg>& message,$/;"	f	class:ldd::net::Channel
DoPulse	internal/channel_impl.cc	/^void IncomingChannel::DoPulse() {$/;"	f	class:ldd::net::IncomingChannel
DoPulse	internal/channel_impl.cc	/^void OutgoingChannel::DoPulse() {$/;"	f	class:ldd::net::OutgoingChannel
DoPulse	internal/pulse_emitter.cc	/^void ClockPulseEmitter::DoPulse() {$/;"	f	class:ldd::net::ClockPulseEmitter
DoResolve	internal/channel_impl.cc	/^void OutgoingChannel::DoResolve(int errcode, struct evutil_addrinfo *addr)$/;"	f	class:ldd::net::OutgoingChannel
DoStart	internal/pulse_emitter.cc	/^void ClockPulseEmitter::DoStart() {$/;"	f	class:ldd::net::ClockPulseEmitter
DoStart	internal/pulse_emitter.cc	/^void LazyPulseEmitter::DoStart() {$/;"	f	class:ldd::net::LazyPulseEmitter
DoStart	internal/pulse_emitter.cc	/^void ReplyPulseEmitter::DoStart() {$/;"	f	class:ldd::net::ReplyPulseEmitter
DoWrite	internal/channel_impl.cc	/^void Channel::Impl::DoWrite()$/;"	f	class:ldd::net::Channel::Impl
Done	internal/incoming_packet.cc	/^void IncomingRequest::Done()$/;"	f	class:ldd::net::IncomingRequest
Done	internal/incoming_packet.cc	/^void IncomingResponse::Done() {$/;"	f	class:ldd::net::IncomingResponse
Done	other/client/omsg.cc	/^void MyEmitMsg::Done(const Result& result) {$/;"	f	class:MyEmitMsg
Done	other/imsg.cc	/^void MyEchoMsg::Done(Code* code) {$/;"	f	class:MyEchoMsg
Done	test/benchmark/client/omsg.cc	/^void MyEmitMsg::Done(const Result& result) {$/;"	f	class:MyEmitMsg
Done	test/benchmark/server/imsg.cc	/^void MyEchoMsg::Done(Code* code) {$/;"	f	class:MyEchoMsg
Done	test/client/imsg.cc	/^void MyEchoMsg::Done(Code* code) {$/;"	f	class:MyEchoMsg
Done	test/client/omsg.cc	/^void MyEmitMsg::Done(const Result& result) {$/;"	f	class:MyEmitMsg
Done	test/server/imsg.cc	/^void MyEchoMsg::Done(Code* code) {$/;"	f	class:MyEchoMsg
Done	test/server/omsg.cc	/^void MyEmitMsg::Done(const Result& result) {$/;"	f	class:MyEmitMsg
Done	ut/imsg.cc	/^void MyEchoMsg::Done(Code* code) {$/;"	f	class:MyEchoMsg
Done	ut/omsg.cc	/^void MyEmitMsg::Done(const Result& result) {$/;"	f	class:MyEmitMsg
DynamicIncomingMsg	incoming_msg.h	/^    DynamicIncomingMsg() : type_(0) {}$/;"	f	class:ldd::net::DynamicIncomingMsg
DynamicIncomingMsg	incoming_msg.h	/^class DynamicIncomingMsg : public IncomingMsg {$/;"	c	namespace:ldd::net
DynamicOutgoingMsg	outgoing_msg.cc	/^DynamicOutgoingMsg::DynamicOutgoingMsg(Type type)$/;"	f	class:ldd::net::DynamicOutgoingMsg
DynamicOutgoingMsg	outgoing_msg.h	/^    DynamicOutgoingMsg(): type_(0) {}$/;"	f	class:ldd::net::DynamicOutgoingMsg
DynamicOutgoingMsg	outgoing_msg.h	/^class DynamicOutgoingMsg : public OutgoingMsg {$/;"	c	namespace:ldd::net
EXTRAS	ut/my_lddnet.cc	/^const std::string EXTRAS = "This is the extra";$/;"	v
Echo	ut/event_test.cc	/^bool MyFdEvent::Echo(const std::string &msg)$/;"	f	class:MyFdEvent
Echo	ut/event_test.cc	/^void TCPClient::Echo(const std::string &msg)$/;"	f	class:TCPClient
Echo	ut/my_lddnet.cc	/^bool MyLddNet::Echo()$/;"	f	class:MyLddNet
Emit	other/imsg.cc	/^void MyEchoMsg::Emit(Payload* response, Action* next) {$/;"	f	class:MyEchoMsg
Emit	test/benchmark/server/imsg.cc	/^void MyEchoMsg::Emit(Payload* response, Action* next) {$/;"	f	class:MyEchoMsg
Emit	test/client/imsg.cc	/^void MyEchoMsg::Emit(Payload* response, Action* next) {$/;"	f	class:MyEchoMsg
Emit	test/server/imsg.cc	/^void MyEchoMsg::Emit(Payload* response, Action* next) {$/;"	f	class:MyEchoMsg
Emit	ut/imsg.cc	/^void MyEchoMsg::Emit(Payload* response, Action* next) {$/;"	f	class:MyEchoMsg
Endpoint	endpoint.h	/^    Endpoint(): address_(Address::V4), port_(0) {}$/;"	f	class:ldd::net::Endpoint
Endpoint	endpoint.h	/^    Endpoint(Address::Family family, uint16_t port)$/;"	f	class:ldd::net::Endpoint
Endpoint	endpoint.h	/^    Endpoint(const Address& address, uint16_t port)$/;"	f	class:ldd::net::Endpoint
Endpoint	endpoint.h	/^    Endpoint(uint16_t port): address_(Address::V4), port_(port) {}$/;"	f	class:ldd::net::Endpoint
Endpoint	endpoint.h	/^class Endpoint {$/;"	c	namespace:ldd::net
EventCtx	internal/channel_impl.h	/^    EventCtx(const boost::shared_ptr<Channel> &owner$/;"	f	class:ldd::net::EventCtx
EventCtx	internal/channel_impl.h	/^class EventCtx {$/;"	c	namespace:ldd::net
EventLoop	event_loop.cc	/^EventLoop::EventLoop()$/;"	f	class:ldd::net::EventLoop
EventLoop	event_loop.cc	/^EventLoop::EventLoop(struct ::event_base *base)$/;"	f	class:ldd::net::EventLoop
EventLoop	event_loop.h	/^class EventLoop : private boost::noncopyable {$/;"	c	namespace:ldd::net
EventLoopThread	event_loop.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:ldd::net::EventLoopThread
EventLoopThread	event_loop.h	/^class EventLoopThread : private boost::noncopyable {$/;"	c	namespace:ldd::net
EventLoopThreadPool	event_loop_thread_pool.cc	/^EventLoopThreadPool::EventLoopThreadPool(EventLoop* baseLoop)$/;"	f	class:ldd::net::EventLoopThreadPool
EventLoopThreadPool	event_loop_thread_pool.h	/^class EventLoopThreadPool : private boost::noncopyable$/;"	c	namespace:ldd::net
EventNotify	internal/channel_impl.cc	/^void Channel::Impl::EventNotify(int fd, short what, void *arg)$/;"	f	class:ldd::net::Channel::Impl
ExpiresAt	event.cc	/^bool TimerEvent::ExpiresAt(ldd::util::Timestamp* time) {$/;"	f	class:ldd::net::TimerEvent
ExpiresAt	internal/event_impl.cc	/^bool TimerEvent::Impl::ExpiresAt(ldd::util::Timestamp* time) {$/;"	f	class:ldd::net::TimerEvent::Impl
ExtHeader	internal/protocol.h	/^class ExtHeader {$/;"	c	namespace:ldd::net
Factory	factory.h	/^struct Factory {$/;"	s	namespace:ldd::net
Factory	sample/a.h	/^struct Factory {$/;"	s
FactoryImpl	factory.h	/^    FactoryImpl() {}$/;"	f	struct:ldd::net::FactoryImpl
FactoryImpl	factory.h	/^    FactoryImpl(A1 a1)$/;"	f	struct:ldd::net::FactoryImpl
FactoryImpl	factory.h	/^    FactoryImpl(A1 a1, A2 a2)$/;"	f	struct:ldd::net::FactoryImpl
FactoryImpl	factory.h	/^    FactoryImpl(A1 a1, A2 a2, A3 a3)$/;"	f	struct:ldd::net::FactoryImpl
FactoryImpl	factory.h	/^    FactoryImpl(A1 a1, A2 a2, A3 a3, A4 a4)$/;"	f	struct:ldd::net::FactoryImpl
FactoryImpl	factory.h	/^    FactoryImpl(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5)$/;"	f	struct:ldd::net::FactoryImpl
FactoryImpl	factory.h	/^    FactoryImpl(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6)$/;"	f	struct:ldd::net::FactoryImpl
FactoryImpl	factory.h	/^    FactoryImpl(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7)$/;"	f	struct:ldd::net::FactoryImpl
FactoryImpl	factory.h	/^    FactoryImpl(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8)$/;"	f	struct:ldd::net::FactoryImpl
FactoryImpl	factory.h	/^    FactoryImpl(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9)$/;"	f	struct:ldd::net::FactoryImpl
FactoryImpl	factory.h	/^    FactoryImpl(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10)$/;"	f	struct:ldd::net::FactoryImpl
FactoryImpl	factory.h	/^struct FactoryImpl : public Factory<T> {$/;"	s	namespace:ldd::net
FactoryImpl	factory.h	/^struct FactoryImpl<T, D, A1, A2, A3, A4, A5, A6, A7, A8, A9, NoneArg> : public Factory<T> {$/;"	s	namespace:ldd::net
FactoryImpl	factory.h	/^struct FactoryImpl<T, D, A1, A2, A3, A4, A5, A6, A7, A8, NoneArg, NoneArg> : public Factory<T> {$/;"	s	namespace:ldd::net
FactoryImpl	factory.h	/^struct FactoryImpl<T, D, A1, A2, A3, A4, A5, A6, A7, NoneArg, NoneArg, NoneArg> : public Factory<T> {$/;"	s	namespace:ldd::net
FactoryImpl	factory.h	/^struct FactoryImpl<T, D, A1, A2, A3, A4, A5, A6, NoneArg, NoneArg, NoneArg, NoneArg> : public Factory<T> {$/;"	s	namespace:ldd::net
FactoryImpl	factory.h	/^struct FactoryImpl<T, D, A1, A2, A3, A4, A5, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg> : public Factory<T> {$/;"	s	namespace:ldd::net
FactoryImpl	factory.h	/^struct FactoryImpl<T, D, A1, A2, A3, A4, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg> : public Factory<T> {$/;"	s	namespace:ldd::net
FactoryImpl	factory.h	/^struct FactoryImpl<T, D, A1, A2, A3, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg> : public Factory<T> {$/;"	s	namespace:ldd::net
FactoryImpl	factory.h	/^struct FactoryImpl<T, D, A1, A2, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg> : public Factory<T> {$/;"	s	namespace:ldd::net
FactoryImpl	factory.h	/^struct FactoryImpl<T, D, A1, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg> : public Factory<T> {$/;"	s	namespace:ldd::net
FactoryImpl	factory.h	/^struct FactoryImpl<T, D, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg, NoneArg> : public Factory<T> {$/;"	s	namespace:ldd::net
FactoryImpl	sample/a.h	/^    FactoryImpl() {}$/;"	f	struct:FactoryImpl
FactoryImpl	sample/a.h	/^    FactoryImpl(A1 a1)$/;"	f	struct:FactoryImpl
FactoryImpl	sample/a.h	/^    FactoryImpl(A1 a1, A2 a2)$/;"	f	struct:FactoryImpl
FactoryImpl	sample/a.h	/^struct FactoryImpl : public Factory {$/;"	s
FactoryImpl	sample/a.h	/^struct FactoryImpl<T, A1, NoneArg> : public Factory{$/;"	s
FactoryImpl	sample/a.h	/^struct FactoryImpl<T, NoneArg, NoneArg> : public Factory {$/;"	s
Failed	result.h	/^    static Result Failed() { return Result(kFailed); }$/;"	f	class:ldd::net::Result
Family	address.h	/^    enum Family {$/;"	g	class:ldd::net::Address
FdEvent	event.cc	/^FdEvent::FdEvent(EventLoop* loop)$/;"	f	class:ldd::net::FdEvent
FdEvent	event.h	/^class FdEvent : boost::noncopyable {$/;"	c	namespace:ldd::net
FillEndpoints	internal/channel_impl.cc	/^bool Channel::Impl::FillEndpoints(bool remote) {$/;"	f	class:ldd::net::Channel::Impl
Finalize	ut/event_loop_test.cc	/^void MyEventLoop::Finalize()$/;"	f	class:MyEventLoop
Finalize	ut/event_loop_test.cc	/^void MyEventLoopThread::Finalize()$/;"	f	class:MyEventLoopThread
Finalize	ut/event_loop_test.cc	/^void MyEventLoopThreadPool::Finalize()$/;"	f	class:MyEventLoopThreadPool
Finalize	ut/event_test.cc	/^void MyFdEvent::Finalize()$/;"	f	class:MyFdEvent
Finalize	ut/event_test.cc	/^void MySignalEvent::Finalize()$/;"	f	class:MySignalEvent
Finalize	ut/event_test.cc	/^void MyTimerEvent::Finalize()$/;"	f	class:MyTimerEvent
Finalize	ut/my_lddnet.cc	/^void MyLddNet::Finalize()$/;"	f	class:MyLddNet
FromString	address.cc	/^Address Address::FromString(const std::string& s, Family family) {$/;"	f	class:ldd::net::Address
Func	ut/event_loop_test.cc	/^void MyEventLoop::Func(int no)$/;"	f	class:MyEventLoop
Func	ut/event_loop_test.cc	/^void MyEventLoopThread::Func(int no)$/;"	f	class:MyEventLoopThread
Func	ut/event_loop_test.cc	/^void MyEventLoopThreadPool::Func(int no)$/;"	f	class:MyEventLoopThreadPool
Functor	event.h	/^    typedef boost::function<void()> Functor;$/;"	t	class:ldd::net::TimerEvent
Functor	event.h	/^    typedef boost::function<void(int)> Functor;$/;"	t	class:ldd::net::FdEvent
Functor	event.h	/^    typedef boost::function<void(int)> Functor;$/;"	t	class:ldd::net::SignalEvent
Functor	event_loop.h	/^    typedef boost::function<void()> Functor;$/;"	t	class:ldd::net::EventLoop
Functor	event_loop.h	/^    typedef boost::function<void()> Functor;$/;"	t	class:ldd::net::EventLoopThread
Get	test1/client/get.cc	/^void Get(int fd)$/;"	f
GetExtItem	internal/protocol.cc	/^bool ExtHeader::Parser::GetExtItem(int index, uint8_t *type, uint8_t *len)$/;"	f	class:ldd::net::ExtHeader::Parser
GetIncomingMsg	internal/channel_impl.cc	/^boost::shared_ptr<IncomingMsg> Channel::Impl::GetIncomingMsg($/;"	f	class:ldd::net::Channel::Impl
GetNextLoop	event_loop_thread_pool.cc	/^EventLoop* EventLoopThreadPool::GetNextLoop()$/;"	f	class:ldd::net::EventLoopThreadPool
GetOutgoingMsg	internal/channel_impl.cc	/^boost::shared_ptr<OutgoingMsg> Channel::Impl::GetOutgoingMsg($/;"	f	class:ldd::net::Channel::Impl
HandleAccept	internal/server_impl.cc	/^void Server::Impl::HandleAccept(int) {$/;"	f	class:ldd::net::Server::Impl
HandleAccept	test1/noblocking_accept/main.cc	/^void HandleAccept(const boost::system::error_code& e)$/;"	f
HandleRead	test1/event/main.cc	/^void HandleRead(int fd, int event) {$/;"	f
HandleSignal	test1/event/main.cc	/^void HandleSignal(int sig) {$/;"	f
HandleStop	test1/event/main.cc	/^void HandleStop() {$/;"	f
HandleTimer	test1/event/main.cc	/^void HandleTimer() {$/;"	f
Header	internal/protocol.h	/^class Header {$/;"	c	namespace:ldd::net
HeartBeat	test1/client/heartbeat.cc	/^void HeartBeat(int fd)$/;"	f
IMSG_H_	other/imsg.h	5;"	d
IMSG_H_	test/benchmark/server/imsg.h	5;"	d
IMSG_H_	test/client/imsg.h	5;"	d
IMSG_H_	test/server/imsg.h	5;"	d
IMSG_H_	ut/imsg.h	5;"	d
Id	incoming_msg.h	/^    typedef ldd::net::MessageId Id;$/;"	t	class:ldd::net::IncomingMsg
Id	internal/incoming_msg_impl.h	/^    typedef ldd::net::MessageId Id;$/;"	t	class:ldd::net::IncomingMsg::Impl
Id	outgoing_msg.h	/^    typedef ldd::net::MessageId Id;$/;"	t	class:ldd::net::OutgoingMsg
Impl	internal/channel_impl.cc	/^Channel::Impl::Impl(Owner* owner, EventLoop* event_loop)$/;"	f	class:ldd::net::Channel::Impl
Impl	internal/channel_impl.h	/^class Channel::Impl {$/;"	c	class:ldd::net::Channel
Impl	internal/client_impl.cc	/^Client::Impl::Impl(Client* client, const Client::Options& options)$/;"	f	class:ldd::net::Client::Impl
Impl	internal/client_impl.h	/^class Client::Impl {$/;"	c	class:ldd::net::Client
Impl	internal/event_impl.cc	/^FdEvent::Impl::Impl(EventLoop::Impl* loop)$/;"	f	class:ldd::net::FdEvent::Impl
Impl	internal/event_impl.cc	/^SignalEvent::Impl::Impl(EventLoop::Impl* loop)$/;"	f	class:ldd::net::SignalEvent::Impl
Impl	internal/event_impl.cc	/^TimerEvent::Impl::Impl(EventLoop::Impl* loop)$/;"	f	class:ldd::net::TimerEvent::Impl
Impl	internal/event_impl.h	/^class FdEvent::Impl {$/;"	c	class:ldd::net::FdEvent
Impl	internal/event_impl.h	/^class SignalEvent::Impl {$/;"	c	class:ldd::net::SignalEvent
Impl	internal/event_impl.h	/^class TimerEvent::Impl {$/;"	c	class:ldd::net::TimerEvent
Impl	internal/event_loop_impl.cc	/^EventLoop::Impl::Impl()$/;"	f	class:ldd::net::EventLoop::Impl
Impl	internal/event_loop_impl.cc	/^EventLoop::Impl::Impl(struct ::event_base *base)$/;"	f	class:ldd::net::EventLoop::Impl
Impl	internal/event_loop_impl.h	/^class EventLoop::Impl {$/;"	c	class:ldd::net::EventLoop
Impl	internal/incoming_msg_impl.h	/^    Impl(IncomingMsg* m)$/;"	f	class:ldd::net::IncomingMsg::Impl
Impl	internal/incoming_msg_impl.h	/^class IncomingMsg::Impl {$/;"	c	class:ldd::net::IncomingMsg
Impl	internal/listener_impl.cc	/^Listener::Impl::Impl(EventLoop* event_loop)$/;"	f	class:ldd::net::Listener::Impl
Impl	internal/listener_impl.h	/^class Listener::Impl {$/;"	c	class:ldd::net::Listener
Impl	internal/outgoing_msg_impl.h	/^    Impl(OutgoingMsg* owner)$/;"	f	class:ldd::net::OutgoingMsg::Impl
Impl	internal/outgoing_msg_impl.h	/^class OutgoingMsg::Impl {$/;"	c	class:ldd::net::OutgoingMsg
Impl	internal/server_impl.cc	/^Server::Impl::Impl(Server* server, const Options& options)$/;"	f	class:ldd::net::Server::Impl
Impl	internal/server_impl.h	/^class Server::Impl {$/;"	c	class:ldd::net::Server
IncomingCancel	internal/incoming_packet.h	/^    IncomingCancel(Channel::Impl* channel)$/;"	f	class:ldd::net::IncomingCancel
IncomingCancel	internal/incoming_packet.h	/^class IncomingCancel: public IncomingPacket {$/;"	c	namespace:ldd::net
IncomingChannel	internal/channel_impl.cc	/^IncomingChannel::IncomingChannel(Owner* owner, EventLoop* event_loop,$/;"	f	class:ldd::net::IncomingChannel
IncomingChannel	internal/channel_impl.h	/^class IncomingChannel : public Channel::Impl {$/;"	c	namespace:ldd::net
IncomingEnd	internal/incoming_packet.h	/^    IncomingEnd(Channel::Impl* channel)$/;"	f	class:ldd::net::IncomingEnd
IncomingEnd	internal/incoming_packet.h	/^class IncomingEnd: public IncomingPacket {$/;"	c	namespace:ldd::net
IncomingMsg	incoming_msg.cc	/^IncomingMsg::IncomingMsg()$/;"	f	class:ldd::net::IncomingMsg
IncomingMsg	incoming_msg.h	/^class IncomingMsg : public boost::enable_shared_from_this<IncomingMsg>,$/;"	c	namespace:ldd::net
IncomingMsgMap	internal/channel_impl.h	/^    typedef std::map<int32_t, boost::shared_ptr<IncomingMsg> > IncomingMsgMap;$/;"	t	class:ldd::net::Channel::Impl
IncomingMsgRegistry	incoming_msg_registry.h	/^    IncomingMsgRegistry() : default_(NULL) {}$/;"	f	class:ldd::net::IncomingMsgRegistry
IncomingMsgRegistry	incoming_msg_registry.h	/^class IncomingMsgRegistry : private Registry<IncomingMsg, MessageType> {$/;"	c	namespace:ldd::net
IncomingPacket	internal/incoming_packet.h	/^    IncomingPacket(Channel::Impl* channel)$/;"	f	class:ldd::net::IncomingPacket
IncomingPacket	internal/incoming_packet.h	/^class IncomingPacket : public boost::enable_shared_from_this<IncomingPacket> {$/;"	c	namespace:ldd::net
IncomingPacket	internal/pulse_checker.h	/^    virtual void IncomingPacket() {$/;"	f	class:ldd::net::RelaxedPulseChecker
IncomingPacket	internal/pulse_checker.h	/^    virtual void IncomingPacket() {$/;"	f	class:ldd::net::StrictPulseChecker
IncomingPacket	internal/pulse_emitter.h	/^    virtual void IncomingPacket() {}$/;"	f	class:ldd::net::ClockPulseEmitter
IncomingPacket	internal/pulse_emitter.h	/^    virtual void IncomingPacket() {}$/;"	f	class:ldd::net::LazyPulseEmitter
IncomingPacket	internal/pulse_emitter.h	/^    virtual void IncomingPacket() {}$/;"	f	class:ldd::net::ReplyPulseEmitter
IncomingPacketWithPayload	internal/incoming_packet.h	/^    IncomingPacketWithPayload(Channel::Impl* channel$/;"	f	class:ldd::net::IncomingPacketWithPayload
IncomingPacketWithPayload	internal/incoming_packet.h	/^class IncomingPacketWithPayload : public IncomingPacket {$/;"	c	namespace:ldd::net
IncomingPing	internal/incoming_packet.h	/^    IncomingPing(Channel::Impl* channel)$/;"	f	class:ldd::net::IncomingPing
IncomingPing	internal/incoming_packet.h	/^class IncomingPing: public IncomingPacket {$/;"	c	namespace:ldd::net
IncomingPong	internal/incoming_packet.h	/^    IncomingPong(Channel::Impl* channel)$/;"	f	class:ldd::net::IncomingPong
IncomingPong	internal/incoming_packet.h	/^class IncomingPong: public IncomingPacket {$/;"	c	namespace:ldd::net
IncomingPulse	internal/pulse_checker.cc	/^void StrictPulseChecker::IncomingPulse() {$/;"	f	class:ldd::net::StrictPulseChecker
IncomingPulse	internal/pulse_emitter.cc	/^void ReplyPulseEmitter::IncomingPulse() {$/;"	f	class:ldd::net::ReplyPulseEmitter
IncomingPulse	internal/pulse_emitter.h	/^    virtual void IncomingPulse() {}$/;"	f	class:ldd::net::ClockPulseEmitter
IncomingPulse	internal/pulse_emitter.h	/^    virtual void IncomingPulse() {}$/;"	f	class:ldd::net::LazyPulseEmitter
IncomingRequest	internal/incoming_packet.h	/^    IncomingRequest(Channel::Impl* channel$/;"	f	class:ldd::net::IncomingRequest
IncomingRequest	internal/incoming_packet.h	/^class IncomingRequest: public IncomingPacketWithPayload {$/;"	c	namespace:ldd::net
IncomingResponse	internal/incoming_packet.h	/^    IncomingResponse(Channel::Impl* channel, const boost::shared_ptr<Buffer> &packet)$/;"	f	class:ldd::net::IncomingResponse
IncomingResponse	internal/incoming_packet.h	/^class IncomingResponse: public IncomingPacketWithPayload {$/;"	c	namespace:ldd::net
Info	test/benchmark/client/omsg.h	/^struct Info {$/;"	s
Init	internal/event_loop_impl.cc	/^void EventLoop::Impl::Init(void)$/;"	f	class:ldd::net::EventLoop::Impl
Init	internal/incoming_msg_impl.cc	/^void IncomingMsg::Impl::Init(Id id, $/;"	f	class:ldd::net::IncomingMsg::Impl
Init	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::Init(Id id,$/;"	f	class:ldd::net::OutgoingMsg::Impl
Init	other/client/omsg.cc	/^bool MyEmitMsg::Init(Payload* request,$/;"	f	class:MyEmitMsg
Init	other/imsg.cc	/^void MyEchoMsg::Init(const Payload& request, Action* next) {$/;"	f	class:MyEchoMsg
Init	test/benchmark/client/omsg.cc	/^bool MyEmitMsg::Init(Payload* request,$/;"	f	class:MyEmitMsg
Init	test/benchmark/server/imsg.cc	/^void MyEchoMsg::Init(const Payload& request, Action* next) {$/;"	f	class:MyEchoMsg
Init	test/client/imsg.cc	/^void MyEchoMsg::Init(const Payload& request, Action* next) {$/;"	f	class:MyEchoMsg
Init	test/client/omsg.cc	/^bool MyEmitMsg::Init(Payload* request,$/;"	f	class:MyEmitMsg
Init	test/server/imsg.cc	/^void MyEchoMsg::Init(const Payload& request, Action* next) {$/;"	f	class:MyEchoMsg
Init	test/server/omsg.cc	/^bool MyEmitMsg::Init(Payload* request,$/;"	f	class:MyEmitMsg
Init	ut/event_loop_test.cc	/^bool MyEventLoop::Init()$/;"	f	class:MyEventLoop
Init	ut/event_loop_test.cc	/^bool MyEventLoopThread::Init()$/;"	f	class:MyEventLoopThread
Init	ut/event_loop_test.cc	/^bool MyEventLoopThreadPool::Init()$/;"	f	class:MyEventLoopThreadPool
Init	ut/event_test.cc	/^bool MyFdEvent::Init()$/;"	f	class:MyFdEvent
Init	ut/event_test.cc	/^bool MySignalEvent::Init()$/;"	f	class:MySignalEvent
Init	ut/event_test.cc	/^bool MyTimerEvent::Init()$/;"	f	class:MyTimerEvent
Init	ut/event_test.cc	/^bool TCPClient::Init(int port)$/;"	f	class:TCPClient
Init	ut/event_test.cc	/^bool TCPServer::Init(int port)$/;"	f	class:TCPServer
Init	ut/imsg.cc	/^void MyEchoMsg::Init(const Payload& request, Action* next) {$/;"	f	class:MyEchoMsg
Init	ut/my_lddnet.cc	/^bool MyLddNet::Init()$/;"	f	class:MyLddNet
Init	ut/omsg.cc	/^bool MyEmitMsg::Init(Payload* request,$/;"	f	class:MyEmitMsg
InitPayload	internal/outgoing_packet.cc	/^bool OutgoingRequest::InitPayload() {$/;"	f	class:ldd::net::OutgoingRequest
InitPayload	internal/outgoing_packet.h	/^    virtual bool InitPayload() {$/;"	f	class:ldd::net::OutgoingResponse
InitPulse	internal/channel_impl.cc	/^void IncomingChannel::InitPulse()$/;"	f	class:ldd::net::IncomingChannel
InitPulse	internal/channel_impl.cc	/^void OutgoingChannel::InitPulse() {$/;"	f	class:ldd::net::OutgoingChannel
IsCanceled	incoming_msg.cc	/^bool IncomingMsg::IsCanceled() const {$/;"	f	class:ldd::net::IncomingMsg
IsCanceled	internal/incoming_msg_impl.h	/^    bool IsCanceled() const { return canceled_; }$/;"	f	class:ldd::net::IncomingMsg::Impl
IsCanceled	result.h	/^    bool IsCanceled() const { return type_ == kCanceled; }$/;"	f	class:ldd::net::Result
IsClassA	address.cc	/^bool Address::IsClassA() const {$/;"	f	class:ldd::net::Address
IsClassB	address.cc	/^bool Address::IsClassB() const {$/;"	f	class:ldd::net::Address
IsClassC	address.cc	/^bool Address::IsClassC() const {$/;"	f	class:ldd::net::Address
IsClosed	channel.h	/^    bool IsClosed() const { return state() == kClosed; }$/;"	f	class:ldd::net::Channel
IsConnected	channel.h	/^    bool IsConnected() const { return state() == kConnected; }$/;"	f	class:ldd::net::Channel
IsConnecting	channel.h	/^    bool IsConnecting() const { return state() == kConnecting; }$/;"	f	class:ldd::net::Channel
IsEmpty	buffer.h	/^    bool IsEmpty() const { return size() == 0u; }$/;"	f	class:ldd::net::Buffer
IsFailed	result.h	/^    bool IsFailed() const { return type_ == kFailed; }$/;"	f	class:ldd::net::Result
IsLoopback	address.cc	/^bool Address::IsLoopback() const {$/;"	f	class:ldd::net::Address
IsMulticast	address.cc	/^bool Address::IsMulticast() const {$/;"	f	class:ldd::net::Address
IsOk	result.h	/^    bool IsOk() const { return type_ == kOk; }$/;"	f	class:ldd::net::Result
IsOpen	internal/listener_impl.h	/^    bool IsOpen() const { return fd_ >= 0; }$/;"	f	class:ldd::net::Listener::Impl
IsOpen	listener.cc	/^bool Listener::IsOpen() const {$/;"	f	class:ldd::net::Listener
IsSet	internal/task.h	/^    bool IsSet() { return is_set_; }$/;"	f	class:ldd::net::Task
IsTimedOut	result.h	/^    bool IsTimedOut() const { return type_ == kTimedOut; }$/;"	f	class:ldd::net::Result
IsUnspecified	address.cc	/^bool Address::IsUnspecified() const {$/;"	f	class:ldd::net::Address
IsV4	address.h	/^    bool IsV4() const { return family_ == V4; }$/;"	f	class:ldd::net::Address
IsV6	address.h	/^    bool IsV6() const { return family_ == V6; }$/;"	f	class:ldd::net::Address
IsValid	internal/protocol.cc	/^bool ExtHeader::Parser::IsValid(uint16_t ext_len) const$/;"	f	class:ldd::net::ExtHeader::Parser
IsValid	internal/protocol.cc	/^bool Header::Parser::IsValid() const$/;"	f	class:ldd::net::Header::Parser
Join	event_loop.cc	/^void EventLoopThread::Join() {$/;"	f	class:ldd::net::EventLoopThread
LDD	other/Makefile	/^LDD := $(PWD)\/..\/..\/..\/..\/ldd$/;"	m
LDD	other/client/Makefile	/^LDD := $(PWD)\/..\/..\/..\/..\/ldd$/;"	m
LDD	test/client/Makefile	/^LDD := $(PWD)\/..\/..\/..\/..\/ldd$/;"	m
LDD	test/server/Makefile	/^LDD := $(PWD)\/..\/..\/..\/..\/ldd$/;"	m
LDD_INTERNAL_CHANNEL_IMPL_H_	internal/channel_impl.h	5;"	d
LDD_NET_ADDRESS_H_	address.h	5;"	d
LDD_NET_BUFFER_H_	buffer.h	2;"	d
LDD_NET_CHANNEL_H_	channel.h	2;"	d
LDD_NET_CLIENT_H_	client.h	5;"	d
LDD_NET_ENDPOING_H_	endpoint.h	5;"	d
LDD_NET_EVENT_H_	event.h	5;"	d
LDD_NET_EVENT_LOOP_H_	event_loop.h	5;"	d
LDD_NET_EVENT_LOOP_THREAD_POOL_H_	event_loop_thread_pool.h	3;"	d
LDD_NET_FACTORY_H_	factory.h	5;"	d
LDD_NET_INCOMING_MSG_H_	incoming_msg.h	2;"	d
LDD_NET_INCOMING_MSG_REGISTRY_H_	incoming_msg_registry.h	5;"	d
LDD_NET_INTERNAL_CLIENT_IMPL_H_	internal/client_impl.h	5;"	d
LDD_NET_INTERNAL_EVENT_IMPL_H_	internal/event_impl.h	5;"	d
LDD_NET_INTERNAL_EVENT_LOOP_IMPL_H_	internal/event_loop_impl.h	5;"	d
LDD_NET_INTERNAL_INCOMING_MSG_IMPL_H_	internal/incoming_msg_impl.h	5;"	d
LDD_NET_INTERNAL_INCOMING_PACKET_H_	internal/incoming_packet.h	5;"	d
LDD_NET_INTERNAL_LISTENER_IMPL_H_	internal/listener_impl.h	5;"	d
LDD_NET_INTERNAL_OUTGOING_MSG_IMPL_H_	internal/outgoing_msg_impl.h	5;"	d
LDD_NET_INTERNAL_OUTGOING_PACKET_H_	internal/outgoing_packet.h	5;"	d
LDD_NET_INTERNAL_PULSE_CHECKER_H_	internal/pulse_checker.h	5;"	d
LDD_NET_INTERNAL_PULSE_EMITTER_H_	internal/pulse_emitter.h	5;"	d
LDD_NET_INTERNAL_SERVER_IMPL_H_	internal/server_impl.h	5;"	d
LDD_NET_LISTENER_H_	listener.h	5;"	d
LDD_NET_MESSAGE_H_	message.h	5;"	d
LDD_NET_OUTGOING_MSG_H_	outgoing_msg.h	2;"	d
LDD_NET_PAYLOAD_H_	payload.h	5;"	d
LDD_NET_PROTOCOL_H_	internal/protocol.h	2;"	d
LDD_NET_REGISTRY_H_	registry.h	5;"	d
LDD_NET_RESULT_H_	result.h	5;"	d
LDD_NET_SERVER_H_	server.h	5;"	d
LDFLAGS	other/Makefile	/^LDFLAGS := -pthread \\$/;"	m
LDFLAGS	other/client/Makefile	/^LDFLAGS := -pthread \\$/;"	m
LDFLAGS	test/client/Makefile	/^LDFLAGS := -pthread \\$/;"	m
LDFLAGS	test/server/Makefile	/^LDFLAGS := -pthread \\$/;"	m
LDFLAGS	test1/atomic/Makefile	/^LDFLAGS := -pthread \\$/;"	m
LDFLAGS	test1/client/Makefile	/^LDFLAGS := -pthread \\$/;"	m
LDFLAGS	test1/concurrency_connect/Makefile	/^LDFLAGS := -pthread \\$/;"	m
LDFLAGS	test1/deadline_timer/Makefile	/^LDFLAGS := -L\/usr\/lib64\/boost141 \\$/;"	m
LDFLAGS	test1/event/Makefile	/^LDFLAGS := -pthread \\$/;"	m
LDFLAGS	test1/noblocking_accept/Makefile	/^LDFLAGS := -pthread \\$/;"	m
LIBS	other/Makefile	/^LIBS := -lglog -lgflags \\$/;"	m
LIBS	other/client/Makefile	/^LIBS := -lglog -lgflags \\$/;"	m
LIBS	test/client/Makefile	/^LIBS := -lglog -lgflags \\$/;"	m
LIBS	test/server/Makefile	/^LIBS := -lglog -lgflags \\$/;"	m
LIBS	test1/atomic/Makefile	/^LIBS := -lglog -lgflags$/;"	m
LIBS	test1/client/Makefile	/^LIBS := -lglog -lgflags$/;"	m
LIBS	test1/concurrency_connect/Makefile	/^LIBS := -lglog -lgflags$/;"	m
LIBS	test1/deadline_timer/Makefile	/^LIBS := -lglog -lboost_system$/;"	m
LIBS	test1/event/Makefile	/^LIBS := -llddnet$/;"	m
LIBS	test1/noblocking_accept/Makefile	/^LIBS := -lglog -lgflags$/;"	m
LazyPulseEmitter	internal/pulse_emitter.h	/^    LazyPulseEmitter(EventLoop* event_loop, const Pulser& pulser,$/;"	f	class:ldd::net::LazyPulseEmitter
LazyPulseEmitter	internal/pulse_emitter.h	/^class LazyPulseEmitter : public PulseEmitter {$/;"	c	namespace:ldd::net
Listener	listener.cc	/^Listener::Listener(EventLoop* event_loop)$/;"	f	class:ldd::net::Listener
Listener	listener.h	/^class Listener : boost::noncopyable {$/;"	c	namespace:ldd::net
Loopback	address.cc	/^Address Address::Loopback(Family family) {$/;"	f	class:ldd::net::Address
MAX_LISTEN_QUEUE	test1/client/x_socket.h	6;"	d
MAX_LISTEN_QUEUE	test1/concurrency_connect/x_socket.h	6;"	d
MAX_LISTEN_QUEUE	ut/x_socket.h	14;"	d
MakeShared	factory.h	/^    boost::shared_ptr<T> MakeShared() const { return boost::make_shared<D>(); }$/;"	f	struct:ldd::net::FactoryImpl
MakeShared	factory.h	/^    boost::shared_ptr<T> MakeShared() const { return boost::make_shared<D>(a1_); }$/;"	f	struct:ldd::net::FactoryImpl
MakeShared	factory.h	/^    boost::shared_ptr<T> MakeShared() const { return boost::make_shared<D>(a1_, a2_); }$/;"	f	struct:ldd::net::FactoryImpl
MakeShared	factory.h	/^    boost::shared_ptr<T> MakeShared() const { return boost::make_shared<D>(a1_, a2_, a3_); }$/;"	f	struct:ldd::net::FactoryImpl
MakeShared	factory.h	/^    boost::shared_ptr<T> MakeShared() const { return boost::make_shared<D>(a1_, a2_, a3_, a4_); }$/;"	f	struct:ldd::net::FactoryImpl
MakeShared	factory.h	/^    boost::shared_ptr<T> MakeShared() const { return boost::make_shared<D>(a1_, a2_, a3_, a4_, a5_); }$/;"	f	struct:ldd::net::FactoryImpl
MakeShared	factory.h	/^    boost::shared_ptr<T> MakeShared() const { return boost::make_shared<D>(a1_, a2_, a3_, a4_, a5_, a6_); }$/;"	f	struct:ldd::net::FactoryImpl
MakeShared	factory.h	/^    boost::shared_ptr<T> MakeShared() const { return boost::make_shared<D>(a1_, a2_, a3_, a4_, a5_, a6_, a7_); }$/;"	f	struct:ldd::net::FactoryImpl
MakeShared	factory.h	/^    boost::shared_ptr<T> MakeShared() const { return boost::make_shared<D>(a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_); }$/;"	f	struct:ldd::net::FactoryImpl
MakeShared	factory.h	/^    boost::shared_ptr<T> MakeShared() const { return boost::make_shared<D>(a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_, a9_); }$/;"	f	struct:ldd::net::FactoryImpl
MakeShared	factory.h	/^    boost::shared_ptr<T> MakeShared() const { return boost::make_shared<D>(a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_, a9_, a10_); }$/;"	f	struct:ldd::net::FactoryImpl
MakeShared	registry.h	/^inline boost::shared_ptr<T> Registry<T, Tag>::MakeShared(Tag n) const {$/;"	f	class:ldd::net::Registry
MessageId	message.h	/^typedef int32_t     MessageId;$/;"	t	namespace:ldd::net
MessageType	message.h	/^typedef uint16_t    MessageType;$/;"	t	namespace:ldd::net
Msg	sample/a.h	/^struct Msg {$/;"	s
MyEchoMsg	other/imsg.h	/^    MyEchoMsg(size_t count) : count_(count), n_(0) {}$/;"	f	class:MyEchoMsg
MyEchoMsg	other/imsg.h	/^class MyEchoMsg : public ldd::net::TypedIncomingMsg<1333> {$/;"	c
MyEchoMsg	test/benchmark/server/imsg.h	/^    MyEchoMsg() {}$/;"	f	class:MyEchoMsg
MyEchoMsg	test/benchmark/server/imsg.h	/^class MyEchoMsg : public ldd::net::TypedIncomingMsg<2000> {$/;"	c
MyEchoMsg	test/client/imsg.h	/^    MyEchoMsg(size_t count) : count_(count), n_(0) {}$/;"	f	class:MyEchoMsg
MyEchoMsg	test/client/imsg.h	/^class MyEchoMsg : public ldd::net::TypedIncomingMsg<1333> {$/;"	c
MyEchoMsg	test/server/imsg.h	/^    MyEchoMsg(size_t count) : count_(count), n_(0) {}$/;"	f	class:MyEchoMsg
MyEchoMsg	test/server/imsg.h	/^class MyEchoMsg : public ldd::net::TypedIncomingMsg<1333> {$/;"	c
MyEchoMsg	ut/imsg.h	/^    MyEchoMsg(MyLddNet *ldd_net) : count_(1), n_(0), ldd_net_(ldd_net) {}$/;"	f	class:MyEchoMsg
MyEchoMsg	ut/imsg.h	/^class MyEchoMsg : public ldd::net::TypedIncomingMsg<1333> {$/;"	c
MyEmitMsg	other/client/omsg.h	/^    MyEmitMsg(const std::string& str, const std::string& str2)$/;"	f	class:MyEmitMsg
MyEmitMsg	other/client/omsg.h	/^class MyEmitMsg : public ldd::net::TypedOutgoingMsg<1333> {$/;"	c
MyEmitMsg	test/benchmark/client/omsg.cc	/^MyEmitMsg::MyEmitMsg(const std::string& str, const std::string& str2)$/;"	f	class:MyEmitMsg
MyEmitMsg	test/benchmark/client/omsg.h	/^class MyEmitMsg : public ldd::net::TypedOutgoingMsg<2000> {$/;"	c
MyEmitMsg	test/client/omsg.h	/^    MyEmitMsg(const std::string& str, const std::string& str2)$/;"	f	class:MyEmitMsg
MyEmitMsg	test/client/omsg.h	/^class MyEmitMsg : public ldd::net::TypedOutgoingMsg<1333> {$/;"	c
MyEmitMsg	test/server/omsg.h	/^    MyEmitMsg(const std::string& str, const std::string& str2)$/;"	f	class:MyEmitMsg
MyEmitMsg	test/server/omsg.h	/^class MyEmitMsg : public ldd::net::TypedOutgoingMsg<1333> {$/;"	c
MyEmitMsg	ut/omsg.h	/^    MyEmitMsg(MyLddNet *ldd_net, $/;"	f	class:MyEmitMsg
MyEmitMsg	ut/omsg.h	/^class MyEmitMsg : public ldd::net::TypedOutgoingMsg<1333> {$/;"	c
MyEventLoop	ut/event_loop_test.cc	/^    MyEventLoop() : ok_(false) {}$/;"	f	class:MyEventLoop
MyEventLoop	ut/event_loop_test.cc	/^class MyEventLoop {$/;"	c	file:
MyEventLoopTest	ut/event_loop_test.cc	/^class MyEventLoopTest : public testing::Test {$/;"	c	file:
MyEventLoopThread	ut/event_loop_test.cc	/^    MyEventLoopThread() : ok_(false) {}$/;"	f	class:MyEventLoopThread
MyEventLoopThread	ut/event_loop_test.cc	/^class MyEventLoopThread {$/;"	c	file:
MyEventLoopThreadPool	ut/event_loop_test.cc	/^    MyEventLoopThreadPool() : loop_thread_pool_(&loop_) {}$/;"	f	class:MyEventLoopThreadPool
MyEventLoopThreadPool	ut/event_loop_test.cc	/^class MyEventLoopThreadPool {$/;"	c	file:
MyEventLoopThreadPoolTest	ut/event_loop_test.cc	/^class MyEventLoopThreadPoolTest : public testing::Test {$/;"	c	file:
MyEventLoopThreadTest	ut/event_loop_test.cc	/^class MyEventLoopThreadTest : public testing::Test {$/;"	c	file:
MyFdEvent	ut/event_test.cc	/^    MyFdEvent() : client_(&loop_) {}$/;"	f	class:MyFdEvent
MyFdEvent	ut/event_test.cc	/^class MyFdEvent {$/;"	c	file:
MyFdEventTest	ut/event_test.cc	/^class MyFdEventTest : public testing::Test {$/;"	c	file:
MyLddNet	ut/my_lddnet.h	/^    MyLddNet() : listener_(&loop_), ok_(true) {}$/;"	f	class:MyLddNet
MyLddNet	ut/my_lddnet.h	/^class MyLddNet {$/;"	c
MyLddNetTest	ut/lddnet_test.cc	/^class MyLddNetTest : public testing::Test {$/;"	c	file:
MySignalEvent	ut/event_test.cc	/^    MySignalEvent() : sig_ev_(&loop_), ok_(false) {}$/;"	f	class:MySignalEvent
MySignalEvent	ut/event_test.cc	/^class MySignalEvent {$/;"	c	file:
MySignalEventTest	ut/event_test.cc	/^class MySignalEventTest : public testing::Test {$/;"	c	file:
MyTimerEvent	ut/event_test.cc	/^    MyTimerEvent() : ok_(false)$/;"	f	class:MyTimerEvent
MyTimerEvent	ut/event_test.cc	/^class MyTimerEvent {$/;"	c	file:
MyTimerEventTest	ut/event_test.cc	/^class MyTimerEventTest : public testing::Test {$/;"	c	file:
New	factory.h	/^    T* New() const { return new D(); }$/;"	f	struct:ldd::net::FactoryImpl
New	factory.h	/^    T* New() const { return new D(a1_); }$/;"	f	struct:ldd::net::FactoryImpl
New	factory.h	/^    T* New() const { return new D(a1_, a2_); }$/;"	f	struct:ldd::net::FactoryImpl
New	factory.h	/^    T* New() const { return new D(a1_, a2_, a3_); }$/;"	f	struct:ldd::net::FactoryImpl
New	factory.h	/^    T* New() const { return new D(a1_, a2_, a3_, a4_); }$/;"	f	struct:ldd::net::FactoryImpl
New	factory.h	/^    T* New() const { return new D(a1_, a2_, a3_, a4_, a5_); }$/;"	f	struct:ldd::net::FactoryImpl
New	factory.h	/^    T* New() const { return new D(a1_, a2_, a3_, a4_, a5_, a6_); }$/;"	f	struct:ldd::net::FactoryImpl
New	factory.h	/^    T* New() const { return new D(a1_, a2_, a3_, a4_, a5_, a6_, a7_); }$/;"	f	struct:ldd::net::FactoryImpl
New	factory.h	/^    T* New() const { return new D(a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_); }$/;"	f	struct:ldd::net::FactoryImpl
New	factory.h	/^    T* New() const { return new D(a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_, a9_); }$/;"	f	struct:ldd::net::FactoryImpl
New	factory.h	/^    T* New() const { return new D(a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_, a9_, a10_); }$/;"	f	struct:ldd::net::FactoryImpl
New	registry.h	/^inline T* Registry<T, Tag>::New(Tag n) const {$/;"	f	class:ldd::net::Registry
New	sample/a.h	/^    Msg* New() const { return new T(); }$/;"	f	struct:FactoryImpl
New	sample/a.h	/^    Msg* New() const { return new T(a1_); }$/;"	f	struct:FactoryImpl
New	sample/a.h	/^    Msg* New() const { return new T(a1_, a2_); }$/;"	f	struct:FactoryImpl
NewChannel	internal/server_impl.cc	/^boost::shared_ptr<Channel> Server::Impl::NewChannel() {$/;"	f	class:ldd::net::Server::Impl
NewChannel	internal/server_impl.cc	/^boost::shared_ptr<Channel> Server::Impl::NewChannel(const Address& addr) {$/;"	f	class:ldd::net::Server::Impl
NewDefaultIncomingMsg	incoming_msg_registry.h	/^    boost::shared_ptr<DynamicIncomingMsg> NewDefaultIncomingMsg() {$/;"	f	class:ldd::net::IncomingMsgRegistry
NewFactory	factory.h	/^inline Factory<T>* Factory<T>::NewFactory() {$/;"	f	class:ldd::net::Factory
NewFactory	factory.h	/^inline Factory<T>* Factory<T>::NewFactory(A1 a1) {$/;"	f	class:ldd::net::Factory
NewFactory	factory.h	/^inline Factory<T>* Factory<T>::NewFactory(A1 a1, A2 a2) {$/;"	f	class:ldd::net::Factory
NewFactory	factory.h	/^inline Factory<T>* Factory<T>::NewFactory(A1 a1, A2 a2, A3 a3) {$/;"	f	class:ldd::net::Factory
NewFactory	factory.h	/^inline Factory<T>* Factory<T>::NewFactory(A1 a1, A2 a2, A3 a3, A4 a4) {$/;"	f	class:ldd::net::Factory
NewFactory	factory.h	/^inline Factory<T>* Factory<T>::NewFactory(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {$/;"	f	class:ldd::net::Factory
NewFactory	factory.h	/^inline Factory<T>* Factory<T>::NewFactory(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {$/;"	f	class:ldd::net::Factory
NewFactory	factory.h	/^inline Factory<T>* Factory<T>::NewFactory(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {$/;"	f	class:ldd::net::Factory
NewFactory	factory.h	/^inline Factory<T>* Factory<T>::NewFactory(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) {$/;"	f	class:ldd::net::Factory
NewFactory	factory.h	/^inline Factory<T>* Factory<T>::NewFactory(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9) {$/;"	f	class:ldd::net::Factory
NewFactory	factory.h	/^inline Factory<T>* Factory<T>::NewFactory(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10) {$/;"	f	class:ldd::net::Factory
NewFactory	sample/a.h	/^inline Factory* Factory::NewFactory() {$/;"	f	class:Factory
NewFactory	sample/a.h	/^inline Factory* Factory::NewFactory(A1 a1) {$/;"	f	class:Factory
NewFactory	sample/a.h	/^inline Factory* Factory::NewFactory(A1 a1, A2 a2) {$/;"	f	class:Factory
NewIncomingMsg	incoming_msg_registry.h	/^    boost::shared_ptr<IncomingMsg> NewIncomingMsg(MessageType t) { return MakeShared(t); }$/;"	f	class:ldd::net::IncomingMsgRegistry
NextOutgoingMsgId	internal/channel_impl.h	/^    int32_t NextOutgoingMsgId() {$/;"	f	class:ldd::net::Channel::Impl
Notifier	client.h	/^    typedef boost::function<void(const boost::shared_ptr<Channel>&)> Notifier;$/;"	t	class:ldd::net::Client
Notifier	internal/channel_impl.h	/^    typedef boost::function<void(const boost::shared_ptr<Channel>&)> Notifier;$/;"	t	class:ldd::net::Channel::Impl
Notifier	server.h	/^    typedef boost::function<void(const boost::shared_ptr<Channel>&)> Notifier;$/;"	t	class:ldd::net::Server
Notify	incoming_msg.cc	/^void IncomingMsg::Notify(bool done) {$/;"	f	class:ldd::net::IncomingMsg
Notify	internal/channel_impl.cc	/^void Channel::Impl::Notify(const Notifier& notifier) {$/;"	f	class:ldd::net::Channel::Impl
Notify	internal/event_impl.cc	/^void FdEvent::Impl::Notify(int fd, short what, void *arg) {$/;"	f	class:ldd::net::FdEvent::Impl
Notify	internal/incoming_msg_impl.cc	/^void IncomingMsg::Impl::Notify(bool done) {$/;"	f	class:ldd::net::IncomingMsg::Impl
NotifyClosed	other/client/main.cc	/^void NotifyClosed(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyClosed	other/main.cc	/^void NotifyClosed(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyClosed	test/benchmark/client/main.cc	/^void NotifyClosed(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyClosed	test/benchmark/server/main.cc	/^void NotifyClosed(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyClosed	test/client/main.cc	/^void NotifyClosed(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyClosed	test/server/main.cc	/^void NotifyClosed(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyClosed	ut/my_lddnet.cc	/^void NotifyClosed(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyConnected	other/client/main.cc	/^void NotifyConnected(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyConnected	other/main.cc	/^void NotifyConnected(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyConnected	test/benchmark/client/main.cc	/^void NotifyConnected(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyConnected	test/benchmark/server/main.cc	/^void NotifyConnected(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyConnected	test/client/main.cc	/^void NotifyConnected(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyConnected	test/server/main.cc	/^void NotifyConnected(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyConnected	ut/my_lddnet.cc	/^void NotifyConnected(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyConnecting	other/client/main.cc	/^void NotifyConnecting(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyConnecting	test/benchmark/client/main.cc	/^void NotifyConnecting(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyConnecting	test/client/main.cc	/^void NotifyConnecting(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyConnecting	ut/my_lddnet.cc	/^void NotifyConnecting(const boost::shared_ptr<ldd::net::Channel>& c) {$/;"	f
NotifyIncomingPacket	internal/pulse_checker.cc	/^void PulseChecker::NotifyIncomingPacket() {$/;"	f	class:ldd::net::PulseChecker
NotifyIncomingPacket	internal/pulse_emitter.cc	/^void PulseEmitter::NotifyIncomingPacket() {$/;"	f	class:ldd::net::PulseEmitter
NotifyIncomingPulse	internal/pulse_checker.cc	/^void PulseChecker::NotifyIncomingPulse() {$/;"	f	class:ldd::net::PulseChecker
NotifyIncomingPulse	internal/pulse_emitter.cc	/^void PulseEmitter::NotifyIncomingPulse() {$/;"	f	class:ldd::net::PulseEmitter
NotifyOutgoingPacket	internal/pulse_emitter.cc	/^void PulseEmitter::NotifyOutgoingPacket() {$/;"	f	class:ldd::net::PulseEmitter
OBJ	other/Makefile	/^OBJ := $(patsubst %.cc, %.o, $(SRC))$/;"	m
OBJ	other/client/Makefile	/^OBJ := $(patsubst %.cc, %.o, $(SRC))$/;"	m
OBJ	test/client/Makefile	/^OBJ := $(patsubst %.cc, %.o, $(SRC))$/;"	m
OBJ	test/server/Makefile	/^OBJ := $(patsubst %.cc, %.o, $(SRC))$/;"	m
OBJ	test1/atomic/Makefile	/^OBJ := $(patsubst %.cc, %.o, $(SRC))$/;"	m
OBJ	test1/client/Makefile	/^OBJ := $(patsubst %.cc, %.o, $(SRC))$/;"	m
OBJ	test1/concurrency_connect/Makefile	/^OBJ := $(patsubst %.cc, %.o, $(SRC))$/;"	m
OBJ	test1/event/Makefile	/^OBJ := $(patsubst %.cc, %.o, $(SRC))$/;"	m
OBJ	test1/noblocking_accept/Makefile	/^OBJ := $(patsubst %.cc, %.o, $(SRC))$/;"	m
OMSG_H_	other/client/omsg.h	5;"	d
OMSG_H_	test/benchmark/client/omsg.h	5;"	d
OMSG_H_	test/client/omsg.h	5;"	d
OMSG_H_	test/server/omsg.h	5;"	d
OMSG_H_	ut/omsg.h	5;"	d
OPTIMIZE	test/event_loop/Makefile	/^OPTIMIZE = -O0 # Comment this line for optimized(-O3) code$/;"	m
OPTIMIZE	ut/Makefile	/^OPTIMIZE = -O0 # Comment this line for optimized(-O3) code$/;"	m
Ok	result.h	/^    static Result Ok(Code code) { return Result(kOk, code); }$/;"	f	class:ldd::net::Result
OnCancel	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::OnCancel() {$/;"	f	class:ldd::net::OutgoingMsg::Impl
OnClose	internal/channel_impl.cc	/^void IncomingChannel::OnClose() {$/;"	f	class:ldd::net::IncomingChannel
OnClose	internal/channel_impl.cc	/^void OutgoingChannel::OnClose() {$/;"	f	class:ldd::net::OutgoingChannel
OnConnect	internal/channel_impl.cc	/^void OutgoingChannel::OnConnect(int error)$/;"	f	class:ldd::net::OutgoingChannel
OnConnect	internal/channel_impl.h	/^    virtual void OnConnect(int error) {}$/;"	f	class:ldd::net::IncomingChannel
OnConnectTimeout	internal/channel_impl.cc	/^void OutgoingChannel::OnConnectTimeout(const boost::shared_ptr<Channel>& o) {$/;"	f	class:ldd::net::OutgoingChannel
OnError	internal/channel_impl.cc	/^void IncomingChannel::OnError() {$/;"	f	class:ldd::net::IncomingChannel
OnError	internal/channel_impl.cc	/^void OutgoingChannel::OnError() {$/;"	f	class:ldd::net::OutgoingChannel
OnFailed	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::OnFailed() {$/;"	f	class:ldd::net::OutgoingMsg::Impl
OnIncomingPacket	internal/channel_impl.cc	/^void Channel::Impl::OnIncomingPacket() {$/;"	f	class:ldd::net::Channel::Impl
OnOk	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::OnOk(Code code) {$/;"	f	class:ldd::net::OutgoingMsg::Impl
OnOutgoingPacket	internal/channel_impl.cc	/^void Channel::Impl::OnOutgoingPacket() {$/;"	f	class:ldd::net::Channel::Impl
OnPing	internal/channel_impl.cc	/^void IncomingChannel::OnPing() {$/;"	f	class:ldd::net::IncomingChannel
OnPing	internal/channel_impl.cc	/^void OutgoingChannel::OnPing() {$/;"	f	class:ldd::net::OutgoingChannel
OnPong	internal/channel_impl.cc	/^void IncomingChannel::OnPong() {$/;"	f	class:ldd::net::IncomingChannel
OnPong	internal/channel_impl.cc	/^void OutgoingChannel::OnPong() {$/;"	f	class:ldd::net::OutgoingChannel
OnPulseFailed	internal/channel_impl.cc	/^void Channel::Impl::OnPulseFailed() {$/;"	f	class:ldd::net::Channel::Impl
OnRead	internal/channel_impl.cc	/^void Channel::Impl::OnRead()$/;"	f	class:ldd::net::Channel::Impl
OnRead	ut/event_test.cc	/^void TCPClient::OnRead(int events)$/;"	f	class:TCPClient
OnRequest	internal/incoming_msg_impl.cc	/^void IncomingMsg::Impl::OnRequest(const Payload& payload)$/;"	f	class:ldd::net::IncomingMsg::Impl
OnRequest	internal/outgoing_msg_impl.cc	/^bool OutgoingMsg::Impl::OnRequest(Payload* payload) {$/;"	f	class:ldd::net::OutgoingMsg::Impl
OnResolve	internal/channel_impl.cc	/^void OutgoingChannel::OnResolve(int errcode$/;"	f	class:ldd::net::OutgoingChannel
OnResolveTimeout	internal/channel_impl.cc	/^void OutgoingChannel::OnResolveTimeout(const boost::shared_ptr<Channel>& o) {$/;"	f	class:ldd::net::OutgoingChannel
OnResponse	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::OnResponse(const Payload& payload, bool last,$/;"	f	class:ldd::net::OutgoingMsg::Impl
OnSignal	internal/event_impl.cc	/^void SignalEvent::Impl::OnSignal(int fd, short what, void *arg)$/;"	f	class:ldd::net::SignalEvent::Impl
OnSignal	test/benchmark/server/main.cc	/^void OnSignal(int, ldd::net::EventLoop* e) {$/;"	f
OnTimeout	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::OnTimeout() {$/;"	f	class:ldd::net::OutgoingMsg::Impl
OnTimeout	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::OnTimeout(TimerEvent* timer) {$/;"	f	class:ldd::net::OutgoingMsg::Impl
OnTimer	internal/event_impl.cc	/^void SignalEvent::Impl::OnTimer(int fd, short what, void *arg)$/;"	f	class:ldd::net::SignalEvent::Impl
OnTimer	internal/event_impl.cc	/^void TimerEvent::Impl::OnTimer(int fd, short what, void *arg) {$/;"	f	class:ldd::net::TimerEvent::Impl
OnTimer	test/benchmark/client/main.cc	/^void OnTimer() {$/;"	f
OnTimer	test/benchmark/server/main.cc	/^void OnTimer() {$/;"	f
OnTimer	test/server/main.cc	/^void OnTimer()$/;"	f
OnWait	ut/event_test.cc	/^void MyTimerEvent::OnWait()$/;"	f	class:MyTimerEvent
OnWrite	internal/channel_impl.cc	/^void Channel::Impl::OnWrite()$/;"	f	class:ldd::net::Channel::Impl
OnWrite	ut/event_test.cc	/^void TCPClient::OnWrite(int events)$/;"	f	class:TCPClient
Open	internal/channel_impl.cc	/^void IncomingChannel::Open() {$/;"	f	class:ldd::net::IncomingChannel
Open	internal/channel_impl.cc	/^void OutgoingChannel::Open() {$/;"	f	class:ldd::net::OutgoingChannel
Open	internal/listener_impl.cc	/^bool Listener::Impl::Open(const Endpoint& endpoint) {$/;"	f	class:ldd::net::Listener::Impl
Open	listener.cc	/^bool Listener::Open(const Endpoint& endpoint) {$/;"	f	class:ldd::net::Listener
OpenChannel	internal/server_impl.cc	/^void Server::Impl::OpenChannel(const boost::shared_ptr<Channel>& channel) {$/;"	f	class:ldd::net::Server::Impl
OpenThreadChannel	internal/server_impl.cc	/^void Server::Impl::OpenThreadChannel(const boost::shared_ptr<Channel>& channel) {$/;"	f	class:ldd::net::Server::Impl
Options	client.h	/^    struct Options {$/;"	s	class:ldd::net::Client
Options	internal/client_impl.cc	/^Client::Options::Options()$/;"	f	class:ldd::net::Client::Options
Options	internal/server_impl.cc	/^Server::Options::Options()$/;"	f	class:ldd::net::Server::Options
Options	server.h	/^    struct Options {$/;"	s	class:ldd::net::Server
OutgoingCancel	internal/outgoing_packet.h	/^    OutgoingCancel(MessageId id) {$/;"	f	class:ldd::net::OutgoingCancel
OutgoingCancel	internal/outgoing_packet.h	/^class OutgoingCancel : public OutgoingPacket {$/;"	c	namespace:ldd::net
OutgoingChannel	internal/channel_impl.cc	/^OutgoingChannel::OutgoingChannel(Owner* owner, EventLoop* event_loop,$/;"	f	class:ldd::net::OutgoingChannel
OutgoingChannel	internal/channel_impl.h	/^class OutgoingChannel : public Channel::Impl {$/;"	c	namespace:ldd::net
OutgoingEnd	internal/outgoing_packet.h	/^    OutgoingEnd(MessageId id, Code code) {$/;"	f	class:ldd::net::OutgoingEnd
OutgoingEnd	internal/outgoing_packet.h	/^class OutgoingEnd : public OutgoingPacket {$/;"	c	namespace:ldd::net
OutgoingMsg	outgoing_msg.cc	/^OutgoingMsg::OutgoingMsg()$/;"	f	class:ldd::net::OutgoingMsg
OutgoingMsg	outgoing_msg.h	/^class OutgoingMsg : public boost::enable_shared_from_this<OutgoingMsg>,$/;"	c	namespace:ldd::net
OutgoingMsgMap	internal/channel_impl.h	/^    typedef std::map<int32_t, boost::shared_ptr<OutgoingMsg> > OutgoingMsgMap;$/;"	t	class:ldd::net::Channel::Impl
OutgoingPacket	internal/outgoing_packet.cc	/^OutgoingPacket::OutgoingPacket()$/;"	f	class:ldd::net::OutgoingPacket
OutgoingPacket	internal/outgoing_packet.h	/^class OutgoingPacket {$/;"	c	namespace:ldd::net
OutgoingPacket	internal/pulse_emitter.cc	/^void LazyPulseEmitter::OutgoingPacket() {$/;"	f	class:ldd::net::LazyPulseEmitter
OutgoingPacket	internal/pulse_emitter.h	/^    virtual void OutgoingPacket() {}$/;"	f	class:ldd::net::ClockPulseEmitter
OutgoingPacket	internal/pulse_emitter.h	/^    virtual void OutgoingPacket() {}$/;"	f	class:ldd::net::ReplyPulseEmitter
OutgoingPacketWithPayload	internal/outgoing_packet.h	/^    OutgoingPacketWithPayload() {}$/;"	f	class:ldd::net::OutgoingPacketWithPayload
OutgoingPacketWithPayload	internal/outgoing_packet.h	/^    OutgoingPacketWithPayload(const Payload& payload)$/;"	f	class:ldd::net::OutgoingPacketWithPayload
OutgoingPacketWithPayload	internal/outgoing_packet.h	/^class OutgoingPacketWithPayload : public OutgoingPacket {$/;"	c	namespace:ldd::net
OutgoingPing	internal/outgoing_packet.h	/^    OutgoingPing(MessageId id) {$/;"	f	class:ldd::net::OutgoingPing
OutgoingPing	internal/outgoing_packet.h	/^class OutgoingPing : public OutgoingPacket {$/;"	c	namespace:ldd::net
OutgoingPong	internal/outgoing_packet.h	/^    OutgoingPong(MessageId id) {$/;"	f	class:ldd::net::OutgoingPong
OutgoingPong	internal/outgoing_packet.h	/^class OutgoingPong : public OutgoingPacket {$/;"	c	namespace:ldd::net
OutgoingRequest	internal/outgoing_packet.cc	/^OutgoingRequest::OutgoingRequest(const boost::shared_ptr<OutgoingMsg>& msg)$/;"	f	class:ldd::net::OutgoingRequest
OutgoingRequest	internal/outgoing_packet.h	/^class OutgoingRequest : public OutgoingPacketWithPayload {$/;"	c	namespace:ldd::net
OutgoingResponse	internal/outgoing_packet.h	/^    OutgoingResponse(MessageId id, const Payload& payload)$/;"	f	class:ldd::net::OutgoingResponse
OutgoingResponse	internal/outgoing_packet.h	/^class OutgoingResponse: public OutgoingPacketWithPayload {$/;"	c	namespace:ldd::net
Owner	internal/channel_impl.h	/^    typedef Channel Owner;$/;"	t	class:ldd::net::Channel::Impl
PULSE	ut/my_lddnet.cc	/^const int PULSE = 1000;$/;"	v
PWD	other/Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	other/client/Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	test/client/Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	test/server/Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	test1/atomic/Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	test1/client/Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	test1/concurrency_connect/Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	test1/event/Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	test1/noblocking_accept/Makefile	/^PWD := $(shell pwd)$/;"	m
Parser	internal/protocol.cc	/^ExtHeader::Parser::Parser(uint8_t ext_count, const char* buf) $/;"	f	class:ldd::net::ExtHeader::Parser
Parser	internal/protocol.cc	/^Header::Parser::Parser(const char* buf)$/;"	f	class:ldd::net::Header::Parser
Parser	internal/protocol.h	/^    class Parser {$/;"	c	class:ldd::net::ExtHeader
Parser	internal/protocol.h	/^    class Parser {$/;"	c	class:ldd::net::Header
Payload	incoming_msg.h	/^    typedef ldd::net::Payload Payload;$/;"	t	class:ldd::net::IncomingMsg
Payload	internal/incoming_msg_impl.h	/^    typedef ldd::net::Payload Payload;$/;"	t	class:ldd::net::IncomingMsg::Impl
Payload	outgoing_msg.h	/^    typedef ldd::net::Payload Payload;$/;"	t	class:ldd::net::OutgoingMsg
Payload	payload.cc	/^Payload::Payload()$/;"	f	class:ldd::net::Payload
Payload	payload.cc	/^Payload::Payload(const Payload &load)$/;"	f	class:ldd::net::Payload
Payload	payload.h	/^class Payload {$/;"	c	namespace:ldd::net
PipeNotify	internal/event_loop_impl.cc	/^void EventLoop::Impl::PipeNotify(int fd, short what, void *arg)$/;"	f	class:ldd::net::EventLoop::Impl
Post	channel.cc	/^bool Channel::Post(const boost::shared_ptr<OutgoingMsg>& omsg,$/;"	f	class:ldd::net::Channel
Post	internal/channel_impl.cc	/^void Channel::Impl::Post(const boost::shared_ptr<OutgoingMsg>& omsg,$/;"	f	class:ldd::net::Channel::Impl
Process	internal/incoming_packet.cc	/^void IncomingCancel::Process() {$/;"	f	class:ldd::net::IncomingCancel
Process	internal/incoming_packet.cc	/^void IncomingEnd::Process() {$/;"	f	class:ldd::net::IncomingEnd
Process	internal/incoming_packet.cc	/^void IncomingPacketWithPayload::Process() {$/;"	f	class:ldd::net::IncomingPacketWithPayload
Process	internal/incoming_packet.cc	/^void IncomingPing::Process() {$/;"	f	class:ldd::net::IncomingPing
Process	internal/incoming_packet.cc	/^void IncomingPong::Process() {$/;"	f	class:ldd::net::IncomingPong
ProcessPacket	internal/channel_impl.cc	/^void Channel::Impl::ProcessPacket()$/;"	f	class:ldd::net::Channel::Impl
ProcessPacket	internal/incoming_packet.cc	/^void IncomingPacketWithPayload::ProcessPacket() {$/;"	f	class:ldd::net::IncomingPacketWithPayload
Pulse	internal/pulse_emitter.h	/^    void Pulse() { pulser_(); }$/;"	f	class:ldd::net::PulseEmitter
PulseChecker	internal/pulse_checker.cc	/^PulseChecker::PulseChecker(EventLoop* event_loop, const Reporter& reporter,$/;"	f	class:ldd::net::PulseChecker
PulseChecker	internal/pulse_checker.h	/^class PulseChecker {$/;"	c	namespace:ldd::net
PulseEmitter	internal/pulse_emitter.h	/^    PulseEmitter(EventLoop* event_loop, const Pulser& pulser,$/;"	f	class:ldd::net::PulseEmitter
PulseEmitter	internal/pulse_emitter.h	/^class PulseEmitter : boost::noncopyable {$/;"	c	namespace:ldd::net
Pulser	internal/pulse_emitter.h	/^    typedef boost::function<void()> Pulser;$/;"	t	class:ldd::net::PulseEmitter
Put	test1/client/put.cc	/^void Put(int fd)$/;"	f
QueueInLoop	event_loop.cc	/^void EventLoop::QueueInLoop(const Functor& handler) {$/;"	f	class:ldd::net::EventLoop
QueueInLoop	internal/event_loop_impl.cc	/^void EventLoop::Impl::QueueInLoop(const Functor& functor) {$/;"	f	class:ldd::net::EventLoop::Impl
QueueInLoop	ut/event_loop_test.cc	/^bool MyEventLoop::QueueInLoop()$/;"	f	class:MyEventLoop
QueueInLoop	ut/event_loop_test.cc	/^bool MyEventLoopThread::QueueInLoop()$/;"	f	class:MyEventLoopThread
QueueInLoop	ut/event_loop_test.cc	/^bool MyEventLoopThreadPool::QueueInLoop()$/;"	f	class:MyEventLoopThreadPool
REQUEST	ut/my_lddnet.cc	/^const std::string REQUEST = "This is the request";$/;"	v
RESOLVE	ut/my_lddnet.cc	/^const int RESOLVE = 10;$/;"	v
ROOT	test/benchmark/client/Makefile	/^ROOT = .$/;"	m
ROOT	test/benchmark/server/Makefile	/^ROOT = .$/;"	m
ROOT	test/event_loop/Makefile	/^ROOT = .$/;"	m
ROOT	ut/Makefile	/^ROOT = .$/;"	m
RTFLAGS	other/Makefile	/^RTFLAGS := \\$/;"	m
RTFLAGS	other/client/Makefile	/^RTFLAGS := \\$/;"	m
RTFLAGS	test/client/Makefile	/^RTFLAGS := \\$/;"	m
RTFLAGS	test/server/Makefile	/^RTFLAGS := \\$/;"	m
RTFLAGS	test1/atomic/Makefile	/^RTFLAGS := \\$/;"	m
RTFLAGS	test1/client/Makefile	/^RTFLAGS := \\$/;"	m
RTFLAGS	test1/concurrency_connect/Makefile	/^RTFLAGS := \\$/;"	m
RTFLAGS	test1/event/Makefile	/^RTFLAGS := \\$/;"	m
RTFLAGS	test1/noblocking_accept/Makefile	/^RTFLAGS := \\$/;"	m
ReSize	buffer.cc	/^void Buffer::ReSize(size_t n) {$/;"	f	class:ldd::net::Buffer
Read	internal/task.cc	/^int ReadTask::Read()$/;"	f	class:ldd::net::ReadTask
Read	internal/task.cc	/^int WriteTask::Read()$/;"	f	class:ldd::net::WriteTask
ReadBody	internal/channel_impl.cc	/^void Channel::Impl::ReadBody()$/;"	f	class:ldd::net::Channel::Impl
ReadHeader	internal/channel_impl.cc	/^void Channel::Impl::ReadHeader()$/;"	f	class:ldd::net::Channel::Impl
ReadTask	internal/task.h	/^class ReadTask : public Task {$/;"	c	namespace:ldd::net
RealStop	internal/event_loop_impl.cc	/^void EventLoop::Impl::RealStop() {$/;"	f	class:ldd::net::EventLoop::Impl
RealWork	ut/event_test.cc	/^void TCPServer::RealWork()$/;"	f	class:TCPServer
RealWrite	internal/channel_impl.cc	/^void Channel::Impl::RealWrite()$/;"	f	class:ldd::net::Channel::Impl
Reconnect	internal/channel_impl.cc	/^void OutgoingChannel::Reconnect() {$/;"	f	class:ldd::net::OutgoingChannel
Recv	other/client/omsg.cc	/^bool MyEmitMsg::Recv(const Payload& response,$/;"	f	class:MyEmitMsg
Recv	test/benchmark/client/omsg.cc	/^bool MyEmitMsg::Recv(const Payload& response,$/;"	f	class:MyEmitMsg
Recv	test/client/omsg.cc	/^bool MyEmitMsg::Recv(const Payload& response,$/;"	f	class:MyEmitMsg
Recv	test/server/omsg.cc	/^bool MyEmitMsg::Recv(const Payload& response,$/;"	f	class:MyEmitMsg
Recv	ut/omsg.cc	/^bool MyEmitMsg::Recv(const Payload& response,$/;"	f	class:MyEmitMsg
Register	registry.h	/^    void Register(Tag n) {$/;"	f	class:ldd::net::Registry
Register	registry.h	/^    void Register(Tag n, A1 a1) {$/;"	f	class:ldd::net::Registry
Register	registry.h	/^    void Register(Tag n, A1 a1, A2 a2) {$/;"	f	class:ldd::net::Registry
Register	registry.h	/^    void Register(Tag n, A1 a1, A2 a2, A3 a3) {$/;"	f	class:ldd::net::Registry
Register	registry.h	/^    void Register(Tag n, A1 a1, A2 a2, A3 a3, A4 a4) {$/;"	f	class:ldd::net::Registry
Register	registry.h	/^    void Register(Tag n, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {$/;"	f	class:ldd::net::Registry
Register	registry.h	/^    void Register(Tag n, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {$/;"	f	class:ldd::net::Registry
Register	registry.h	/^    void Register(Tag n, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {$/;"	f	class:ldd::net::Registry
Register	registry.h	/^    void Register(Tag n, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) {$/;"	f	class:ldd::net::Registry
Register	registry.h	/^    void Register(Tag n, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9) {$/;"	f	class:ldd::net::Registry
Register	registry.h	/^    void Register(Tag n, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10) {$/;"	f	class:ldd::net::Registry
RegisterDefaultIncomingMsg	incoming_msg_registry.h	/^    void RegisterDefaultIncomingMsg() {$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterDefaultIncomingMsg	incoming_msg_registry.h	/^    void RegisterDefaultIncomingMsg(A1 a1) {$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterDefaultIncomingMsg	incoming_msg_registry.h	/^    void RegisterDefaultIncomingMsg(A1 a1, A2 a2) {$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterDefaultIncomingMsg	incoming_msg_registry.h	/^    void RegisterDefaultIncomingMsg(A1 a1, A2 a2, A3 a3) {$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterDefaultIncomingMsg	incoming_msg_registry.h	/^    void RegisterDefaultIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4) {$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterDefaultIncomingMsg	incoming_msg_registry.h	/^    void RegisterDefaultIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterDefaultIncomingMsg	incoming_msg_registry.h	/^    void RegisterDefaultIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterDefaultIncomingMsg	incoming_msg_registry.h	/^    void RegisterDefaultIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterDefaultIncomingMsg	incoming_msg_registry.h	/^    void RegisterDefaultIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) {$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterDefaultIncomingMsg	incoming_msg_registry.h	/^    void RegisterDefaultIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9) {$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterDefaultIncomingMsg	incoming_msg_registry.h	/^    void RegisterDefaultIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10) {$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterFactory	registry.h	/^inline void Registry<T, Tag>::RegisterFactory(Tag n, Factory<T>* f) {$/;"	f	class:ldd::net::Registry
RegisterIncomingMsg	incoming_msg_registry.h	/^    void RegisterIncomingMsg() { Register<Msg>(Msg::kType); }$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterIncomingMsg	incoming_msg_registry.h	/^    void RegisterIncomingMsg(A1 a1) { Register<Msg>(Msg::kType, a1); }$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterIncomingMsg	incoming_msg_registry.h	/^    void RegisterIncomingMsg(A1 a1, A2 a2) { Register<Msg>(Msg::kType, a1, a2); }$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterIncomingMsg	incoming_msg_registry.h	/^    void RegisterIncomingMsg(A1 a1, A2 a2, A3 a3) { Register<Msg>(Msg::kType, a1, a2, a3); }$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterIncomingMsg	incoming_msg_registry.h	/^    void RegisterIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4) { Register<Msg>(Msg::kType, a1, a2, a3, a4); }$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterIncomingMsg	incoming_msg_registry.h	/^    void RegisterIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) { Register<Msg>(Msg::kType, a1, a2, a3, a4, a5); }$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterIncomingMsg	incoming_msg_registry.h	/^    void RegisterIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) { Register<Msg>(Msg::kType, a1, a2, a3, a4, a5, a6); }$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterIncomingMsg	incoming_msg_registry.h	/^    void RegisterIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) { Register<Msg>(Msg::kType, a1, a2, a3, a4, a5, a6, a7); }$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterIncomingMsg	incoming_msg_registry.h	/^    void RegisterIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) { Register<Msg>(Msg::kType, a1, a2, a3, a4, a5, a6, a7, a8); }$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterIncomingMsg	incoming_msg_registry.h	/^    void RegisterIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9) { Register<Msg>(Msg::kType, a1, a2, a3, a4, a5, a6, a7, a8, a9); }$/;"	f	class:ldd::net::IncomingMsgRegistry
RegisterIncomingMsg	incoming_msg_registry.h	/^    void RegisterIncomingMsg(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10) { Register<Msg>(Msg::kType, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }$/;"	f	class:ldd::net::IncomingMsgRegistry
Registry	registry.h	/^class Registry {$/;"	c	namespace:ldd::net
RelaxedPulseChecker	internal/pulse_checker.h	/^    RelaxedPulseChecker(EventLoop* event_loop, const Reporter& reporter,$/;"	f	class:ldd::net::RelaxedPulseChecker
RelaxedPulseChecker	internal/pulse_checker.h	/^class RelaxedPulseChecker : public StrictPulseChecker {$/;"	c	namespace:ldd::net
Remove	event.cc	/^bool SignalEvent::Remove(int signo) {$/;"	f	class:ldd::net::SignalEvent
Remove	internal/event_impl.cc	/^bool SignalEvent::Impl::Remove(int signo) {$/;"	f	class:ldd::net::SignalEvent::Impl
RemoveSignal	ut/event_test.cc	/^bool MySignalEvent::RemoveSignal()$/;"	f	class:MySignalEvent
ReplyPulseEmitter	internal/pulse_emitter.h	/^    ReplyPulseEmitter(EventLoop* event_loop, const Pulser& pulser,$/;"	f	class:ldd::net::ReplyPulseEmitter
ReplyPulseEmitter	internal/pulse_emitter.h	/^class ReplyPulseEmitter : public PulseEmitter {$/;"	c	namespace:ldd::net
Report	internal/pulse_checker.h	/^    void Report() const { reporter_(); }$/;"	f	class:ldd::net::PulseChecker
Reporter	internal/pulse_checker.h	/^    typedef boost::function<void()> Reporter;$/;"	t	class:ldd::net::PulseChecker
Reset	buffer.cc	/^void Buffer::Reset() {$/;"	f	class:ldd::net::Buffer
Reset	buffer.cc	/^void Buffer::Reset(const std::string& s) {$/;"	f	class:ldd::net::Buffer
Reset	buffer.cc	/^void Buffer::Reset(size_t len) {$/;"	f	class:ldd::net::Buffer
Reset	internal/task.cc	/^void Task::Reset()$/;"	f	class:ldd::net::Task
Resolve	internal/channel_impl.cc	/^void OutgoingChannel::Resolve() {$/;"	f	class:ldd::net::OutgoingChannel
Result	outgoing_msg.h	/^    typedef ldd::net::Result Result;$/;"	t	class:ldd::net::OutgoingMsg
Result	result.h	/^    Result(Type type) : type_(type), code_(0) {}$/;"	f	class:ldd::net::Result
Result	result.h	/^    Result(Type type, int16_t code) : type_(type), code_(code) {}$/;"	f	class:ldd::net::Result
Result	result.h	/^class Result {$/;"	c	namespace:ldd::net
Run	event_loop.cc	/^void EventLoop::Run() {$/;"	f	class:ldd::net::EventLoop
Run	event_loop.cc	/^void EventLoopThread::Run(const Functor& pre, const Functor& post) {$/;"	f	class:ldd::net::EventLoopThread
Run	internal/event_loop_impl.cc	/^void EventLoop::Impl::Run() {$/;"	f	class:ldd::net::EventLoop::Impl
Run	test1/client/main.cc	/^void Run(int fd, string &test_item)$/;"	f
RunInLoop	event_loop.cc	/^void EventLoop::RunInLoop(const Functor& handler) {$/;"	f	class:ldd::net::EventLoop
RunInLoop	internal/event_loop_impl.cc	/^void EventLoop::Impl::RunInLoop(const Functor& functor) {$/;"	f	class:ldd::net::EventLoop::Impl
RunInLoop	ut/event_loop_test.cc	/^bool MyEventLoop::RunInLoop()$/;"	f	class:MyEventLoop
RunInLoop	ut/event_loop_test.cc	/^bool MyEventLoopThread::RunInLoop()$/;"	f	class:MyEventLoopThread
RunInLoop	ut/event_loop_test.cc	/^bool MyEventLoopThreadPool::RunInLoop()$/;"	f	class:MyEventLoopThreadPool
SERVER_HOST	ut/my_lddnet.cc	/^const std::string SERVER_HOST = "localhost";$/;"	v
SERVER_PORT	ut/my_lddnet.cc	/^const int SERVER_PORT = 60000;$/;"	v
SOCK_TYPE_FILEOUTPUT	ut/x_socket.h	11;"	d
SOCK_TYPE_NULL	ut/x_socket.h	6;"	d
SOCK_TYPE_THIS_LINK	ut/x_socket.h	12;"	d
SOCK_TYPE_UNICAST_TCP_CLIENT	ut/x_socket.h	8;"	d
SOCK_TYPE_UNICAST_TCP_SERVER	ut/x_socket.h	7;"	d
SOCK_TYPE_UNICAST_UDP_CLIENT	ut/x_socket.h	10;"	d
SOCK_TYPE_UNICAST_UDP_SERVER	ut/x_socket.h	9;"	d
SRC	other/Makefile	/^SRC := $(foreach d, $(DIR), $(wildcard $(d)\/*.cc))$/;"	m
SRC	other/client/Makefile	/^SRC := $(foreach d, $(DIR), $(wildcard $(d)\/*.cc))$/;"	m
SRC	test/client/Makefile	/^SRC := $(foreach d, $(DIR), $(wildcard $(d)\/*.cc))$/;"	m
SRC	test/server/Makefile	/^SRC := $(foreach d, $(DIR), $(wildcard $(d)\/*.cc))$/;"	m
SRC	test1/atomic/Makefile	/^SRC := $(foreach d, $(DIR), $(wildcard $(d)\/*.cc))$/;"	m
SRC	test1/client/Makefile	/^SRC := $(foreach d, $(DIR), $(wildcard $(d)\/*.cc))$/;"	m
SRC	test1/concurrency_connect/Makefile	/^SRC := $(foreach d, $(DIR), $(wildcard $(d)\/*.cc))$/;"	m
SRC	test1/event/Makefile	/^SRC := $(foreach d, $(DIR), $(wildcard $(d)\/*.cc))$/;"	m
SRC	test1/noblocking_accept/Makefile	/^SRC := $(foreach d, $(DIR), $(wildcard $(d)\/*.cc))$/;"	m
SRCTAR	Makefile	/^SRCTAR = yes # Comment this line if no src tarball is needed$/;"	m
SRCTOP	Makefile	/^SRCTOP = $/;"	m
STATIC_EXT	test1/client/Makefile	/^STATIC_EXT = a$/;"	m
STATIC_EXT	test1/concurrency_connect/Makefile	/^STATIC_EXT = a$/;"	m
STATIC_LIB	test1/client/Makefile	/^STATIC_LIB = $(LIBNAME).$(STATIC_EXT)$/;"	m
STATIC_LIB	test1/concurrency_connect/Makefile	/^STATIC_LIB = $(LIBNAME).$(STATIC_EXT)$/;"	m
SUBDIRS	Makefile	/^SUBDIRS = $/;"	m
SUBDIRS	test/benchmark/client/Makefile	/^SUBDIRS = $/;"	m
SUBDIRS	test/benchmark/server/Makefile	/^SUBDIRS = $/;"	m
SUBDIRS	test/event_loop/Makefile	/^SUBDIRS = $/;"	m
SUBDIRS	ut/Makefile	/^SUBDIRS = .. $/;"	m
SanitizeOptions	internal/client_impl.cc	/^Client::Options SanitizeOptions(const Client::Options& options) {$/;"	f	namespace:ldd::net::__anon6
SanitizeOptions	internal/server_impl.cc	/^Server::Options SanitizeOptions(const Server::Options& options) {$/;"	f	namespace:ldd::net::__anon5
SendMsg	test1/event/main.cc	/^void SendMsg(int fd, const std::string &msg)$/;"	f
Serialize	internal/outgoing_packet.cc	/^bool OutgoingPacketWithPayload::Serialize($/;"	f	class:ldd::net::OutgoingPacketWithPayload
Serialize	internal/outgoing_packet.h	/^    virtual bool Serialize(std::vector<ConstBuffer>* buffers,$/;"	f	class:ldd::net::OutgoingPacket
SerializeTo	internal/outgoing_packet.cc	/^size_t OutgoingPacket::SerializeTo($/;"	f	class:ldd::net::OutgoingPacket
Server	server.cc	/^Server::Server(const Options& options)$/;"	f	class:ldd::net::Server
Server	server.h	/^class Server : public IncomingMsgRegistry {$/;"	c	namespace:ldd::net
Set	internal/task.cc	/^void Task::Set(const boost::shared_ptr<Buffer> &buffer, int fd) $/;"	f	class:ldd::net::Task
SetBody	payload.cc	/^bool Payload::SetBody(const Buffer& buffer) {$/;"	f	class:ldd::net::Payload
SetEvent	internal/channel_impl.cc	/^void Channel::Impl::SetEvent(short events)$/;"	f	class:ldd::net::Channel::Impl
SetExtra	payload.cc	/^bool Payload::SetExtra(uint8_t id, const Buffer& buffer) {$/;"	f	class:ldd::net::Payload
SetThreadNum	event_loop_thread_pool.h	/^    void SetThreadNum(int numThreads) { threads_num_ = numThreads; }$/;"	f	class:ldd::net::EventLoopThreadPool
SetTimer	internal/outgoing_msg_impl.cc	/^void OutgoingMsg::Impl::SetTimer(TimerEvent* timer,$/;"	f	class:ldd::net::OutgoingMsg::Impl
SetUp	ut/event_loop_test.cc	/^void MyEventLoopTest::SetUp()$/;"	f	class:MyEventLoopTest
SetUp	ut/event_loop_test.cc	/^void MyEventLoopThreadPoolTest::SetUp()$/;"	f	class:MyEventLoopThreadPoolTest
SetUp	ut/event_loop_test.cc	/^void MyEventLoopThreadTest::SetUp()$/;"	f	class:MyEventLoopThreadTest
SetUp	ut/event_test.cc	/^void MyFdEventTest::SetUp()$/;"	f	class:MyFdEventTest
SetUp	ut/event_test.cc	/^void MySignalEventTest::SetUp()$/;"	f	class:MySignalEventTest
SetUp	ut/event_test.cc	/^void MyTimerEventTest::SetUp()$/;"	f	class:MyTimerEventTest
SetUp	ut/lddnet_test.cc	/^void MyLddNetTest::SetUp()$/;"	f	class:MyLddNetTest
Shrink	buffer.cc	/^void Buffer::Shrink(size_t n) {$/;"	f	class:ldd::net::Buffer
SigHandler	ut/event_test.cc	/^void MySignalEvent::SigHandler(int sig)$/;"	f	class:MySignalEvent
Signal	test/benchmark/client/main.cc	/^void Signal(int ) {$/;"	f
SignalEvent	event.cc	/^SignalEvent::SignalEvent(EventLoop* loop)$/;"	f	class:ldd::net::SignalEvent
SignalEvent	event.h	/^class SignalEvent : boost::noncopyable {$/;"	c	namespace:ldd::net
SignalTimeout	ut/event_test.cc	/^bool MySignalEvent::SignalTimeout()$/;"	f	class:MySignalEvent
Start	event_loop.cc	/^bool EventLoopThread::Start(const Functor& pre, const Functor& post) {$/;"	f	class:ldd::net::EventLoopThread
Start	event_loop_thread_pool.cc	/^bool EventLoopThreadPool::Start()$/;"	f	class:ldd::net::EventLoopThreadPool
Start	internal/event_impl.cc	/^void FdEvent::Impl::Start(int fd, int events) {$/;"	f	class:ldd::net::FdEvent::Impl
Start	internal/event_impl.cc	/^void TimerEvent::Impl::Start() {$/;"	f	class:ldd::net::TimerEvent::Impl
Start	internal/pulse_checker.cc	/^void PulseChecker::Start() {$/;"	f	class:ldd::net::PulseChecker
Start	internal/pulse_emitter.cc	/^void PulseEmitter::Start(bool emit) {$/;"	f	class:ldd::net::PulseEmitter
Start	internal/server_impl.cc	/^bool Server::Impl::Start(Listener::Impl* listener) {$/;"	f	class:ldd::net::Server::Impl
Start	server.cc	/^bool Server::Start(Listener* listener) {$/;"	f	class:ldd::net::Server
Start	ut/event_test.cc	/^bool TCPServer::Start()$/;"	f	class:TCPServer
Stat	stat.cc	/^Stat::Stat()$/;"	f	class:ldd::net::Stat
Stat	stat.h	/^class Stat {$/;"	c	namespace:ldd::net
State	channel.h	/^    enum State {$/;"	g	class:ldd::net::Channel
State	event_loop.h	/^    enum State {$/;"	g	class:ldd::net::EventLoopThread
Status	stat.cc	/^std::string Stat::Status() const$/;"	f	class:ldd::net::Stat
Stop	event_loop.cc	/^void EventLoop::Stop() {$/;"	f	class:ldd::net::EventLoop
Stop	event_loop.cc	/^void EventLoopThread::Stop() {$/;"	f	class:ldd::net::EventLoopThread
Stop	event_loop_thread_pool.cc	/^void EventLoopThreadPool::Stop()$/;"	f	class:ldd::net::EventLoopThreadPool
Stop	internal/event_loop_impl.cc	/^void EventLoop::Impl::Stop() {$/;"	f	class:ldd::net::EventLoop::Impl
Stop	internal/pulse_checker.cc	/^void PulseChecker::Stop() {$/;"	f	class:ldd::net::PulseChecker
Stop	internal/pulse_emitter.cc	/^void PulseEmitter::Stop() {$/;"	f	class:ldd::net::PulseEmitter
Stop	internal/server_impl.cc	/^void Server::Impl::Stop() {$/;"	f	class:ldd::net::Server::Impl
Stop	server.cc	/^void Server::Stop() {$/;"	f	class:ldd::net::Server
Stop	ut/event_test.cc	/^void TCPServer::Stop()$/;"	f	class:TCPServer
StrictPulseChecker	internal/pulse_checker.h	/^    StrictPulseChecker(EventLoop* event_loop, const Reporter& reporter,$/;"	f	class:ldd::net::StrictPulseChecker
StrictPulseChecker	internal/pulse_checker.h	/^class StrictPulseChecker : public PulseChecker {$/;"	c	namespace:ldd::net
Super	internal/channel_impl.h	/^    typedef Channel::Impl Super;$/;"	t	class:ldd::net::IncomingChannel
Super	internal/channel_impl.h	/^    typedef Channel::Impl Super;$/;"	t	class:ldd::net::OutgoingChannel
TARGET	other/Makefile	/^TARGET := ldd_server$/;"	m
TARGET	other/client/Makefile	/^TARGET := ldd_client$/;"	m
TARGET	test/client/Makefile	/^TARGET := ldd_client$/;"	m
TARGET	test/server/Makefile	/^TARGET := ldd_server$/;"	m
TARGET	test1/atomic/Makefile	/^TARGET := atomic_test$/;"	m
TARGET	test1/client/Makefile	/^TARGET := ldd_test$/;"	m
TARGET	test1/concurrency_connect/Makefile	/^TARGET := ldd_test$/;"	m
TARGET	test1/event/Makefile	/^TARGET := event$/;"	m
TARGET	test1/noblocking_accept/Makefile	/^TARGET := nob_accept $/;"	m
TARGETS	Makefile	/^TARGETS = liblddnet.so$/;"	m
TARGETS	test/benchmark/client/Makefile	/^TARGETS = lddnetcli$/;"	m
TARGETS	test/benchmark/server/Makefile	/^TARGETS = lddnetsvr$/;"	m
TARGETS	test/event_loop/Makefile	/^TARGETS = test$/;"	m
TARGETS	ut/Makefile	/^TARGETS = ut $/;"	m
TCPClient	ut/event_test.cc	/^    TCPClient(EventLoop *event_loop) $/;"	f	class:TCPClient
TCPClient	ut/event_test.cc	/^class TCPClient {$/;"	c	file:
TCPServer	ut/event_test.cc	/^    TCPServer() : port_(0), fd_(-1), tid_(0), quit_(false) {}$/;"	f	class:TCPServer
TCPServer	ut/event_test.cc	/^class TCPServer {$/;"	c	file:
TEST_F	ut/event_loop_test.cc	/^TEST_F(MyEventLoopTest, EventLoopTest)$/;"	f
TEST_F	ut/event_loop_test.cc	/^TEST_F(MyEventLoopThreadPoolTest, EventLoopThreadTest)$/;"	f
TEST_F	ut/event_loop_test.cc	/^TEST_F(MyEventLoopThreadTest, EventLoopThreadTest)$/;"	f
TEST_F	ut/event_test.cc	/^TEST_F(MyFdEventTest, FDEventTest)$/;"	f
TEST_F	ut/event_test.cc	/^TEST_F(MySignalEventTest, SignalEventTest)$/;"	f
TEST_F	ut/event_test.cc	/^TEST_F(MyTimerEventTest, TimerEventTest)$/;"	f
TEST_F	ut/lddnet_test.cc	/^TEST_F(MyLddNetTest, LddNetTest)$/;"	f
THREAD_COUNT	ut/event_loop_test.cc	214;"	d	file:
TTL_VALUE	test1/client/x_socket.h	4;"	d
TTL_VALUE	test1/concurrency_connect/x_socket.h	4;"	d
TTL_VALUE	ut/x_socket.h	4;"	d
Task	internal/task.cc	/^Task::Task()$/;"	f	class:ldd::net::Task
Task	internal/task.h	/^class Task {$/;"	c	namespace:ldd::net
TearDown	ut/event_loop_test.cc	/^void MyEventLoopTest::TearDown()$/;"	f	class:MyEventLoopTest
TearDown	ut/event_loop_test.cc	/^void MyEventLoopThreadPoolTest::TearDown()$/;"	f	class:MyEventLoopThreadPoolTest
TearDown	ut/event_loop_test.cc	/^void MyEventLoopThreadTest::TearDown()$/;"	f	class:MyEventLoopThreadTest
TearDown	ut/event_test.cc	/^void MyFdEventTest::TearDown()$/;"	f	class:MyFdEventTest
TearDown	ut/event_test.cc	/^void MySignalEventTest::TearDown()$/;"	f	class:MySignalEventTest
TearDown	ut/event_test.cc	/^void MyTimerEventTest::TearDown()$/;"	f	class:MyTimerEventTest
TearDown	ut/lddnet_test.cc	/^void MyLddNetTest::TearDown()$/;"	f	class:MyLddNetTest
Test	sample/a.cc	/^  void Test() {$/;"	f	struct:A
Test	sample/a.cc	/^  void Test() {$/;"	f	struct:B
Test	sample/a.cc	/^  void Test() {$/;"	f	struct:C
TestFunc	test1/client/main.cc	/^typedef void (*TestFunc)(int fd);$/;"	t	file:
TestItem	test1/client/main.cc	/^struct TestItem {$/;"	s	file:
ThreadDispatchPolicy	server.h	/^    enum ThreadDispatchPolicy {$/;"	g	class:ldd::net::Server
TimedOut	result.h	/^    static Result TimedOut() { return Result(kTimedOut); }$/;"	f	class:ldd::net::Result
TimerEvent	event.cc	/^TimerEvent::TimerEvent(EventLoop* loop)$/;"	f	class:ldd::net::TimerEvent
TimerEvent	event.h	/^class TimerEvent : boost::noncopyable {$/;"	c	namespace:ldd::net
ToString	address.cc	/^std::string Address::ToString() const {$/;"	f	class:ldd::net::Address
ToString	buffer.cc	/^std::string Buffer::ToString() const {$/;"	f	class:ldd::net::Buffer
ToString	endpoint.cc	/^std::string Endpoint::ToString() const {$/;"	f	class:ldd::net::Endpoint
ToString	result.cc	/^const std::string& Result::ToString() const {$/;"	f	class:ldd::net::Result
ToU32	address.cc	/^uint32_t Address::ToU32() const {$/;"	f	class:ldd::net::Address
ToV4	address.cc	/^const in_addr& Address::ToV4() const {$/;"	f	class:ldd::net::Address
ToV6	address.cc	/^const in6_addr& Address::ToV6() const {$/;"	f	class:ldd::net::Address
Type	channel.h	/^    enum Type {$/;"	g	class:ldd::net::Channel
Type	event.h	/^    enum Type {$/;"	g	class:ldd::net::FdEvent
Type	incoming_msg.h	/^    typedef ldd::net::MessageType Type;$/;"	t	class:ldd::net::IncomingMsg
Type	internal/channel_impl.h	/^    typedef Channel::Type Type;$/;"	t	class:ldd::net::Channel::Impl
Type	internal/channel_impl.h	/^    typedef Channel::Type Type;$/;"	t	class:ldd::net::IncomingChannel
Type	internal/channel_impl.h	/^    typedef Channel::Type Type;$/;"	t	class:ldd::net::OutgoingChannel
Type	internal/incoming_msg_impl.h	/^    typedef ldd::net::MessageType Type;$/;"	t	class:ldd::net::IncomingMsg::Impl
Type	internal/protocol.h	/^    enum Type {$/;"	g	class:ldd::net::Header
Type	outgoing_msg.h	/^    typedef ldd::net::MessageType Type;$/;"	t	class:ldd::net::OutgoingMsg
Type	result.h	/^    enum Type { kOk, kFailed, kTimedOut, kCanceled };$/;"	g	class:ldd::net::Result
TypedIncomingMsg	incoming_msg.h	/^class TypedIncomingMsg : public IncomingMsg {$/;"	c	namespace:ldd::net
TypedOutgoingMsg	outgoing_msg.h	/^class TypedOutgoingMsg : public OutgoingMsg {$/;"	c	namespace:ldd::net
Usage	test1/client/main.cc	/^void Usage(char *instancename)$/;"	f
V4	address.h	/^        V4 = AF_INET,$/;"	e	enum:ldd::net::Address::Family
V6	address.h	/^        V6 = AF_INET6,$/;"	e	enum:ldd::net::Address::Family
Wait	ut/event_test.cc	/^bool MyTimerEvent::Wait(uint64_t wait_ms)$/;"	f	class:MyTimerEvent
WaitSignal	ut/event_test.cc	/^bool MySignalEvent::WaitSignal()$/;"	f	class:MySignalEvent
Write	internal/channel_impl.cc	/^void Channel::Impl::Write(OutgoingPacket* packet) {$/;"	f	class:ldd::net::Channel::Impl
Write	internal/task.cc	/^int ReadTask::Write()$/;"	f	class:ldd::net::ReadTask
Write	internal/task.cc	/^int WriteTask::Write()$/;"	f	class:ldd::net::WriteTask
WriteDone	internal/incoming_msg_impl.cc	/^void IncomingMsg::Impl::WriteDone(Code code) {$/;"	f	class:ldd::net::IncomingMsg::Impl
WriteResponse	internal/incoming_msg_impl.cc	/^void IncomingMsg::Impl::WriteResponse(const Payload& payload) {$/;"	f	class:ldd::net::IncomingMsg::Impl
WriteTask	internal/task.h	/^class WriteTask : public Task {$/;"	c	namespace:ldd::net
_A_H_	sample/a.h	5;"	d
_X_SOCKET_H__	test1/client/x_socket.h	2;"	d
_X_SOCKET_H__	test1/concurrency_connect/x_socket.h	2;"	d
_X_SOCKET_H__	ut/x_socket.h	2;"	d
__BACK_TRACE__	backtrace.h	5;"	d
__COMMON_H__	test1/client/common.h	2;"	d
__STAT_H__	stat.h	5;"	d
__TASK_H__	internal/task.h	5;"	d
a10_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_; A10 a10_;$/;"	m	struct:ldd::net::FactoryImpl
a1_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_; A10 a10_;$/;"	m	struct:ldd::net::FactoryImpl
a1_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_;$/;"	m	struct:ldd::net::FactoryImpl
a1_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_;$/;"	m	struct:ldd::net::FactoryImpl
a1_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_;$/;"	m	struct:ldd::net::FactoryImpl
a1_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_;$/;"	m	struct:ldd::net::FactoryImpl
a1_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_;$/;"	m	struct:ldd::net::FactoryImpl
a1_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_;$/;"	m	struct:ldd::net::FactoryImpl
a1_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_;$/;"	m	struct:ldd::net::FactoryImpl
a1_	factory.h	/^    A1 a1_; A2 a2_;$/;"	m	struct:ldd::net::FactoryImpl
a1_	factory.h	/^    A1 a1_;$/;"	m	struct:ldd::net::FactoryImpl
a1_	sample/a.h	/^    A1 a1_;$/;"	m	struct:FactoryImpl
a2_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_; A10 a10_;$/;"	m	struct:ldd::net::FactoryImpl
a2_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_;$/;"	m	struct:ldd::net::FactoryImpl
a2_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_;$/;"	m	struct:ldd::net::FactoryImpl
a2_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_;$/;"	m	struct:ldd::net::FactoryImpl
a2_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_;$/;"	m	struct:ldd::net::FactoryImpl
a2_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_;$/;"	m	struct:ldd::net::FactoryImpl
a2_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_;$/;"	m	struct:ldd::net::FactoryImpl
a2_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_;$/;"	m	struct:ldd::net::FactoryImpl
a2_	factory.h	/^    A1 a1_; A2 a2_;$/;"	m	struct:ldd::net::FactoryImpl
a2_	sample/a.h	/^    A2 a2_;$/;"	m	struct:FactoryImpl
a3_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_; A10 a10_;$/;"	m	struct:ldd::net::FactoryImpl
a3_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_;$/;"	m	struct:ldd::net::FactoryImpl
a3_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_;$/;"	m	struct:ldd::net::FactoryImpl
a3_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_;$/;"	m	struct:ldd::net::FactoryImpl
a3_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_;$/;"	m	struct:ldd::net::FactoryImpl
a3_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_;$/;"	m	struct:ldd::net::FactoryImpl
a3_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_;$/;"	m	struct:ldd::net::FactoryImpl
a3_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_;$/;"	m	struct:ldd::net::FactoryImpl
a4_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_; A10 a10_;$/;"	m	struct:ldd::net::FactoryImpl
a4_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_;$/;"	m	struct:ldd::net::FactoryImpl
a4_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_;$/;"	m	struct:ldd::net::FactoryImpl
a4_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_;$/;"	m	struct:ldd::net::FactoryImpl
a4_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_;$/;"	m	struct:ldd::net::FactoryImpl
a4_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_;$/;"	m	struct:ldd::net::FactoryImpl
a4_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_;$/;"	m	struct:ldd::net::FactoryImpl
a5_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_; A10 a10_;$/;"	m	struct:ldd::net::FactoryImpl
a5_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_;$/;"	m	struct:ldd::net::FactoryImpl
a5_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_;$/;"	m	struct:ldd::net::FactoryImpl
a5_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_;$/;"	m	struct:ldd::net::FactoryImpl
a5_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_;$/;"	m	struct:ldd::net::FactoryImpl
a5_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_;$/;"	m	struct:ldd::net::FactoryImpl
a6_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_; A10 a10_;$/;"	m	struct:ldd::net::FactoryImpl
a6_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_;$/;"	m	struct:ldd::net::FactoryImpl
a6_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_;$/;"	m	struct:ldd::net::FactoryImpl
a6_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_;$/;"	m	struct:ldd::net::FactoryImpl
a6_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_;$/;"	m	struct:ldd::net::FactoryImpl
a7_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_; A10 a10_;$/;"	m	struct:ldd::net::FactoryImpl
a7_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_;$/;"	m	struct:ldd::net::FactoryImpl
a7_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_;$/;"	m	struct:ldd::net::FactoryImpl
a7_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_;$/;"	m	struct:ldd::net::FactoryImpl
a8_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_; A10 a10_;$/;"	m	struct:ldd::net::FactoryImpl
a8_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_;$/;"	m	struct:ldd::net::FactoryImpl
a8_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_;$/;"	m	struct:ldd::net::FactoryImpl
a9_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_; A10 a10_;$/;"	m	struct:ldd::net::FactoryImpl
a9_	factory.h	/^    A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_; A9 a9_;$/;"	m	struct:ldd::net::FactoryImpl
active_	internal/event_impl.h	/^    bool active_;$/;"	m	class:ldd::net::FdEvent::Impl
active_	internal/event_impl.h	/^    bool active_;$/;"	m	class:ldd::net::TimerEvent::Impl
addr_	address.h	/^    } addr_;$/;"	m	class:ldd::net::Address	typeref:union:ldd::net::Address::__anon1
address	endpoint.h	/^    const Address& address() const { return address_; }$/;"	f	class:ldd::net::Endpoint
address_	endpoint.h	/^    Address address_;$/;"	m	class:ldd::net::Endpoint
base_loop_	event_loop_thread_pool.h	/^    EventLoop* base_loop_;$/;"	m	class:ldd::net::EventLoopThreadPool
batch_accept	server.h	/^        int batch_accept;$/;"	m	struct:ldd::net::Server::Options
body	payload.h	/^    const Buffer& body() const { return body_; }$/;"	f	class:ldd::net::Payload
body_	payload.h	/^    Buffer body_;$/;"	m	class:ldd::net::Payload
body_size	internal/protocol.cc	/^uint32_t Header::Parser::body_size() const {$/;"	f	class:ldd::net::Header::Parser
body_type	internal/protocol.cc	/^uint16_t Header::Parser::body_type() const {$/;"	f	class:ldd::net::Header::Parser
buf_	internal/protocol.h	/^        char* buf_;$/;"	m	class:ldd::net::Header::Builder
buf_	internal/protocol.h	/^        const char* buf_;$/;"	m	class:ldd::net::Header::Parser
buffer	internal/task.h	/^    boost::shared_ptr<Buffer> &buffer() { return buffer_; }$/;"	f	class:ldd::net::Task
buffer_	internal/task.h	/^    boost::shared_ptr<Buffer> buffer_;$/;"	m	class:ldd::net::Task
canceled_	internal/incoming_msg_impl.h	/^    bool canceled_;$/;"	m	class:ldd::net::IncomingMsg::Impl
channel	incoming_msg.cc	/^const boost::shared_ptr<Channel>& IncomingMsg::channel() const {$/;"	f	class:ldd::net::IncomingMsg
channel	internal/incoming_msg_impl.h	/^    const boost::shared_ptr<Channel>& channel() const { return channel_; }$/;"	f	class:ldd::net::IncomingMsg::Impl
channel	internal/incoming_packet.h	/^    Channel::Impl* channel() const { return channel_; }$/;"	f	class:ldd::net::IncomingPacket
channel	internal/outgoing_msg_impl.h	/^    const boost::shared_ptr<Channel>& channel() const { return channel_; }$/;"	f	class:ldd::net::OutgoingMsg::Impl
channel	outgoing_msg.cc	/^const boost::shared_ptr<Channel>& OutgoingMsg::channel() const {$/;"	f	class:ldd::net::OutgoingMsg
channel_	internal/incoming_msg_impl.h	/^    boost::shared_ptr<Channel> channel_;$/;"	m	class:ldd::net::IncomingMsg::Impl
channel_	internal/incoming_packet.h	/^    Channel::Impl* channel_;$/;"	m	class:ldd::net::IncomingPacket
channel_	internal/outgoing_msg_impl.h	/^    boost::shared_ptr<Channel> channel_;$/;"	m	class:ldd::net::OutgoingMsg::Impl
channel_owner_	internal/incoming_packet.h	/^    boost::shared_ptr<Channel> channel_owner_;$/;"	m	class:ldd::net::IncomingPacket
channels	test/benchmark/client/main.cc	/^std::vector<boost::shared_ptr<ldd::net::Channel> > channels;$/;"	v
channels	test/benchmark/server/main.cc	/^std::map<std::string, boost::shared_ptr<ldd::net::Channel> > channels;$/;"	v
client_	internal/channel_impl.h	/^    Client::Impl* client_;$/;"	m	class:ldd::net::OutgoingChannel
client_	internal/client_impl.h	/^    Client* client_;$/;"	m	class:ldd::net::Client::Impl
client_	ut/event_test.cc	/^    TCPClient client_;$/;"	m	class:MyFdEvent	file:
client_	ut/my_lddnet.h	/^    boost::scoped_ptr<ldd::net::Client> client_;$/;"	m	class:MyLddNet
code	internal/outgoing_packet.h	/^    Code code() const { return code_; }$/;"	f	class:ldd::net::OutgoingResponse
code	result.h	/^    Code code() const { return code_; }$/;"	f	class:ldd::net::Result
code_	internal/outgoing_packet.h	/^    Code code_;$/;"	m	class:ldd::net::OutgoingResponse
code_	result.h	/^    Code code_;$/;"	m	class:ldd::net::Result
concurrency	test/benchmark/client/omsg.cc	/^DECLARE_int32(concurrency);$/;"	v
connect_delay_	internal/channel_impl.h	/^    bool connect_delay_;$/;"	m	class:ldd::net::OutgoingChannel
connect_delay_count	client.h	/^        int connect_delay_count;$/;"	m	struct:ldd::net::Client::Options
connect_delay_time_final	client.h	/^        int connect_delay_time_final;$/;"	m	struct:ldd::net::Client::Options
connect_delay_time_initial	client.h	/^        int connect_delay_time_initial;$/;"	m	struct:ldd::net::Client::Options
connect_delay_time_step	client.h	/^        int connect_delay_time_step;$/;"	m	struct:ldd::net::Client::Options
connect_failure_	internal/channel_impl.h	/^    int connect_failure_;$/;"	m	class:ldd::net::OutgoingChannel
connect_timeout	client.h	/^        int connect_timeout;$/;"	m	struct:ldd::net::Client::Options
connections	test/benchmark/client/omsg.cc	/^DECLARE_int32(connections);$/;"	v
context	channel.cc	/^const boost::any& Channel::context() const {$/;"	f	class:ldd::net::Channel
context	internal/channel_impl.h	/^    const boost::any& context() const$/;"	f	class:ldd::net::Channel::Impl
context_	internal/channel_impl.h	/^    boost::any context_;$/;"	m	class:ldd::net::Channel::Impl
count_	other/imsg.h	/^    size_t count_;$/;"	m	class:MyEchoMsg
count_	test/client/imsg.h	/^    size_t count_;$/;"	m	class:MyEchoMsg
count_	test/server/imsg.h	/^    size_t count_;$/;"	m	class:MyEchoMsg
count_	ut/imsg.h	/^    size_t count_;$/;"	m	class:MyEchoMsg
data	buffer.h	/^    char* data() { return data_.get(); }$/;"	f	class:ldd::net::Buffer
data	buffer.h	/^    const char* data() const { return data_.get(); }$/;"	f	class:ldd::net::Buffer
data_	buffer.h	/^    boost::shared_ptr<char> data_;$/;"	m	class:ldd::net::Buffer
default_	incoming_msg_registry.h	/^    Factory<DynamicIncomingMsg>* default_;$/;"	m	class:ldd::net::IncomingMsgRegistry
disabled_	internal/outgoing_packet.h	/^    bool disabled_;$/;"	m	class:ldd::net::OutgoingPacket
dns_base_	internal/channel_impl.h	/^    struct evdns_base *dns_base_;$/;"	m	class:ldd::net::DnsCtx	typeref:struct:ldd::net::DnsCtx::evdns_base
dns_ctx_	internal/channel_impl.h	/^    DnsCtx *dns_ctx_;$/;"	m	class:ldd::net::OutgoingChannel
dns_req_	internal/channel_impl.h	/^    struct evdns_getaddrinfo_request *dns_req_;$/;"	m	class:ldd::net::OutgoingChannel	typeref:struct:ldd::net::OutgoingChannel::evdns_getaddrinfo_request
done_	internal/outgoing_msg_impl.h	/^    bool done_;$/;"	m	class:ldd::net::OutgoingMsg::Impl
dump_trace	backtrace.cc	/^void dump_trace(const std::string &func_name)$/;"	f	namespace:ldd::net
echo_	ut/imsg.cc	/^static bool echo_ = false;$/;"	v	file:
ev_	internal/event_impl.h	/^    struct event *ev_; $/;"	m	class:ldd::net::FdEvent::Impl	typeref:struct:ldd::net::FdEvent::Impl::event
ev_	ut/event_test.cc	/^    FdEvent ev_;$/;"	m	class:TCPClient	file:
event_	internal/server_impl.h	/^    boost::scoped_ptr<FdEvent> event_;$/;"	m	class:ldd::net::Server::Impl
event_base	event_loop.cc	/^struct event_base *EventLoop::event_base()$/;"	f	class:ldd::net::EventLoop
event_base	internal/channel_impl.cc	/^struct event_base *Channel::Impl::event_base() {$/;"	f	class:ldd::net::Channel::Impl
event_base	internal/event_loop_impl.h	/^    struct event_base *event_base() { return event_base_; }$/;"	f	class:ldd::net::EventLoop::Impl
event_base_	internal/event_loop_impl.h	/^    struct event_base *event_base_;$/;"	m	class:ldd::net::EventLoop::Impl	typeref:struct:ldd::net::EventLoop::Impl::event_base
event_ctx_	internal/channel_impl.h	/^    EventCtx *event_ctx_;$/;"	m	class:ldd::net::Channel::Impl
event_loop	channel.cc	/^EventLoop *Channel::event_loop() const {$/;"	f	class:ldd::net::Channel
event_loop	event_loop.h	/^    EventLoop* event_loop() const { return event_loop_.get(); }$/;"	f	class:ldd::net::EventLoopThread
event_loop	internal/channel_impl.h	/^    EventLoop* event_loop() const { return event_loop_; }$/;"	f	class:ldd::net::Channel::Impl
event_loop	internal/listener_impl.h	/^    EventLoop* event_loop() const { return event_loop_; }$/;"	f	class:ldd::net::Listener::Impl
event_loop	listener.cc	/^EventLoop* Listener::event_loop() const {$/;"	f	class:ldd::net::Listener
event_loop	test/benchmark/client/main.cc	/^ldd::net::EventLoop event_loop;$/;"	v
event_loop	test/server/main.cc	/^ldd::net::EventLoop event_loop;$/;"	v
event_loop	test/server/main.cc	/^ldd::net::TimerEvent timer(&event_loop);$/;"	v
event_loop	ut/my_lddnet.h	/^    ldd::net::EventLoop *event_loop() { return &loop_; }$/;"	f	class:MyLddNet
event_loop_	event_loop.h	/^    boost::scoped_ptr<EventLoop> event_loop_;$/;"	m	class:ldd::net::EventLoopThread
event_loop_	internal/channel_impl.h	/^    EventLoop* event_loop_;$/;"	m	class:ldd::net::Channel::Impl
event_loop_	internal/listener_impl.h	/^    EventLoop* event_loop_;$/;"	m	class:ldd::net::Listener::Impl
event_loop_	ut/event_test.cc	/^    EventLoop *event_loop_;$/;"	m	class:TCPClient	file:
event_loop_	ut/event_test.cc	/^    EventLoop event_loop_;$/;"	m	class:MyTimerEvent	file:
events_	internal/channel_impl.h	/^    short events_;$/;"	m	class:ldd::net::Channel::Impl
ext_buf_	internal/protocol.h	/^        char* ext_buf_;$/;"	m	class:ldd::net::ExtHeader::Builder
ext_buf_	internal/protocol.h	/^        const char* ext_buf_;$/;"	m	class:ldd::net::ExtHeader::Parser
ext_count	internal/protocol.cc	/^uint8_t Header::Parser::ext_count() const {$/;"	f	class:ldd::net::Header::Parser
ext_count_	internal/protocol.h	/^        int ext_count_;$/;"	m	class:ldd::net::ExtHeader::Builder
ext_count_	internal/protocol.h	/^        uint8_t ext_count_;$/;"	m	class:ldd::net::ExtHeader::Parser
ext_len	internal/protocol.cc	/^uint16_t Header::Parser::ext_len() const {$/;"	f	class:ldd::net::Header::Parser
exthdr_	internal/outgoing_packet.h	/^    Buffer exthdr_;$/;"	m	class:ldd::net::OutgoingPacketWithPayload
extra	test/benchmark/client/omsg.cc	/^DECLARE_string(extra);$/;"	v
extras	payload.h	/^    const BufferMap& extras() const { return extras_; }$/;"	f	class:ldd::net::Payload
extras_	payload.h	/^    BufferMap extras_;$/;"	m	class:ldd::net::Payload
factories_	registry.h	/^    std::map<Tag, Factory<T>*> factories_;$/;"	m	class:ldd::net::Registry
failed	test/benchmark/client/omsg.h	/^    ldd::util::Atomic<int> failed;$/;"	m	struct:Info
family	address.h	/^    Family family() const { return family_; }$/;"	f	class:ldd::net::Address
family_	address.h	/^    Family family_;$/;"	m	class:ldd::net::Address
fd	internal/listener_impl.h	/^    int fd() const { return fd_; }$/;"	f	class:ldd::net::Listener::Impl
fd_	internal/event_loop_impl.h	/^    int fd_[2];$/;"	m	class:ldd::net::EventLoop::Impl
fd_	internal/listener_impl.h	/^    int fd_;$/;"	m	class:ldd::net::Listener::Impl
fd_	internal/task.h	/^    int fd_;$/;"	m	class:ldd::net::Task
fd_	ut/event_test.cc	/^    int fd_;$/;"	m	class:TCPClient	file:
fd_	ut/event_test.cc	/^    int fd_;$/;"	m	class:TCPServer	file:
flags_	internal/event_impl.h	/^    int8_t flags_;$/;"	m	class:ldd::net::FdEvent::Impl
free_id	buffer.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::Buffer
free_id	internal/channel_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::DnsCtx
free_id	internal/channel_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::EventCtx
free_id	internal/channel_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::IncomingChannel
free_id	internal/channel_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::OutgoingChannel
free_id	internal/client_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::Client::Impl
free_id	internal/event_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::FdEvent::Impl
free_id	internal/event_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::SignalEvent::Impl
free_id	internal/event_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::TimerEvent::Impl
free_id	internal/event_loop_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::EventLoop::Impl
free_id	internal/incoming_msg_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::IncomingMsg::Impl
free_id	internal/outgoing_msg_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::OutgoingMsg::Impl
free_id	internal/server_impl.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::Server::Impl
free_id	internal/task.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::Task
free_id	payload.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:ldd::net::Payload
free_id_	buffer.cc	/^util::Atomic<uint64_t> Buffer::free_id_;$/;"	m	class:ldd::net::Buffer	file:
free_id_	buffer.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::Buffer
free_id_	internal/channel_impl.cc	/^util::Atomic<uint64_t> DnsCtx::free_id_;$/;"	m	class:ldd::net::DnsCtx	file:
free_id_	internal/channel_impl.cc	/^util::Atomic<uint64_t> EventCtx::free_id_;$/;"	m	class:ldd::net::EventCtx	file:
free_id_	internal/channel_impl.cc	/^util::Atomic<uint64_t> IncomingChannel::free_id_;$/;"	m	class:ldd::net::IncomingChannel	file:
free_id_	internal/channel_impl.cc	/^util::Atomic<uint64_t> OutgoingChannel::free_id_;$/;"	m	class:ldd::net::OutgoingChannel	file:
free_id_	internal/channel_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::DnsCtx
free_id_	internal/channel_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::EventCtx
free_id_	internal/channel_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::IncomingChannel
free_id_	internal/channel_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::OutgoingChannel
free_id_	internal/client_impl.cc	/^util::Atomic<uint64_t> Client::Impl::free_id_;$/;"	m	class:ldd::net::Client::Impl	file:
free_id_	internal/client_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::Client::Impl
free_id_	internal/event_impl.cc	/^util::Atomic<uint64_t> FdEvent::Impl::free_id_;$/;"	m	class:ldd::net::FdEvent::Impl	file:
free_id_	internal/event_impl.cc	/^util::Atomic<uint64_t> SignalEvent::Impl::free_id_;$/;"	m	class:ldd::net::SignalEvent::Impl	file:
free_id_	internal/event_impl.cc	/^util::Atomic<uint64_t> TimerEvent::Impl::free_id_;$/;"	m	class:ldd::net::TimerEvent::Impl	file:
free_id_	internal/event_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::FdEvent::Impl
free_id_	internal/event_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::SignalEvent::Impl
free_id_	internal/event_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::TimerEvent::Impl
free_id_	internal/event_loop_impl.cc	/^util::Atomic<uint64_t> EventLoop::Impl::free_id_;$/;"	m	class:ldd::net::EventLoop::Impl	file:
free_id_	internal/event_loop_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::EventLoop::Impl
free_id_	internal/incoming_msg_impl.cc	/^util::Atomic<uint64_t> IncomingMsg::Impl::free_id_;$/;"	m	class:ldd::net::IncomingMsg::Impl	file:
free_id_	internal/incoming_msg_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::IncomingMsg::Impl
free_id_	internal/outgoing_msg_impl.cc	/^util::Atomic<uint64_t> OutgoingMsg::Impl::free_id_;$/;"	m	class:ldd::net::OutgoingMsg::Impl	file:
free_id_	internal/outgoing_msg_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::OutgoingMsg::Impl
free_id_	internal/server_impl.cc	/^util::Atomic<uint64_t> Server::Impl::free_id_;$/;"	m	class:ldd::net::Server::Impl	file:
free_id_	internal/server_impl.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::Server::Impl
free_id_	internal/task.cc	/^util::Atomic<uint64_t> Task::free_id_;$/;"	m	class:ldd::net::Task	file:
free_id_	internal/task.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::Task
free_id_	payload.cc	/^util::Atomic<uint64_t> Payload::free_id_;$/;"	m	class:ldd::net::Payload	file:
free_id_	payload.h	/^    static util::Atomic<uint64_t> free_id_;$/;"	m	class:ldd::net::Payload
func	test/event_loop/main.cc	/^void func(int no)$/;"	f
func	test1/client/main.cc	/^    TestFunc func;$/;"	m	struct:TestItem	file:
func	test1/event/main.cc	/^void func()$/;"	f
g_conn	test/benchmark/server/main.cc	/^ldd::util::Atomic<int> g_conn;$/;"	v
g_info	test/benchmark/client/main.cc	/^struct Info g_info;$/;"	v	typeref:struct:Info
g_io_service	test1/deadline_timer/main.cc	/^static boost::asio::io_service g_io_service;$/;"	v	file:
g_ios	test1/noblocking_accept/main.cc	/^boost::asio::io_service g_ios;$/;"	v
g_loop	test1/event/main.cc	/^EventLoop* g_loop = NULL;$/;"	v
g_test_items	test1/client/main.cc	/^TestItem g_test_items[] = {$/;"	v
g_timer	test/benchmark/client/main.cc	/^ldd::net::TimerEvent* g_timer;$/;"	v
g_timer	test/benchmark/server/main.cc	/^ldd::net::TimerEvent* g_timer;$/;"	v
handler_	internal/event_impl.h	/^    Functor handler_;$/;"	m	class:ldd::net::FdEvent::Impl
handler_	internal/event_impl.h	/^    Functor handler_;$/;"	m	class:ldd::net::SignalEvent::Impl
handler_	internal/event_impl.h	/^    Functor handler_;$/;"	m	class:ldd::net::TimerEvent::Impl
header	internal/channel_impl.h	/^    Header::Parser header() { return Header::Parser(header_->data()); }$/;"	f	class:ldd::net::Channel::Impl
header	internal/incoming_packet.h	/^    Header::Parser header() const { return channel_->header(); }$/;"	f	class:ldd::net::IncomingPacket
header_	internal/channel_impl.h	/^    boost::shared_ptr<Buffer> header_;$/;"	m	class:ldd::net::Channel::Impl
header_	internal/outgoing_packet.h	/^    char header_[Header::kByteSize];$/;"	m	class:ldd::net::OutgoingPacket
host_	internal/channel_impl.h	/^    std::string host_;$/;"	m	class:ldd::net::OutgoingChannel
id	incoming_msg.cc	/^IncomingMsg::Id IncomingMsg::id() const {$/;"	f	class:ldd::net::IncomingMsg
id	internal/channel_impl.h	/^    uint64_t id() const { return id_; }$/;"	f	class:ldd::net::Channel::Impl
id	internal/incoming_msg_impl.h	/^    Id id() const { return id_; }$/;"	f	class:ldd::net::IncomingMsg::Impl
id	internal/outgoing_msg_impl.h	/^    Id id() const { return id_; }$/;"	f	class:ldd::net::OutgoingMsg::Impl
id	internal/protocol.cc	/^uint32_t Header::Parser::id() const {$/;"	f	class:ldd::net::Header::Parser
id	outgoing_msg.cc	/^OutgoingMsg::Id OutgoingMsg::id() const {$/;"	f	class:ldd::net::OutgoingMsg
id_	internal/channel_impl.h	/^    uint64_t id_;$/;"	m	class:ldd::net::Channel::Impl
id_	internal/incoming_msg_impl.h	/^    Id id_;$/;"	m	class:ldd::net::IncomingMsg::Impl
id_	internal/outgoing_msg_impl.h	/^    Id id_;$/;"	m	class:ldd::net::OutgoingMsg::Impl
impl_	channel.h	/^    Impl *impl_;$/;"	m	class:ldd::net::Channel
impl_	client.h	/^    Impl *impl_;$/;"	m	class:ldd::net::Client
impl_	event.h	/^    Impl* impl_;$/;"	m	class:ldd::net::FdEvent
impl_	event.h	/^    Impl* impl_;$/;"	m	class:ldd::net::SignalEvent
impl_	event.h	/^    Impl* impl_;$/;"	m	class:ldd::net::TimerEvent
impl_	event_loop.h	/^    Impl* impl_;$/;"	m	class:ldd::net::EventLoop
impl_	incoming_msg.h	/^    Impl* impl_;$/;"	m	class:ldd::net::IncomingMsg
impl_	internal/channel_impl.h	/^    Channel::Impl *impl_;$/;"	m	class:ldd::net::EventCtx
impl_	listener.h	/^    Impl* impl_;$/;"	m	class:ldd::net::Listener
impl_	outgoing_msg.h	/^    Impl *impl_;$/;"	m	class:ldd::net::OutgoingMsg
impl_	server.h	/^    Impl* impl_;$/;"	m	class:ldd::net::Server
imsgs_	internal/channel_impl.h	/^    IncomingMsgMap imsgs_;$/;"	m	class:ldd::net::Channel::Impl
init_	internal/outgoing_msg_impl.h	/^    bool init_;$/;"	m	class:ldd::net::OutgoingMsg::Impl
instance	stat.h	/^    static Stat &instance() { return instance_; }$/;"	f	class:ldd::net::Stat
instance_	stat.cc	/^Stat Stat::instance_;$/;"	m	class:ldd::net::Stat	file:
instance_	stat.h	/^    static Stat instance_;$/;"	m	class:ldd::net::Stat
interval	internal/pulse_checker.h	/^    const util::TimeDiff& interval() const { return interval_; }$/;"	f	class:ldd::net::PulseChecker
interval	internal/pulse_emitter.h	/^    const util::TimeDiff& interval() const { return interval_; }$/;"	f	class:ldd::net::PulseEmitter
interval_	internal/pulse_checker.h	/^    util::TimeDiff interval_;$/;"	m	class:ldd::net::PulseChecker
interval_	internal/pulse_emitter.h	/^    util::TimeDiff interval_;$/;"	m	class:ldd::net::PulseEmitter
io_control	test1/noblocking_accept/main.cc	/^        void io_control(IoControlCommand& command)$/;"	f	class:my_acceptor
is_set_	internal/task.h	/^    bool is_set_;$/;"	m	class:ldd::net::Task
kByteSize	internal/protocol.h	/^    const static size_t kByteSize = 16;$/;"	m	class:ldd::net::Header
kCancel	internal/protocol.h	/^        kCancel,$/;"	e	enum:ldd::net::Header::Type
kCanceled	result.h	/^    enum Type { kOk, kFailed, kTimedOut, kCanceled };$/;"	e	enum:ldd::net::Result::Type
kClosed	channel.h	/^        kClosed = 0,$/;"	e	enum:ldd::net::Channel::State
kConnected	channel.h	/^        kConnected  = 2,$/;"	e	enum:ldd::net::Channel::State
kConnecting	channel.h	/^        kConnecting = 1,$/;"	e	enum:ldd::net::Channel::State
kDefaultBatchAccept	internal/server_impl.cc	/^const int kDefaultBatchAccept = 10;$/;"	m	namespace:ldd::net::__anon5	file:
kDefaultConnectDelayCount	internal/client_impl.cc	/^const int kDefaultConnectDelayCount = 3;$/;"	m	namespace:ldd::net::__anon6	file:
kDefaultConnectDelayTimeFinal	internal/client_impl.cc	/^const int kDefaultConnectDelayTimeFinal = 2000;$/;"	m	namespace:ldd::net::__anon6	file:
kDefaultConnectDelayTimeInitial	internal/client_impl.cc	/^const int kDefaultConnectDelayTimeInitial = 100;$/;"	m	namespace:ldd::net::__anon6	file:
kDefaultConnectDelayTimeStep	internal/client_impl.cc	/^const int kDefaultConnectDelayTimeStep = 100;$/;"	m	namespace:ldd::net::__anon6	file:
kDefaultConnectTimeout	internal/client_impl.cc	/^const int kDefaultConnectTimeout = 10;$/;"	m	namespace:ldd::net::__anon6	file:
kDefaultDoneTimeout	internal/outgoing_msg_impl.h	/^    static const int kDefaultDoneTimeout = 300;$/;"	m	class:ldd::net::OutgoingMsg::Impl
kDefaultNextTimeout	internal/outgoing_msg_impl.h	/^    static const int kDefaultNextTimeout = 100;$/;"	m	class:ldd::net::OutgoingMsg::Impl
kDefaultPulseInterval	internal/client_impl.cc	/^const int kDefaultPulseInterval = 100;$/;"	m	namespace:ldd::net::__anon6	file:
kDefaultPulseInterval	internal/server_impl.cc	/^const int kDefaultPulseInterval = 100;$/;"	m	namespace:ldd::net::__anon5	file:
kDefaultReadBufferSize	internal/server_impl.cc	/^const int kDefaultReadBufferSize = 4; \/\/Kb$/;"	m	namespace:ldd::net::__anon5	file:
kDefaultRecvTimeout	internal/outgoing_msg_impl.h	/^    static const int kDefaultRecvTimeout = 200;$/;"	m	class:ldd::net::OutgoingMsg::Impl
kDefaultResolveTimeout	internal/client_impl.cc	/^const int kDefaultResolveTimeout = 10;$/;"	m	namespace:ldd::net::__anon6	file:
kDefaultSendTimeout	internal/outgoing_msg_impl.h	/^    static const int kDefaultSendTimeout = 5;$/;"	m	class:ldd::net::OutgoingMsg::Impl
kDefaultSocketReadBufferSize	internal/client_impl.cc	/^const int kDefaultSocketReadBufferSize = 4;\/\/kb$/;"	m	namespace:ldd::net::__anon6	file:
kDefaultWriteBufferSize	internal/server_impl.cc	/^const int kDefaultWriteBufferSize = 4; \/\/Kb$/;"	m	namespace:ldd::net::__anon5	file:
kDone	incoming_msg.h	/^    enum Action { kWait, kEmit, kDone };$/;"	e	enum:ldd::net::IncomingMsg::Action
kEmit	incoming_msg.h	/^    enum Action { kWait, kEmit, kDone };$/;"	e	enum:ldd::net::IncomingMsg::Action
kEnd	internal/protocol.h	/^        kEnd,$/;"	e	enum:ldd::net::Header::Type
kFailed	result.h	/^    enum Type { kOk, kFailed, kTimedOut, kCanceled };$/;"	e	enum:ldd::net::Result::Type
kHashing	server.h	/^        kHashing,$/;"	e	enum:ldd::net::Server::ThreadDispatchPolicy
kIncoming	channel.h	/^        kIncoming,$/;"	e	enum:ldd::net::Channel::Type
kJoining	event_loop.h	/^        kJoining,$/;"	e	enum:ldd::net::EventLoopThread::State
kLast	internal/protocol.h	/^        kLast,$/;"	e	enum:ldd::net::Header::Type
kMagic	internal/protocol.h	/^    const static uint8_t kMagic = 0xA1;$/;"	m	class:ldd::net::Header
kMaxBodyLen	payload.h	/^    static const size_t kMaxBodyLen = (1<<24) - 1;$/;"	m	class:ldd::net::Payload
kMaxExtraLen	payload.h	/^    static const size_t kMaxExtraLen = (1<<8) - 1;$/;"	m	class:ldd::net::Payload
kNoTime	internal/event_impl.h	/^        kNoTime = 0,$/;"	e	enum:ldd::net::FdEvent::Impl::__anon2
kNoTime	internal/event_impl.h	/^        kNoTime = 0,$/;"	e	enum:ldd::net::TimerEvent::Impl::__anon3
kNormal	server.h	/^        kNormal,$/;"	e	enum:ldd::net::Server::ThreadDispatchPolicy
kNotifierNames	internal/channel_impl.cc	/^static const char* kNotifierNames[] = {$/;"	m	namespace:ldd::net	file:
kOk	result.h	/^    enum Type { kOk, kFailed, kTimedOut, kCanceled };$/;"	e	enum:ldd::net::Result::Type
kOutgoing	channel.h	/^        kOutgoing,$/;"	e	enum:ldd::net::Channel::Type
kPing	internal/protocol.h	/^        kPing,$/;"	e	enum:ldd::net::Header::Type
kPong	internal/protocol.h	/^        kPong,$/;"	e	enum:ldd::net::Header::Type
kReadBody	internal/channel_impl.h	/^        kReadBody,$/;"	e	enum:ldd::net::Channel::Impl::__anon4
kReadHeader	internal/channel_impl.h	/^        kReadHeader=0,$/;"	e	enum:ldd::net::Channel::Impl::__anon4
kReadable	event.h	/^        kReadable = 1,$/;"	e	enum:ldd::net::FdEvent::Type
kRequest	internal/protocol.h	/^        kRequest = 0,$/;"	e	enum:ldd::net::Header::Type
kResponse	internal/protocol.h	/^        kResponse = 128,$/;"	e	enum:ldd::net::Header::Type
kRunning	event_loop.h	/^        kRunning,$/;"	e	enum:ldd::net::EventLoopThread::State
kStarting	event_loop.h	/^        kStarting,$/;"	e	enum:ldd::net::EventLoopThread::State
kStopped	event_loop.h	/^        kStopped,$/;"	e	enum:ldd::net::EventLoopThread::State
kStopping	event_loop.h	/^        kStopping,$/;"	e	enum:ldd::net::EventLoopThread::State
kTimeDiff	internal/event_impl.h	/^        kTimeDiff,$/;"	e	enum:ldd::net::FdEvent::Impl::__anon2
kTimeDiff	internal/event_impl.h	/^        kTimeDiff,$/;"	e	enum:ldd::net::TimerEvent::Impl::__anon3
kTimedOut	internal/event_impl.h	/^    static const int kTimedOut = 4;$/;"	m	class:ldd::net::FdEvent::Impl
kTimedOut	result.h	/^    enum Type { kOk, kFailed, kTimedOut, kCanceled };$/;"	e	enum:ldd::net::Result::Type
kTimestamp	internal/event_impl.h	/^        kTimestamp$/;"	e	enum:ldd::net::FdEvent::Impl::__anon2
kTimestamp	internal/event_impl.h	/^        kTimestamp$/;"	e	enum:ldd::net::TimerEvent::Impl::__anon3
kType	incoming_msg.h	/^    static const Type kType = N;$/;"	m	class:ldd::net::TypedIncomingMsg
kType	outgoing_msg.h	/^    static const Type kType = N;$/;"	m	class:ldd::net::TypedOutgoingMsg
kUnitSize	internal/protocol.h	/^    static const int kUnitSize = 2;$/;"	m	class:ldd::net::ExtHeader
kWait	incoming_msg.h	/^    enum Action { kWait, kEmit, kDone };$/;"	e	enum:ldd::net::IncomingMsg::Action
kWritable	event.h	/^        kWritable = 2,$/;"	e	enum:ldd::net::FdEvent::Type
last	internal/outgoing_packet.h	/^    bool last() const { return last_; }$/;"	f	class:ldd::net::OutgoingResponse
last_	internal/outgoing_packet.h	/^    bool last_;$/;"	m	class:ldd::net::OutgoingResponse
ldd	address.cc	/^namespace ldd {$/;"	n	file:
ldd	address.h	/^namespace ldd {$/;"	n
ldd	backtrace.cc	/^namespace ldd { namespace net {$/;"	n	file:
ldd	backtrace.h	/^namespace ldd { namespace net {$/;"	n
ldd	buffer.cc	/^namespace ldd {$/;"	n	file:
ldd	buffer.h	/^namespace ldd { namespace net {$/;"	n
ldd	channel.cc	/^namespace ldd {$/;"	n	file:
ldd	channel.h	/^namespace ldd {$/;"	n
ldd	client.cc	/^namespace ldd {$/;"	n	file:
ldd	client.h	/^namespace ldd {$/;"	n
ldd	endpoint.cc	/^namespace ldd {$/;"	n	file:
ldd	endpoint.h	/^namespace ldd {$/;"	n
ldd	event.cc	/^namespace ldd {$/;"	n	file:
ldd	event.h	/^namespace ldd {$/;"	n
ldd	event_loop.cc	/^namespace ldd {$/;"	n	file:
ldd	event_loop.h	/^namespace ldd {$/;"	n
ldd	event_loop_thread_pool.cc	/^namespace ldd {$/;"	n	file:
ldd	event_loop_thread_pool.h	/^namespace ldd {$/;"	n
ldd	factory.h	/^namespace ldd {$/;"	n
ldd	incoming_msg.cc	/^namespace ldd {$/;"	n	file:
ldd	incoming_msg.h	/^namespace ldd {$/;"	n
ldd	incoming_msg_registry.h	/^namespace ldd {$/;"	n
ldd	internal/channel_impl.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/channel_impl.h	/^namespace ldd {$/;"	n
ldd	internal/client_impl.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/client_impl.h	/^namespace ldd {$/;"	n
ldd	internal/event_impl.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/event_impl.h	/^namespace ldd {$/;"	n
ldd	internal/event_loop_impl.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/event_loop_impl.h	/^namespace ldd {$/;"	n
ldd	internal/incoming_msg_impl.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/incoming_msg_impl.h	/^namespace ldd {$/;"	n
ldd	internal/incoming_packet.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/incoming_packet.h	/^namespace ldd {$/;"	n
ldd	internal/listener_impl.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/listener_impl.h	/^namespace ldd {$/;"	n
ldd	internal/outgoing_msg_impl.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/outgoing_msg_impl.h	/^namespace ldd {$/;"	n
ldd	internal/outgoing_packet.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/outgoing_packet.h	/^namespace ldd {$/;"	n
ldd	internal/protocol.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/protocol.h	/^namespace ldd {$/;"	n
ldd	internal/pulse_checker.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/pulse_checker.h	/^namespace ldd {$/;"	n
ldd	internal/pulse_emitter.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/pulse_emitter.h	/^namespace ldd {$/;"	n
ldd	internal/server_impl.cc	/^namespace ldd {$/;"	n	file:
ldd	internal/server_impl.h	/^namespace ldd {$/;"	n
ldd	internal/task.cc	/^namespace ldd { namespace net {$/;"	n	file:
ldd	internal/task.h	/^namespace ldd { namespace net {$/;"	n
ldd	listener.cc	/^namespace ldd {$/;"	n	file:
ldd	listener.h	/^namespace ldd {$/;"	n
ldd	message.h	/^namespace ldd {$/;"	n
ldd	outgoing_msg.cc	/^namespace ldd {$/;"	n	file:
ldd	outgoing_msg.h	/^namespace ldd {$/;"	n
ldd	payload.cc	/^namespace ldd {$/;"	n	file:
ldd	payload.h	/^namespace ldd {$/;"	n
ldd	registry.h	/^namespace ldd {$/;"	n
ldd	result.cc	/^namespace ldd {$/;"	n	file:
ldd	result.h	/^namespace ldd {$/;"	n
ldd	server.cc	/^namespace ldd {$/;"	n	file:
ldd	server.h	/^namespace ldd {$/;"	n
ldd	stat.cc	/^namespace ldd { namespace net {$/;"	n	file:
ldd	stat.h	/^namespace ldd { namespace net {$/;"	n
ldd_net_	ut/imsg.h	/^    MyLddNet *ldd_net_;$/;"	m	class:MyEchoMsg
ldd_net_	ut/omsg.h	/^    MyLddNet *ldd_net_;$/;"	m	class:MyEmitMsg
lddnetcli_CXXFLAGS	test/benchmark/client/Makefile	/^lddnetcli_CXXFLAGS= -I..\/..\/..\/..\/..\/$/;"	m
lddnetcli_LDFLAGS	test/benchmark/client/Makefile	/^lddnetcli_LDFLAGS = -L..\/..\/..\/ -L..\/..\/..\/..\/util$/;"	m
lddnetcli_LDLIBS	test/benchmark/client/Makefile	/^lddnetcli_LDLIBS  = -llddnet -llddutil -ltcmalloc$/;"	m
lddnetcli_RPATHS	test/benchmark/client/Makefile	/^lddnetcli_RPATHS  = ..\/..\/..\/ ..\/..\/..\/..\/util$/;"	m
lddnetcli_SOURCES	test/benchmark/client/Makefile	/^lddnetcli_SOURCES = $(wildcard *.cc)$/;"	m
lddnetsvr_CXXFLAGS	test/benchmark/server/Makefile	/^lddnetsvr_CXXFLAGS= -I..\/..\/..\/..\/..\/$/;"	m
lddnetsvr_LDFLAGS	test/benchmark/server/Makefile	/^lddnetsvr_LDFLAGS = -L..\/..\/..\/ -L..\/..\/..\/..\/util$/;"	m
lddnetsvr_LDLIBS	test/benchmark/server/Makefile	/^lddnetsvr_LDLIBS  = -llddnet -llddutil$/;"	m
lddnetsvr_RPATHS	test/benchmark/server/Makefile	/^lddnetsvr_RPATHS  = ..\/..\/..\/ ..\/..\/..\/..\/util$/;"	m
lddnetsvr_SOURCES	test/benchmark/server/Makefile	/^lddnetsvr_SOURCES = $(wildcard *.cc)$/;"	m
len	buffer.h	/^    size_t len() const { return size_; }$/;"	f	class:ldd::net::Buffer
liblddnet.so_CXXFLAGS	Makefile	/^liblddnet.so_CXXFLAGS= -I..\/..\/  #-DRES_COUNTER #enable resource counter$/;"	m
liblddnet.so_HEADERS	Makefile	/^liblddnet.so_HEADERS = $(wildcard *.h)$/;"	m
liblddnet.so_HPREFIX	Makefile	/^liblddnet.so_HPREFIX = ldd\/net$/;"	m
liblddnet.so_LDFLAGS	Makefile	/^liblddnet.so_LDFLAGS = -L..\/util $/;"	m
liblddnet.so_LDLIBS	Makefile	/^liblddnet.so_LDLIBS  = -llddutil -levent$/;"	m
liblddnet.so_RPATHS	Makefile	/^liblddnet.so_RPATHS  = ..\/util$/;"	m
liblddnet.so_SOURCES	Makefile	/^liblddnet.so_SOURCES = $(wildcard *.cc) $(wildcard internal\/*.cc internal\/*.c)$/;"	m
listener_	internal/server_impl.h	/^    Listener::Impl* listener_;$/;"	m	class:ldd::net::Server::Impl
listener_	ut/my_lddnet.h	/^    ldd::net::Listener listener_;$/;"	m	class:MyLddNet
loop_	internal/event_impl.h	/^    EventLoop::Impl* loop_;$/;"	m	class:ldd::net::FdEvent::Impl
loop_	internal/event_impl.h	/^    EventLoop::Impl* loop_;$/;"	m	class:ldd::net::SignalEvent::Impl
loop_	internal/event_impl.h	/^    EventLoop::Impl* loop_;$/;"	m	class:ldd::net::TimerEvent::Impl
loop_	ut/event_loop_test.cc	/^    EventLoop loop_;$/;"	m	class:MyEventLoop	file:
loop_	ut/event_loop_test.cc	/^    EventLoop loop_;$/;"	m	class:MyEventLoopThreadPool	file:
loop_	ut/event_loop_test.cc	/^    MyEventLoop loop_;$/;"	m	class:MyEventLoopTest	file:
loop_	ut/event_loop_test.cc	/^    MyEventLoopThread loop_;$/;"	m	class:MyEventLoopThreadTest	file:
loop_	ut/event_loop_test.cc	/^    MyEventLoopThreadPool loop_;$/;"	m	class:MyEventLoopThreadPoolTest	file:
loop_	ut/event_test.cc	/^    EventLoop loop_;$/;"	m	class:MyFdEvent	file:
loop_	ut/event_test.cc	/^    EventLoop loop_;$/;"	m	class:MySignalEvent	file:
loop_	ut/my_lddnet.h	/^    ldd::net::EventLoop loop_;$/;"	m	class:MyLddNet
loop_thread_	ut/event_loop_test.cc	/^    EventLoopThread loop_thread_;$/;"	m	class:MyEventLoopThread	file:
loop_thread_pool_	ut/event_loop_test.cc	/^    EventLoopThreadPool loop_thread_pool_;$/;"	m	class:MyEventLoopThreadPool	file:
main	other/client/main.cc	/^int main(int argc, char** argv) {$/;"	f
main	other/main.cc	/^int main(int argc, char** argv) {$/;"	f
main	sample/a.cc	/^int main() {$/;"	f
main	test/benchmark/client/main.cc	/^int main(int argc, char** argv) {$/;"	f
main	test/benchmark/server/main.cc	/^int main(int argc, char** argv) {$/;"	f
main	test/client/main.cc	/^int main(int argc, char** argv) {$/;"	f
main	test/event_loop/main.cc	/^int main()$/;"	f
main	test/server/main.cc	/^int main(int argc, char** argv) {$/;"	f
main	test1/atomic/main.cc	/^int main()$/;"	f
main	test1/client/main.cc	/^int main(int argc, char *argv[])$/;"	f
main	test1/concurrency_connect/main.cc	/^int main(int argc, char *argv[])$/;"	f
main	test1/deadline_timer/main.cc	/^int main()$/;"	f
main	test1/event/main.cc	/^int main(int argc, char *argv[])$/;"	f
main	test1/file_lock/main.cc	/^int main()$/;"	f
main	test1/noblocking_accept/main.cc	/^int main(int argc, char *argv[])$/;"	f
main	test1/pretty_function/a.c	/^int main() {$/;"	f
msg_	internal/outgoing_packet.h	/^    boost::shared_ptr<OutgoingMsg> msg_;$/;"	m	class:ldd::net::OutgoingRequest
msg_	ut/event_test.cc	/^    std::string msg_;$/;"	m	class:TCPClient	file:
my_acceptor	test1/noblocking_accept/main.cc	/^    explicit my_acceptor(boost::asio::io_service& io_service)$/;"	f	class:my_acceptor
my_acceptor	test1/noblocking_accept/main.cc	/^class my_acceptor : public boost::asio::ip::tcp::acceptor {$/;"	c	file:
my_event_	ut/event_test.cc	/^    MyFdEvent my_event_;$/;"	m	class:MyFdEventTest	file:
my_event_	ut/event_test.cc	/^    MySignalEvent my_event_;$/;"	m	class:MySignalEventTest	file:
my_event_	ut/event_test.cc	/^    MyTimerEvent my_event_;$/;"	m	class:MyTimerEventTest	file:
my_ldd_net_	ut/lddnet_test.cc	/^    MyLddNet my_ldd_net_;$/;"	m	class:MyLddNetTest	file:
n_	other/imsg.h	/^    size_t n_;$/;"	m	class:MyEchoMsg
n_	test/client/imsg.h	/^    size_t n_;$/;"	m	class:MyEchoMsg
n_	test/server/imsg.h	/^    size_t n_;$/;"	m	class:MyEchoMsg
n_	ut/imsg.h	/^    size_t n_;$/;"	m	class:MyEchoMsg
name	channel.cc	/^std::string Channel::name() const {$/;"	f	class:ldd::net::Channel
name	internal/channel_impl.cc	/^std::string IncomingChannel::name() const {$/;"	f	class:ldd::net::IncomingChannel
name	internal/channel_impl.cc	/^std::string OutgoingChannel::name() const {$/;"	f	class:ldd::net::OutgoingChannel
name	internal/incoming_packet.h	/^    const char* name() const { return name_; }$/;"	f	class:ldd::net::IncomingPacketWithPayload
name	test1/client/main.cc	/^    char *name;$/;"	m	struct:TestItem	file:
name_	internal/incoming_packet.h	/^    const char* name_;$/;"	m	class:ldd::net::IncomingPacketWithPayload
need_resolve_	internal/channel_impl.h	/^    bool need_resolve_;$/;"	m	class:ldd::net::OutgoingChannel
net	address.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	address.h	/^namespace net {$/;"	n	namespace:ldd
net	backtrace.cc	/^namespace ldd { namespace net {$/;"	n	namespace:ldd	file:
net	backtrace.h	/^namespace ldd { namespace net {$/;"	n	namespace:ldd
net	buffer.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	buffer.h	/^namespace ldd { namespace net {$/;"	n	namespace:ldd
net	channel.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	channel.h	/^namespace net {$/;"	n	namespace:ldd
net	client.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	client.h	/^namespace net {$/;"	n	namespace:ldd
net	endpoint.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	endpoint.h	/^namespace net {$/;"	n	namespace:ldd
net	event.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	event.h	/^namespace net {$/;"	n	namespace:ldd
net	event_loop.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	event_loop.h	/^namespace net {$/;"	n	namespace:ldd
net	event_loop_thread_pool.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	event_loop_thread_pool.h	/^namespace net {$/;"	n	namespace:ldd
net	factory.h	/^namespace net {$/;"	n	namespace:ldd
net	incoming_msg.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	incoming_msg.h	/^namespace net {$/;"	n	namespace:ldd
net	incoming_msg_registry.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/channel_impl.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/channel_impl.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/client_impl.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/client_impl.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/event_impl.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/event_impl.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/event_loop_impl.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/event_loop_impl.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/incoming_msg_impl.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/incoming_msg_impl.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/incoming_packet.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/incoming_packet.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/listener_impl.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/listener_impl.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/outgoing_msg_impl.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/outgoing_msg_impl.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/outgoing_packet.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/outgoing_packet.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/protocol.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/protocol.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/pulse_checker.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/pulse_checker.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/pulse_emitter.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/pulse_emitter.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/server_impl.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	internal/server_impl.h	/^namespace net {$/;"	n	namespace:ldd
net	internal/task.cc	/^namespace ldd { namespace net {$/;"	n	namespace:ldd	file:
net	internal/task.h	/^namespace ldd { namespace net {$/;"	n	namespace:ldd
net	listener.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	listener.h	/^namespace net {$/;"	n	namespace:ldd
net	message.h	/^namespace net {$/;"	n	namespace:ldd
net	outgoing_msg.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	outgoing_msg.h	/^namespace net {$/;"	n	namespace:ldd
net	payload.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	payload.h	/^namespace net {$/;"	n	namespace:ldd
net	registry.h	/^namespace net {$/;"	n	namespace:ldd
net	result.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	result.h	/^namespace net {$/;"	n	namespace:ldd
net	server.cc	/^namespace net {$/;"	n	namespace:ldd	file:
net	server.h	/^namespace net {$/;"	n	namespace:ldd
net	stat.cc	/^namespace ldd { namespace net {$/;"	n	namespace:ldd	file:
net	stat.h	/^namespace ldd { namespace net {$/;"	n	namespace:ldd
next_	event_loop_thread_pool.h	/^    size_t next_;$/;"	m	class:ldd::net::EventLoopThreadPool
next_id	buffer.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::Buffer
next_id	internal/channel_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::DnsCtx
next_id	internal/channel_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::EventCtx
next_id	internal/channel_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::IncomingChannel
next_id	internal/channel_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::OutgoingChannel
next_id	internal/client_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::Client::Impl
next_id	internal/event_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::FdEvent::Impl
next_id	internal/event_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::SignalEvent::Impl
next_id	internal/event_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::TimerEvent::Impl
next_id	internal/event_loop_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::EventLoop::Impl
next_id	internal/incoming_msg_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::IncomingMsg::Impl
next_id	internal/outgoing_msg_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::OutgoingMsg::Impl
next_id	internal/server_impl.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::Server::Impl
next_id	internal/task.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::Task
next_id	payload.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:ldd::net::Payload
next_id_	buffer.cc	/^util::Atomic<uint64_t> Buffer::next_id_;$/;"	m	class:ldd::net::Buffer	file:
next_id_	buffer.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::Buffer
next_id_	internal/channel_impl.cc	/^util::Atomic<uint64_t> Channel::Impl::next_id_;$/;"	m	class:ldd::net::Channel::Impl	file:
next_id_	internal/channel_impl.cc	/^util::Atomic<uint64_t> DnsCtx::next_id_;$/;"	m	class:ldd::net::DnsCtx	file:
next_id_	internal/channel_impl.cc	/^util::Atomic<uint64_t> IncomingChannel::next_id_;$/;"	m	class:ldd::net::IncomingChannel	file:
next_id_	internal/channel_impl.cc	/^util::Atomic<uint64_t> OutgoingChannel::next_id_;$/;"	m	class:ldd::net::OutgoingChannel	file:
next_id_	internal/channel_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::Channel::Impl
next_id_	internal/channel_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::DnsCtx
next_id_	internal/channel_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::EventCtx
next_id_	internal/channel_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::IncomingChannel
next_id_	internal/channel_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::OutgoingChannel
next_id_	internal/client_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::Client::Impl
next_id_	internal/event_impl.cc	/^util::Atomic<uint64_t> SignalEvent::Impl::next_id_;$/;"	m	class:ldd::net::SignalEvent::Impl	file:
next_id_	internal/event_impl.cc	/^util::Atomic<uint64_t> TimerEvent::Impl::next_id_;$/;"	m	class:ldd::net::TimerEvent::Impl	file:
next_id_	internal/event_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::FdEvent::Impl
next_id_	internal/event_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::SignalEvent::Impl
next_id_	internal/event_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::TimerEvent::Impl
next_id_	internal/event_loop_impl.cc	/^util::Atomic<uint64_t> EventLoop::Impl::next_id_;$/;"	m	class:ldd::net::EventLoop::Impl	file:
next_id_	internal/event_loop_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::EventLoop::Impl
next_id_	internal/incoming_msg_impl.cc	/^util::Atomic<uint64_t> IncomingMsg::Impl::next_id_;$/;"	m	class:ldd::net::IncomingMsg::Impl	file:
next_id_	internal/incoming_msg_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::IncomingMsg::Impl
next_id_	internal/outgoing_msg_impl.cc	/^util::Atomic<uint64_t> OutgoingMsg::Impl::next_id_;$/;"	m	class:ldd::net::OutgoingMsg::Impl	file:
next_id_	internal/outgoing_msg_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::OutgoingMsg::Impl
next_id_	internal/server_impl.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::Server::Impl
next_id_	internal/task.cc	/^util::Atomic<uint64_t> Task::next_id_;$/;"	m	class:ldd::net::Task	file:
next_id_	internal/task.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::Task
next_id_	payload.cc	/^util::Atomic<uint64_t> Payload::next_id_;$/;"	m	class:ldd::net::Payload	file:
next_id_	payload.h	/^    static util::Atomic<uint64_t> next_id_;$/;"	m	class:ldd::net::Payload
notify_closed	client.h	/^        Notifier notify_closed;$/;"	m	struct:ldd::net::Client::Options
notify_closed	server.h	/^        Notifier notify_closed;$/;"	m	struct:ldd::net::Server::Options
notify_connected	client.h	/^        Notifier notify_connected;$/;"	m	struct:ldd::net::Client::Options
notify_connected	server.h	/^        Notifier notify_connected;$/;"	m	struct:ldd::net::Server::Options
notify_connecting	client.h	/^        Notifier notify_connecting;$/;"	m	struct:ldd::net::Client::Options
oc_	internal/channel_impl.h	/^    OutgoingChannel *oc_;$/;"	m	class:ldd::net::DnsCtx
ok	ut/event_test.cc	/^    bool ok() { return ok_; }$/;"	f	class:TCPClient
ok_	ut/event_loop_test.cc	/^    bool ok_;$/;"	m	class:MyEventLoop	file:
ok_	ut/event_loop_test.cc	/^    bool ok_;$/;"	m	class:MyEventLoopThread	file:
ok_	ut/event_loop_test.cc	/^    bool ok_[THREAD_COUNT];$/;"	m	class:MyEventLoopThreadPool	file:
ok_	ut/event_test.cc	/^    bool ok_;$/;"	m	class:MySignalEvent	file:
ok_	ut/event_test.cc	/^    bool ok_;$/;"	m	class:MyTimerEvent	file:
ok_	ut/event_test.cc	/^    bool ok_;$/;"	m	class:TCPClient	file:
ok_	ut/my_lddnet.h	/^    bool ok_;$/;"	m	class:MyLddNet
omsgs_	internal/channel_impl.h	/^    OutgoingMsgMap omsgs_;$/;"	m	class:ldd::net::Channel::Impl
operator ==	address.cc	/^bool Address::operator==(const Address& rhs) const {$/;"	f	class:ldd::net::Address
options	client.cc	/^const Client::Options& Client::options() const {$/;"	f	class:ldd::net::Client
options	internal/channel_impl.h	/^    const Client::Options& options() const { return client_->options(); }$/;"	f	class:ldd::net::OutgoingChannel
options	internal/channel_impl.h	/^    const Server::Options& options() const { return server_->options(); }$/;"	f	class:ldd::net::IncomingChannel
options	internal/client_impl.h	/^    const Client::Options& options() const { return options_; }$/;"	f	class:ldd::net::Client::Impl
options	internal/server_impl.h	/^    const Options& options() { return options_; }$/;"	f	class:ldd::net::Server::Impl
options	server.cc	/^const Server::Options& Server::options() const {$/;"	f	class:ldd::net::Server
options_	internal/client_impl.h	/^    Client::Options options_;$/;"	m	class:ldd::net::Client::Impl
options_	internal/server_impl.h	/^    Options options_;$/;"	m	class:ldd::net::Server::Impl
outgoing_msg_id_	internal/channel_impl.h	/^    int32_t outgoing_msg_id_;$/;"	m	class:ldd::net::Channel::Impl
owner	internal/channel_impl.h	/^    boost::shared_ptr<Channel> owner() { return owner_->shared_from_this(); }$/;"	f	class:ldd::net::Channel::Impl
owner	internal/client_impl.h	/^    Client* owner() const { return client_; }$/;"	f	class:ldd::net::Client::Impl
owner	internal/incoming_msg_impl.h	/^    boost::shared_ptr<IncomingMsg> owner() const {$/;"	f	class:ldd::net::IncomingMsg::Impl
owner	internal/outgoing_msg_impl.h	/^    boost::shared_ptr<OutgoingMsg> owner() const {$/;"	f	class:ldd::net::OutgoingMsg::Impl
owner	internal/server_impl.h	/^    Server* owner() { return server_; }$/;"	f	class:ldd::net::Server::Impl
owner_	internal/channel_impl.h	/^    Owner* owner_;$/;"	m	class:ldd::net::Channel::Impl
owner_	internal/channel_impl.h	/^    boost::shared_ptr<Channel> owner_;$/;"	m	class:ldd::net::DnsCtx
owner_	internal/channel_impl.h	/^    boost::shared_ptr<Channel> owner_;$/;"	m	class:ldd::net::EventCtx
owner_	internal/incoming_msg_impl.h	/^    IncomingMsg* owner_;$/;"	m	class:ldd::net::IncomingMsg::Impl
owner_	internal/outgoing_msg_impl.h	/^    OutgoingMsg* owner_;$/;"	m	class:ldd::net::OutgoingMsg::Impl
packet	internal/incoming_packet.h	/^    boost::shared_ptr<Buffer> packet() { return packet_; }$/;"	f	class:ldd::net::IncomingPacketWithPayload
packet_	internal/channel_impl.h	/^    boost::shared_ptr<Buffer> packet_;$/;"	m	class:ldd::net::Channel::Impl
packet_	internal/incoming_packet.h	/^    boost::shared_ptr<Buffer> packet_;$/;"	m	class:ldd::net::IncomingPacketWithPayload
packet_size_	internal/channel_impl.h	/^    int packet_size_;$/;"	m	class:ldd::net::Channel::Impl
payload	internal/incoming_packet.h	/^    const Payload& payload() const { return payload_; }$/;"	f	class:ldd::net::IncomingPacketWithPayload
payload_	internal/incoming_packet.h	/^    Payload payload_;$/;"	m	class:ldd::net::IncomingPacketWithPayload
payload_	internal/outgoing_packet.h	/^    Payload payload_;$/;"	m	class:ldd::net::OutgoingPacketWithPayload
payload_	other/imsg.h	/^    Payload payload_;$/;"	m	class:MyEchoMsg
payload_	test/benchmark/server/imsg.h	/^    Payload payload_;$/;"	m	class:MyEchoMsg
payload_	test/client/imsg.h	/^    Payload payload_;$/;"	m	class:MyEchoMsg
payload_	test/server/imsg.h	/^    Payload payload_;$/;"	m	class:MyEchoMsg
payload_	ut/imsg.h	/^    Payload payload_;$/;"	m	class:MyEchoMsg
peer_endpoint	channel.cc	/^const Endpoint& Channel::peer_endpoint() const {$/;"	f	class:ldd::net::Channel
peer_endpoint	internal/channel_impl.h	/^    const Endpoint& peer_endpoint() const { return peer_endpoint_; }$/;"	f	class:ldd::net::Channel::Impl
peer_endpoint_	internal/channel_impl.h	/^    Endpoint peer_endpoint_;$/;"	m	class:ldd::net::Channel::Impl
pending_packets_	internal/channel_impl.h	/^    boost::ptr_deque<OutgoingPacket> pending_packets_;$/;"	m	class:ldd::net::Channel::Impl
port	endpoint.h	/^    uint16_t port() const { return port_; }$/;"	f	class:ldd::net::Endpoint
port_	endpoint.h	/^    uint16_t port_;$/;"	m	class:ldd::net::Endpoint
port_	internal/channel_impl.h	/^    uint16_t port_;$/;"	m	class:ldd::net::OutgoingChannel
port_	ut/event_test.cc	/^    int port_;$/;"	m	class:TCPServer	file:
pos_	internal/task.h	/^    uint32_t pos_;$/;"	m	class:ldd::net::Task
ptr	buffer.h	/^    char* ptr() { return data_.get(); }$/;"	f	class:ldd::net::Buffer
ptr	buffer.h	/^    const char* ptr() const { return data_.get(); }$/;"	f	class:ldd::net::Buffer
pulse_checker_	internal/channel_impl.h	/^    boost::scoped_ptr<PulseChecker> pulse_checker_;$/;"	m	class:ldd::net::Channel::Impl
pulse_emitter_	internal/channel_impl.h	/^    boost::scoped_ptr<PulseEmitter> pulse_emitter_;$/;"	m	class:ldd::net::Channel::Impl
pulse_interval	client.h	/^        int pulse_interval;$/;"	m	struct:ldd::net::Client::Options
pulse_interval	server.h	/^        int pulse_interval;$/;"	m	struct:ldd::net::Server::Options
pulse_lazy_emitting	client.h	/^        bool pulse_lazy_emitting;$/;"	m	struct:ldd::net::Client::Options
pulse_lazy_emitting	server.h	/^        bool pulse_lazy_emitting;$/;"	m	struct:ldd::net::Server::Options
pulse_relaxed_checking	client.h	/^        bool pulse_relaxed_checking;$/;"	m	struct:ldd::net::Client::Options
pulse_relaxed_checking	server.h	/^        bool pulse_relaxed_checking;$/;"	m	struct:ldd::net::Server::Options
pulser_	internal/pulse_emitter.h	/^    Pulser pulser_;$/;"	m	class:ldd::net::PulseEmitter
quit_	ut/event_test.cc	/^    bool quit_;$/;"	m	class:TCPServer	file:
read_body_task_	internal/channel_impl.h	/^    ReadTask read_body_task_;$/;"	m	class:ldd::net::Channel::Impl
read_buffer_size	server.h	/^        int read_buffer_size;$/;"	m	struct:ldd::net::Server::Options
read_ev_	internal/event_loop_impl.h	/^    struct event *read_ev_;$/;"	m	class:ldd::net::EventLoop::Impl	typeref:struct:ldd::net::EventLoop::Impl::event
read_fd_	internal/event_loop_impl.h	/^    int &read_fd_;$/;"	m	class:ldd::net::EventLoop::Impl
read_header_task_	internal/channel_impl.h	/^    ReadTask read_header_task_;$/;"	m	class:ldd::net::Channel::Impl
read_state_	internal/channel_impl.h	/^    int read_state_;$/;"	m	class:ldd::net::Channel::Impl
registry	internal/channel_impl.h	/^    virtual IncomingMsgRegistry* registry() const { return client_->owner(); }$/;"	f	class:ldd::net::OutgoingChannel
registry	internal/channel_impl.h	/^    virtual IncomingMsgRegistry* registry() const { return server_->owner(); }$/;"	f	class:ldd::net::IncomingChannel
reporter_	internal/pulse_checker.h	/^    Reporter reporter_;$/;"	m	class:ldd::net::PulseChecker
request	test/benchmark/client/omsg.cc	/^DECLARE_string(request);$/;"	v
request_	internal/outgoing_msg_impl.h	/^    OutgoingRequest* request_;$/;"	m	class:ldd::net::OutgoingMsg::Impl
requests	test/benchmark/client/omsg.h	/^    ldd::util::Atomic<int> requests;$/;"	m	struct:Info
resolve_timeout	client.h	/^        int resolve_timeout;$/;"	m	struct:ldd::net::Client::Options
response_	internal/incoming_msg_impl.h	/^    OutgoingResponse* response_;$/;"	m	class:ldd::net::IncomingMsg::Impl
running	internal/pulse_checker.h	/^    bool running() const { return running_; }$/;"	f	class:ldd::net::PulseChecker
running	internal/pulse_emitter.h	/^    bool running() const { return running_; }$/;"	f	class:ldd::net::PulseEmitter
running_	internal/pulse_checker.h	/^    bool running_;$/;"	m	class:ldd::net::PulseChecker
running_	internal/pulse_emitter.h	/^    bool running_;$/;"	m	class:ldd::net::PulseEmitter
self_endpoint	channel.cc	/^const Endpoint& Channel::self_endpoint() const {$/;"	f	class:ldd::net::Channel
self_endpoint	internal/channel_impl.h	/^    const Endpoint& self_endpoint() const { return self_endpoint_; }$/;"	f	class:ldd::net::Channel::Impl
self_endpoint_	internal/channel_impl.h	/^    Endpoint self_endpoint_;$/;"	m	class:ldd::net::Channel::Impl
server_	internal/channel_impl.h	/^    Server::Impl* server_;$/;"	m	class:ldd::net::IncomingChannel
server_	internal/server_impl.h	/^    Server* server_;$/;"	m	class:ldd::net::Server::Impl
server_	ut/event_test.cc	/^    TCPServer server_;$/;"	m	class:MyFdEvent	file:
server_	ut/my_lddnet.h	/^    boost::scoped_ptr<ldd::net::Server> server_;$/;"	m	class:MyLddNet
set_address	endpoint.h	/^    void set_address(const Address& address) { address_ = address; }$/;"	f	class:ldd::net::Endpoint
set_body_size	internal/protocol.cc	/^void Header::Builder::set_body_size(uint32_t body_size) {$/;"	f	class:ldd::net::Header::Builder
set_body_type	internal/protocol.cc	/^void Header::Builder::set_body_type(uint16_t body_type) {$/;"	f	class:ldd::net::Header::Builder
set_code	internal/outgoing_packet.h	/^    void set_code(Code code) { code_ = code; }$/;"	f	class:ldd::net::OutgoingResponse
set_context	channel.cc	/^void Channel::set_context(const boost::any& context) {$/;"	f	class:ldd::net::Channel
set_context	internal/channel_impl.h	/^    void set_context(const boost::any& context)$/;"	f	class:ldd::net::Channel::Impl
set_ext_count	internal/protocol.cc	/^void Header::Builder::set_ext_count(uint8_t ext_count) {$/;"	f	class:ldd::net::Header::Builder
set_ext_len	internal/protocol.cc	/^void Header::Builder::set_ext_len(uint16_t ext_len) {$/;"	f	class:ldd::net::Header::Builder
set_id	internal/protocol.cc	/^void Header::Builder::set_id(uint32_t id) {$/;"	f	class:ldd::net::Header::Builder
set_last	internal/outgoing_packet.h	/^    void set_last(bool last) { last_ = last; }$/;"	f	class:ldd::net::OutgoingResponse
set_noblocking	test1/event/main.cc	/^void set_noblocking(int fd)$/;"	f
set_ok	ut/my_lddnet.h	/^    void set_ok(bool ok) { ok_ = ok; }$/;"	f	class:MyLddNet
set_port	endpoint.h	/^    void set_port(uint16_t port) { port_ = port; }$/;"	f	class:ldd::net::Endpoint
set_socket	internal/channel_impl.cc	/^void Channel::Impl::set_socket(int socket)$/;"	f	class:ldd::net::Channel::Impl
set_state	internal/channel_impl.h	/^    void set_state(State state) { state_ = state; }$/;"	f	class:ldd::net::Channel::Impl
set_type	incoming_msg.cc	/^void DynamicIncomingMsg::set_type(Type type)$/;"	f	class:ldd::net::DynamicIncomingMsg
set_type	internal/protocol.cc	/^void Header::Builder::set_type(uint8_t type) {$/;"	f	class:ldd::net::Header::Builder
set_type	outgoing_msg.cc	/^void DynamicOutgoingMsg::set_type(Type type)$/;"	f	class:ldd::net::DynamicOutgoingMsg
sig_ev_	internal/event_impl.h	/^    std::map<int, struct event *> sig_ev_;$/;"	m	class:ldd::net::SignalEvent::Impl
sig_ev_	ut/event_test.cc	/^    SignalEvent sig_ev_;$/;"	m	class:MySignalEvent	file:
size	buffer.h	/^    size_t size() const { return size_; }$/;"	f	class:ldd::net::Buffer
size	internal/protocol.h	/^    static uint32_t size(int count) { return count * 2; }$/;"	f	class:ldd::net::ExtHeader
size_	buffer.h	/^    size_t size_;$/;"	m	class:ldd::net::Buffer
socket	channel.cc	/^int Channel::socket()$/;"	f	class:ldd::net::Channel
socket	internal/channel_impl.h	/^    int socket() { return socket_; }$/;"	f	class:ldd::net::Channel::Impl
socket	internal/task.h	/^    int socket() { return fd_; }$/;"	f	class:ldd::net::Task
socket_	internal/channel_impl.h	/^    int socket_;$/;"	m	class:ldd::net::Channel::Impl
socket_ev_	internal/channel_impl.h	/^    struct event *socket_ev_;$/;"	m	class:ldd::net::Channel::Impl	typeref:struct:ldd::net::Channel::Impl::event
socket_read_buffer_size	client.h	/^        int socket_read_buffer_size;$/;"	m	struct:ldd::net::Client::Options
start_stamp_	internal/event_impl.h	/^    ldd::util::Timestamp start_stamp_;$/;"	m	class:ldd::net::TimerEvent::Impl
started_	event_loop_thread_pool.h	/^    bool started_;$/;"	m	class:ldd::net::EventLoopThreadPool
state	channel.cc	/^Channel::State Channel::state() const {$/;"	f	class:ldd::net::Channel
state	internal/channel_impl.h	/^    State state() const { return state_; }$/;"	f	class:ldd::net::Channel::Impl
state_	event_loop.h	/^    util::Atomic<State> state_;$/;"	m	class:ldd::net::EventLoopThread
state_	internal/channel_impl.h	/^    State state_;$/;"	m	class:ldd::net::Channel::Impl
step_	test/benchmark/client/omsg.h	/^    int step_;$/;"	m	class:MyEmitMsg
str2_	other/client/omsg.h	/^    std::string str2_;$/;"	m	class:MyEmitMsg
str2_	test/benchmark/client/omsg.h	/^    std::string str2_;$/;"	m	class:MyEmitMsg
str2_	test/client/omsg.h	/^    std::string str2_;$/;"	m	class:MyEmitMsg
str2_	test/server/omsg.h	/^    std::string str2_;$/;"	m	class:MyEmitMsg
str2_	ut/omsg.h	/^    std::string str2_;$/;"	m	class:MyEmitMsg
str_	other/client/omsg.h	/^    std::string str_;$/;"	m	class:MyEmitMsg
str_	test/benchmark/client/omsg.h	/^    std::string str_;$/;"	m	class:MyEmitMsg
str_	test/client/omsg.h	/^    std::string str_;$/;"	m	class:MyEmitMsg
str_	test/server/omsg.h	/^    std::string str_;$/;"	m	class:MyEmitMsg
str_	ut/omsg.h	/^    std::string str_;$/;"	m	class:MyEmitMsg
success	test/benchmark/client/omsg.h	/^    ldd::util::Atomic<int> success;$/;"	m	struct:Info
t1_	ut/event_test.cc	/^    Timestamp t1_;$/;"	m	class:MyTimerEvent	file:
t2_	ut/event_test.cc	/^    Timestamp t2_;$/;"	m	class:MyTimerEvent	file:
test_CXXFLAGS	test/event_loop/Makefile	/^test_CXXFLAGS= -I ..\/..\/$/;"	m
test_LDFLAGS	test/event_loop/Makefile	/^test_LDFLAGS = -L ..\/..\/$/;"	m
test_LDLIBS	test/event_loop/Makefile	/^test_LDLIBS  = -llddnet -lglog$/;"	m
test_RPATHS	test/event_loop/Makefile	/^test_RPATHS  = ..\/..\/$/;"	m
test_SOURCES	test/event_loop/Makefile	/^test_SOURCES = $(wildcard *.cc)$/;"	m
thread	event_loop.h	/^    const util::Thread* thread() const { return thread_.get(); }$/;"	f	class:ldd::net::EventLoopThread
thread_	event_loop.h	/^    boost::scoped_ptr<util::Thread> thread_;$/;"	m	class:ldd::net::EventLoopThread
thread_idx_	internal/server_impl.h	/^    uint32_t thread_idx_;$/;"	m	class:ldd::net::Server::Impl
threads	event_loop_thread_pool.h	/^    boost::ptr_vector<EventLoopThread>* threads() { return &threads_; }$/;"	f	class:ldd::net::EventLoopThreadPool
threads	server.h	/^        boost::ptr_vector<EventLoopThread>* threads;$/;"	m	struct:ldd::net::Server::Options
threads	test/benchmark/server/main.cc	/^boost::ptr_vector<ldd::net::EventLoopThread> threads;$/;"	v
threads_	event_loop_thread_pool.h	/^    boost::ptr_vector<EventLoopThread> threads_;$/;"	m	class:ldd::net::EventLoopThreadPool
threads_dispatching	server.h	/^        int threads_dispatching;$/;"	m	struct:ldd::net::Server::Options
threads_num_	event_loop_thread_pool.h	/^    int threads_num_;$/;"	m	class:ldd::net::EventLoopThreadPool
tid_	internal/event_loop_impl.h	/^    pthread_t tid_;$/;"	m	class:ldd::net::EventLoop::Impl
tid_	ut/event_test.cc	/^    pthread_t tid_;$/;"	m	class:TCPServer	file:
time_diff_	internal/event_impl.h	/^    ldd::util::TimeDiff time_diff_;$/;"	m	class:ldd::net::FdEvent::Impl
time_diff_	internal/event_impl.h	/^    ldd::util::TimeDiff time_diff_;$/;"	m	class:ldd::net::TimerEvent::Impl
time_flag_	internal/event_impl.h	/^    int time_flag_;$/;"	m	class:ldd::net::FdEvent::Impl
time_flag_	internal/event_impl.h	/^    int time_flag_;$/;"	m	class:ldd::net::TimerEvent::Impl
time_stamp_	internal/event_impl.h	/^    ldd::util::Timestamp time_stamp_; $/;"	m	class:ldd::net::FdEvent::Impl
time_stamp_	internal/event_impl.h	/^    ldd::util::Timestamp time_stamp_;$/;"	m	class:ldd::net::TimerEvent::Impl
timer	internal/pulse_checker.h	/^    TimerEvent& timer() { return timer_; }$/;"	f	class:ldd::net::PulseChecker
timer	internal/pulse_emitter.h	/^    TimerEvent& timer() { return timer_; }$/;"	f	class:ldd::net::PulseEmitter
timer1_	internal/outgoing_msg_impl.h	/^    boost::scoped_ptr<TimerEvent> timer1_;$/;"	m	class:ldd::net::OutgoingMsg::Impl
timer2_	internal/outgoing_msg_impl.h	/^    boost::scoped_ptr<TimerEvent> timer2_;$/;"	m	class:ldd::net::OutgoingMsg::Impl
timer_	internal/channel_impl.h	/^    TimerEvent timer_;$/;"	m	class:ldd::net::OutgoingChannel
timer_	internal/pulse_checker.h	/^    TimerEvent timer_;$/;"	m	class:ldd::net::PulseChecker
timer_	internal/pulse_emitter.h	/^    TimerEvent timer_;$/;"	m	class:ldd::net::PulseEmitter
timer_	ut/event_test.cc	/^    TimerEvent timer_;$/;"	m	class:MyTimerEvent	file:
timer_ev_	internal/event_impl.h	/^    struct event *timer_ev_;$/;"	m	class:ldd::net::SignalEvent::Impl	typeref:struct:ldd::net::SignalEvent::Impl::event
timer_ev_	internal/event_impl.h	/^    struct event *timer_ev_;$/;"	m	class:ldd::net::TimerEvent::Impl	typeref:struct:ldd::net::TimerEvent::Impl::event
timer_handler	test1/deadline_timer/main.cc	/^void timer_handler(const boost::system::error_code &error)$/;"	f
ts_	test/benchmark/client/omsg.h	/^    ldd::util::Timestamp ts_;$/;"	m	class:MyEmitMsg
type	channel.cc	/^Channel::Type Channel::type() const {$/;"	f	class:ldd::net::Channel
type	incoming_msg.h	/^    Type type() const { return kType; }$/;"	f	class:ldd::net::TypedIncomingMsg
type	incoming_msg.h	/^    Type type() const { return type_; }$/;"	f	class:ldd::net::DynamicIncomingMsg
type	internal/channel_impl.h	/^    virtual Type type() const { return Channel::kIncoming; }$/;"	f	class:ldd::net::IncomingChannel
type	internal/channel_impl.h	/^    virtual Type type() const { return Channel::kOutgoing; }$/;"	f	class:ldd::net::OutgoingChannel
type	internal/protocol.cc	/^uint8_t Header::Parser::type() const {$/;"	f	class:ldd::net::Header::Parser
type	outgoing_msg.h	/^    Type type() const { return kType; }$/;"	f	class:ldd::net::TypedOutgoingMsg
type	outgoing_msg.h	/^    Type type() const { return type_; }$/;"	f	class:ldd::net::DynamicOutgoingMsg
type_	incoming_msg.h	/^    Type type_;$/;"	m	class:ldd::net::DynamicIncomingMsg
type_	outgoing_msg.h	/^    Type type_;$/;"	m	class:ldd::net::DynamicOutgoingMsg
type_	result.h	/^    Type type_;$/;"	m	class:ldd::net::Result
ut_CXXFLAGS	ut/Makefile	/^ut_CXXFLAGS= -I ..\/..\/..\/$/;"	m
ut_LDFLAGS	ut/Makefile	/^ut_LDFLAGS = -L ..\/ -L ..\/..\/util$/;"	m
ut_LDLIBS	ut/Makefile	/^ut_LDLIBS  = -lgtest -lgtest_main -llddnet -llddutil$/;"	m
ut_RPATHS	ut/Makefile	/^ut_RPATHS  = ..\/$/;"	m
ut_SOURCES	ut/Makefile	/^ut_SOURCES = $(wildcard *.cc) $(wildcard *.c)$/;"	m
v4	address.h	/^        in_addr v4;$/;"	m	union:ldd::net::Address::__anon1
v6	address.h	/^        in6_addr v6;$/;"	m	union:ldd::net::Address::__anon1
wait_ms_	ut/event_test.cc	/^    uint64_t wait_ms_;$/;"	m	class:MyTimerEvent	file:
waiting_	internal/incoming_msg_impl.h	/^    bool waiting_;$/;"	m	class:ldd::net::IncomingMsg::Impl
work_func	ut/event_test.cc	/^void *TCPServer::work_func(void *arg)$/;"	f	class:TCPServer
worker	test1/deadline_timer/main.cc	/^void *worker(void *arg)$/;"	f
write_buffer_size	server.h	/^        int write_buffer_size;$/;"	m	struct:ldd::net::Server::Options
write_fd_	internal/event_loop_impl.h	/^    int &write_fd_;$/;"	m	class:ldd::net::EventLoop::Impl
write_task_	internal/channel_impl.h	/^    WriteTask write_task_;$/;"	m	class:ldd::net::Channel::Impl
writing_buffers_	internal/channel_impl.h	/^    std::deque<boost::shared_ptr<Buffer> > writing_buffers_;$/;"	m	class:ldd::net::Channel::Impl
writing_packets_	internal/channel_impl.h	/^    boost::ptr_vector<OutgoingPacket> writing_packets_;$/;"	m	class:ldd::net::Channel::Impl
x_	sample/a.cc	/^  int x_;$/;"	m	struct:B	file:
x_	sample/a.cc	/^  int x_;$/;"	m	struct:C	file:
x_accept	test1/client/x_socket.cc	/^int x_accept(int listen_fd, char *ip, int *port)$/;"	f
x_accept	test1/concurrency_connect/x_socket.cc	/^int x_accept(int listen_fd, char *ip, int *port)$/;"	f
x_accept	ut/x_socket.c	/^int x_accept(int listen_fd, char *ip, int *port)$/;"	f
x_close	test1/client/x_socket.cc	/^int x_close(int fd)$/;"	f
x_close	test1/concurrency_connect/x_socket.cc	/^int x_close(int fd)$/;"	f
x_close	ut/x_socket.c	/^int x_close(int fd)$/;"	f
x_create_tcp_client	test1/client/x_socket.cc	/^int x_create_tcp_client(const char *rip, int rport)$/;"	f
x_create_tcp_client	test1/concurrency_connect/x_socket.cc	/^int x_create_tcp_client(const char *rip, int rport)$/;"	f
x_create_tcp_client	ut/x_socket.c	/^int x_create_tcp_client(const char *rip, int rport)$/;"	f
x_create_tcp_server	test1/client/x_socket.cc	/^int x_create_tcp_server(const char *lip, int lport)$/;"	f
x_create_tcp_server	test1/concurrency_connect/x_socket.cc	/^int x_create_tcp_server(const char *lip, int lport)$/;"	f
x_create_tcp_server	ut/x_socket.c	/^int x_create_tcp_server(const char *lip, int lport)$/;"	f
x_recv	test1/client/x_socket.cc	/^int x_recv(int fd, char *buf, int len)$/;"	f
x_recv	test1/concurrency_connect/x_socket.cc	/^int x_recv(int fd, char *buf, int len)$/;"	f
x_recv	ut/x_socket.c	/^int x_recv(int fd, char *buf, int len)$/;"	f
x_recv_with_timeout	test1/client/x_socket.cc	/^int x_recv_with_timeout(int fd, char *buf, int len, int timeout)$/;"	f
x_recv_with_timeout	test1/concurrency_connect/x_socket.cc	/^int x_recv_with_timeout(int fd, char *buf, int len, int timeout)$/;"	f
x_recv_with_timeout	ut/x_socket.c	/^int x_recv_with_timeout(int fd, char *buf, int len, int timeout)$/;"	f
x_recvbytes	test1/client/x_socket.cc	/^int x_recvbytes(int fd, char *buf, int len)$/;"	f
x_recvbytes	test1/concurrency_connect/x_socket.cc	/^int x_recvbytes(int fd, char *buf, int len)$/;"	f
x_recvbytes	ut/x_socket.c	/^int x_recvbytes(int fd, char *buf, int len)$/;"	f
x_send	test1/client/x_socket.cc	/^int x_send(int fd, char *buf, int len)$/;"	f
x_send	test1/concurrency_connect/x_socket.cc	/^int x_send(int fd, char *buf, int len)$/;"	f
x_send	ut/x_socket.c	/^int x_send(int fd, char *buf, int len)$/;"	f
x_set_sock_default_opt	test1/client/x_socket.cc	/^void x_set_sock_default_opt(int s)$/;"	f
x_set_sock_default_opt	test1/concurrency_connect/x_socket.cc	/^void x_set_sock_default_opt(int s)$/;"	f
x_set_sock_default_opt	ut/x_socket.c	/^void x_set_sock_default_opt(int s)$/;"	f
x_set_sock_no_block	test1/client/x_socket.cc	/^int x_set_sock_no_block(int s)$/;"	f
x_set_sock_no_block	test1/concurrency_connect/x_socket.cc	/^int x_set_sock_no_block(int s)$/;"	f
x_set_sock_no_delay	test1/client/x_socket.cc	/^void x_set_sock_no_delay(int s)$/;"	f
x_set_sock_no_delay	test1/concurrency_connect/x_socket.cc	/^void x_set_sock_no_delay(int s)$/;"	f
x_set_sock_no_delay	ut/x_socket.c	/^void x_set_sock_no_delay(int s)$/;"	f
y_	sample/a.cc	/^  int y_;$/;"	m	struct:C	file:
~Buffer	buffer.cc	/^Buffer::~Buffer()$/;"	f	class:ldd::net::Buffer
~Channel	channel.cc	/^Channel::~Channel() {$/;"	f	class:ldd::net::Channel
~Client	client.cc	/^Client::~Client() {$/;"	f	class:ldd::net::Client
~DnsCtx	internal/channel_impl.h	/^    ~DnsCtx() {$/;"	f	class:ldd::net::DnsCtx
~DynamicIncomingMsg	incoming_msg.cc	/^DynamicIncomingMsg::~DynamicIncomingMsg()$/;"	f	class:ldd::net::DynamicIncomingMsg
~DynamicOutgoingMsg	outgoing_msg.cc	/^DynamicOutgoingMsg::~DynamicOutgoingMsg()$/;"	f	class:ldd::net::DynamicOutgoingMsg
~EventCtx	internal/channel_impl.h	/^    ~EventCtx() {$/;"	f	class:ldd::net::EventCtx
~EventLoop	event_loop.cc	/^EventLoop::~EventLoop() {$/;"	f	class:ldd::net::EventLoop
~EventLoopThread	event_loop.cc	/^EventLoopThread::~EventLoopThread() {$/;"	f	class:ldd::net::EventLoopThread
~EventLoopThreadPool	event_loop_thread_pool.cc	/^EventLoopThreadPool::~EventLoopThreadPool()$/;"	f	class:ldd::net::EventLoopThreadPool
~Factory	factory.h	/^    virtual ~Factory() {}$/;"	f	struct:ldd::net::Factory
~Factory	sample/a.h	/^    virtual ~Factory() {}$/;"	f	struct:Factory
~FdEvent	event.cc	/^FdEvent::~FdEvent() {$/;"	f	class:ldd::net::FdEvent
~Impl	internal/channel_impl.cc	/^Channel::Impl::~Impl() {$/;"	f	class:ldd::net::Channel::Impl
~Impl	internal/event_impl.cc	/^FdEvent::Impl::~Impl() {$/;"	f	class:ldd::net::FdEvent::Impl
~Impl	internal/event_impl.cc	/^SignalEvent::Impl::~Impl()$/;"	f	class:ldd::net::SignalEvent::Impl
~Impl	internal/event_impl.cc	/^TimerEvent::Impl::~Impl() {$/;"	f	class:ldd::net::TimerEvent::Impl
~Impl	internal/event_loop_impl.cc	/^EventLoop::Impl::~Impl()$/;"	f	class:ldd::net::EventLoop::Impl
~Impl	internal/incoming_msg_impl.cc	/^IncomingMsg::Impl::~Impl() {$/;"	f	class:ldd::net::IncomingMsg::Impl
~Impl	internal/listener_impl.cc	/^Listener::Impl::~Impl() {$/;"	f	class:ldd::net::Listener::Impl
~Impl	internal/outgoing_msg_impl.h	/^    ~Impl() {$/;"	f	class:ldd::net::OutgoingMsg::Impl
~Impl	internal/server_impl.cc	/^Server::Impl::~Impl() {$/;"	f	class:ldd::net::Server::Impl
~IncomingChannel	internal/channel_impl.cc	/^IncomingChannel::~IncomingChannel() {$/;"	f	class:ldd::net::IncomingChannel
~IncomingMsg	incoming_msg.cc	/^IncomingMsg::~IncomingMsg() {$/;"	f	class:ldd::net::IncomingMsg
~IncomingMsgRegistry	incoming_msg_registry.h	/^    virtual ~IncomingMsgRegistry() { delete default_; }$/;"	f	class:ldd::net::IncomingMsgRegistry
~IncomingPacket	internal/incoming_packet.cc	/^IncomingPacket::~IncomingPacket() {$/;"	f	class:ldd::net::IncomingPacket
~Listener	listener.cc	/^Listener::~Listener() {$/;"	f	class:ldd::net::Listener
~Msg	sample/a.h	/^    virtual ~Msg() {}$/;"	f	struct:Msg
~MyEmitMsg	test/benchmark/client/omsg.cc	/^MyEmitMsg::~MyEmitMsg()$/;"	f	class:MyEmitMsg
~MyEventLoop	ut/event_loop_test.cc	/^    ~MyEventLoop() {}$/;"	f	class:MyEventLoop
~MyEventLoopThread	ut/event_loop_test.cc	/^    ~MyEventLoopThread() {}$/;"	f	class:MyEventLoopThread
~MyEventLoopThreadPool	ut/event_loop_test.cc	/^    ~MyEventLoopThreadPool() {}$/;"	f	class:MyEventLoopThreadPool
~MyFdEvent	ut/event_test.cc	/^    ~MyFdEvent() {}$/;"	f	class:MyFdEvent
~MyLddNet	ut/my_lddnet.h	/^    ~MyLddNet() {}$/;"	f	class:MyLddNet
~MySignalEvent	ut/event_test.cc	/^    ~MySignalEvent() {}$/;"	f	class:MySignalEvent
~MyTimerEvent	ut/event_test.cc	/^    ~MyTimerEvent() {}$/;"	f	class:MyTimerEvent
~OutgoingChannel	internal/channel_impl.cc	/^OutgoingChannel::~OutgoingChannel() {$/;"	f	class:ldd::net::OutgoingChannel
~OutgoingMsg	outgoing_msg.cc	/^OutgoingMsg::~OutgoingMsg() {$/;"	f	class:ldd::net::OutgoingMsg
~OutgoingPacket	internal/outgoing_packet.h	/^    virtual ~OutgoingPacket() {}$/;"	f	class:ldd::net::OutgoingPacket
~Payload	payload.cc	/^Payload::~Payload()$/;"	f	class:ldd::net::Payload
~PulseChecker	internal/pulse_checker.h	/^    virtual ~PulseChecker() {}$/;"	f	class:ldd::net::PulseChecker
~PulseEmitter	internal/pulse_emitter.cc	/^PulseEmitter::~PulseEmitter() {$/;"	f	class:ldd::net::PulseEmitter
~Registry	registry.h	/^inline Registry<T, Tag>::~Registry() {$/;"	f	class:ldd::net::Registry
~Server	server.cc	/^Server::~Server() {$/;"	f	class:ldd::net::Server
~SignalEvent	event.cc	/^SignalEvent::~SignalEvent() {$/;"	f	class:ldd::net::SignalEvent
~Stat	stat.h	/^    ~Stat() {}$/;"	f	class:ldd::net::Stat
~TCPClient	ut/event_test.cc	/^    ~TCPClient() { Close(); }$/;"	f	class:TCPClient
~TCPServer	ut/event_test.cc	/^    ~TCPServer() {}$/;"	f	class:TCPServer
~Task	internal/task.cc	/^Task::~Task()$/;"	f	class:ldd::net::Task
~TimerEvent	event.cc	/^TimerEvent::~TimerEvent() {$/;"	f	class:ldd::net::TimerEvent
