#ifndef LDD_NET_DOWNSTREAM_H_
#define LDD_NET_DOWNSTREAM_H_

#include "ldd/net/channel.h"
#include "ldd/net/incoming_msg_registry.h"

namespace ldd { namespace net {

class EventRunner;
class EventRunnerGroup;


class DownStream : public IncomingMsgRegistry {
public:
    struct Option {
        /*
         * (1),listen_port, 监听端口，必须指定
         * (2),heartbeat, 心跳间隔，单位毫秒ms, 默认为10000 ms
         * (3),use_accept_mutex, accept时锁，多进程时使用，默认为false
         * (4),lock_file_name, accept文件锁文件名，默认为"downstream_lock"
         * (5),accept_delay, accept等待延迟，多进程环境，
         *     竞争不到锁时的延迟时间，单位ms，默认为10ms
         *
         * */
        Option()
            : listen_port(-1)
            , heartbeat(100000)
            , use_accept_lock(false)
            , lock_file_name("downstream_lock")
            , accept_delay(500) {}
        ~Option() {}

        int listen_port;
        uint32_t heartbeat;
        bool use_accept_lock;
        std::string lock_file_name;
        uint32_t accept_delay;
    };

    DownStream(EventRunner* event_runner
            , ChannelHandler chanel_handler
            , const Option &option);

    DownStream(EventRunner *listen_event_runner
            , EventRunnerGroup *work_event_runner_group
            , ChannelHandler channel_handler
            , const Option &option);

    ~DownStream();

    bool Init();
    void Open();
    void Close();

private:
    class Impl;
    Impl *impl_;
};

} /*namespace net*/
} /*namespace ldd*/

#endif // LDD_NET_DOWNSTREAM_H_
