// event_runner.cc (2013-07-01)
// Yan Gaofeng (yangaofeng@360.cn)

#include "event_runner.h"
#include "ldd/net/internal/event_runner_impl.h"

namespace ldd { namespace net {

EventRunner* EventRunner::NewInplaceEventRunner()
{
    EventRunner* runner = new EventRunner();
    runner->impl_ = new Impl::InplaceEventRunner();
    return runner;
}

EventRunner* EventRunner::NewThreadedEventRunner()
{
    EventRunner* runner = new EventRunner();
    runner->impl_ = new Impl::ThreadedEventRunner();
    return runner;
}

EventRunner::~EventRunner() {
    delete impl_;
}

Event* EventRunner::NewEvent(int fd, const EventHandler& handler) {
    return impl_->NewEvent(fd, handler);
}

void EventRunner::Post(const UserHandler &func) {
    impl_->Post(func);
}
void EventRunner::Dispatch(const UserHandler &func) {
    impl_->Dispatch(func);
}

TimerId EventRunner::RunAt(const uint64_t us, const UserHandler &func) {
    return impl_->RunAt(us, func);
}
TimerId EventRunner::RunAfter(const uint64_t delay, const UserHandler &func) {
    return impl_->RunAfter(delay, func);
}
TimerId EventRunner::RunEvery(const uint64_t interval , const UserHandler &func) {
    return impl_->RunEvery(interval, func);
}

void EventRunner::DeleteTimer(TimerId timer_id)
{
    return impl_->DeleteTimer(timer_id);
}

bool EventRunner::Start() {
    return impl_->Start();
}
void EventRunner::Stop() {
    impl_->Stop();
}

void EventRunner::AfterFork() {
    impl_->AfterFork();
}

EventRunnerGroup* EventRunnerGroup::NewEventRunnerGroup(int runner_count)
{
    return new EventRunnerGroupImpl(runner_count);
}

} /*net*/
} /*ldd*/

