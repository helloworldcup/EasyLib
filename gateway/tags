!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddChannel	service.cc	/^void Service::AddChannel(const boost::shared_ptr<ldd::net::Channel> &channel)$/;"	f	class:lcs::gateway::Service
AddNewUser	ship.cc	/^void Ship::AddNewUser(const boost::shared_ptr<User> &user)$/;"	f	class:lcs::gateway::Ship
AddNode	config.cc	/^void Config::AddNode(const Node &node)$/;"	f	class:lcs::gateway::Config
AddNode	gateway_module.cc	/^void GateWayModule::AddNode(const Node &node)$/;"	f	class:lcs::gateway::GateWayModule
AddNode	ship.cc	/^void Ship::AddNode(const Node &node)$/;"	f	class:lcs::gateway::Ship
AddOldUser	ship.cc	/^void Ship::AddOldUser(const boost::shared_ptr<User> &user)$/;"	f	class:lcs::gateway::Ship
AddProtocol	config.cc	/^void Config::AddProtocol(const std::string &name)$/;"	f	class:lcs::gateway::Config
AddUser	ship.cc	/^bool Ship::AddUser(const boost::shared_ptr<ldd::net::Channel> channel)$/;"	f	class:lcs::gateway::Ship
Broadcast	ship.cc	/^void Ship::Broadcast(const boost::shared_ptr<PushMsg> &push_msg)$/;"	f	class:lcs::gateway::Ship
BroadcastOperation	ship.h	/^    BroadcastOperation() : user_(NULL) {}$/;"	f	struct:lcs::gateway::BroadcastOperation
BroadcastOperation	ship.h	/^struct BroadcastOperation {$/;"	s	namespace:lcs::gateway
CLEAN	Makefile	/^CLEAN = $/;"	m
CLI_LOGIN_MSG	default_msg.h	15;"	d
CLI_SCONF_MSG	default_msg.h	16;"	d
Cancel	default_msg.cc	/^void DefaultMsg::Cancel() {$/;"	f	class:lcs::gateway::DefaultMsg
CancelFirstPacketTimer	user.cc	/^void User::CancelFirstPacketTimer()$/;"	f	class:lcs::gateway::User
ChannelEqual	service.cc	/^bool Service::ChannelEqual(const boost::shared_ptr<ldd::net::Channel> channel$/;"	f	class:lcs::gateway::Service
ChannelStatDesc	user.cc	/^std::string User::ChannelStatDesc(int stat)$/;"	f	class:lcs::gateway::User
CheckProtocol	config.cc	/^void Config::CheckProtocol(const std::vector<std::string> &protocols)$/;"	f	class:lcs::gateway::Config
CheckServiceNode	config.cc	/^void Config::CheckServiceNode(const std::string &service_name$/;"	f	class:lcs::gateway::Config
CheckServices	config.cc	/^void Config::CheckServices(const std::vector<std::string> &services)$/;"	f	class:lcs::gateway::Config
CheckUserCount	ship.cc	/^void Ship::CheckUserCount()$/;"	f	class:lcs::gateway::Ship
Code	error_code.h	/^typedef uint32_t Code;$/;"	t	namespace:lcs::gateway
Config	config.cc	/^Config::Config(const option::Test &option)$/;"	f	class:lcs::gateway::Config
Config	config.cc	/^Config::Config(const option::Zookeeper &option$/;"	f	class:lcs::gateway::Config
Config	config.h	/^class Config {$/;"	c	namespace:lcs::gateway
ConstructTestInfo	config.cc	/^void Config::ConstructTestInfo()$/;"	f	class:lcs::gateway::Config
ConvertProtocolToInt	config.cc	/^int Config::ConvertProtocolToInt(const std::string &protocol)$/;"	f	class:lcs::gateway::Config
CreateSelf	config.cc	/^void Config::CreateSelf()$/;"	f	class:lcs::gateway::Config
CurrentUsers	ship.cc	/^uint64_t Ship::CurrentUsers()$/;"	f	class:lcs::gateway::Ship
DEBUGING	Makefile	/^DEBUGING = -DDEBUG # Comment this line for non-debugging code$/;"	m
DecOp	config.cc	/^void Config::DecOp()$/;"	f	class:lcs::gateway::Config
DecServers	gateway_module.cc	/^void GateWayModule::DecServers()$/;"	f	class:lcs::gateway::GateWayModule
DecUsers	gateway_module.cc	/^void GateWayModule::DecUsers()$/;"	f	class:lcs::gateway::GateWayModule
DefaultMsg	default_msg.cc	/^DefaultMsg::DefaultMsg(GateWayModule *gateway) $/;"	f	class:lcs::gateway::DefaultMsg
DefaultMsg	default_msg.h	/^class DefaultMsg : public ldd::net::DynamicIncomingMsg {$/;"	c	namespace:lcs::gateway
DelNode	config.cc	/^void Config::DelNode(const std::string &node_path)$/;"	f	class:lcs::gateway::Config
DelProtocol	config.cc	/^void Config::DelProtocol(const std::string &name)$/;"	f	class:lcs::gateway::Config
DeleteSelf	config.cc	/^void Config::DeleteSelf()$/;"	f	class:lcs::gateway::Config
DoBroadcast	ship.cc	/^void Ship::DoBroadcast(boost::shared_ptr<BroadcastOperation> &push)$/;"	f	class:lcs::gateway::Ship
DoMulticast	ship.cc	/^void Ship::DoMulticast(boost::shared_ptr<MulticastOperation> &multicast)$/;"	f	class:lcs::gateway::Ship
DoSessionOperation	ship.cc	/^void Ship::DoSessionOperation(boost::shared_ptr<SessionOperation> &sess_op)$/;"	f	class:lcs::gateway::Ship
Done	default_msg.cc	/^void DefaultMsg::Done(Code* code)$/;"	f	class:lcs::gateway::DefaultMsg
Done	default_msg.cc	/^void ToServer::Done(const Result& result)$/;"	f	class:lcs::gateway::ToServer
Done	push_msg.cc	/^void PushMsg::Done(Code* code)$/;"	f	class:lcs::gateway::PushMsg
Done	push_msg.cc	/^void ToClient::Done(const Result& result)$/;"	f	class:lcs::gateway::ToClient
Done	session_msg.cc	/^void ToSession::Done(const Result& result)$/;"	f	class:lcs::gateway::ToSession
Emit	default_msg.cc	/^void DefaultMsg::Emit(Payload* response, Action* next)$/;"	f	class:lcs::gateway::DefaultMsg
Emit	push_msg.cc	/^void PushMsg::Emit(Payload* response, Action* next)$/;"	f	class:lcs::gateway::PushMsg
ErrorCode	error_code.h	/^    ErrorCode() : code_(ErrorCode::kOk) {}$/;"	f	class:lcs::gateway::ErrorCode
ErrorCode	error_code.h	/^    ErrorCode(Code code) : code_(code) {}$/;"	f	class:lcs::gateway::ErrorCode
ErrorCode	error_code.h	/^class ErrorCode {$/;"	c	namespace:lcs::gateway
FieldV	error_code.h	/^    static ErrorCode FieldV() { return ErrorCode(kFieldV); }$/;"	f	class:lcs::gateway::ErrorCode
FirstLogin	error_code.h	/^    static ErrorCode FirstLogin() { return ErrorCode(kFirstLogin); }$/;"	f	class:lcs::gateway::ErrorCode
FirstPacketTimeoutHandler	user.cc	/^void User::FirstPacketTimeoutHandler()$/;"	f	class:lcs::gateway::User
GateWayModule	gateway_module.cc	/^GateWayModule::GateWayModule()$/;"	f	class:lcs::gateway::GateWayModule
GateWayModule	gateway_module.h	/^class GateWayModule: public ldd::skel::SimpleModule {$/;"	c	namespace:lcs::gateway
Gateway	options.h	/^    Gateway() : $/;"	f	struct:lcs::gateway::option::Gateway
Gateway	options.h	/^struct Gateway$/;"	s	namespace:lcs::gateway::option
GetChannel	service.cc	/^boost::shared_ptr<ldd::net::Channel> Service::GetChannel()$/;"	f	class:lcs::gateway::Service
GetInstance	config.cc	/^Config *Config::GetInstance(const option::Test &option)$/;"	f	class:lcs::gateway::Config
GetInstance	config.cc	/^Config *Config::GetInstance(const option::Zookeeper &option$/;"	f	class:lcs::gateway::Config
GetNode	config.cc	/^void Config::GetNode(const std::string &service_name$/;"	f	class:lcs::gateway::Config
GetProtocolValue	config.cc	/^void Config::GetProtocolValue(const std::string &name)$/;"	f	class:lcs::gateway::Config
GetServer	ship.cc	/^boost::shared_ptr<ldd::net::Channel> Ship::GetServer(int msg_type, size_t *size)$/;"	f	class:lcs::gateway::Ship
GetUser	ship.cc	/^boost::shared_ptr<User> Ship::GetUser(uint32_t ip, uint16_t port)$/;"	f	class:lcs::gateway::Ship
HtmlStatus	gateway_module.cc	/^void GateWayModule::HtmlStatus($/;"	f	class:lcs::gateway::GateWayModule
IncOp	config.cc	/^void Config::IncOp()$/;"	f	class:lcs::gateway::Config
IncRequest	gateway_module.cc	/^void GateWayModule::IncRequest()$/;"	f	class:lcs::gateway::GateWayModule
IncServers	gateway_module.cc	/^void GateWayModule::IncServers()$/;"	f	class:lcs::gateway::GateWayModule
IncUsers	gateway_module.cc	/^void GateWayModule::IncUsers()$/;"	f	class:lcs::gateway::GateWayModule
Init	config.cc	/^bool Config::Init(const NodeNotifier &node_notifier$/;"	f	class:lcs::gateway::Config
Init	default_msg.cc	/^bool ToServer::Init(Payload* request,$/;"	f	class:lcs::gateway::ToServer
Init	default_msg.cc	/^void DefaultMsg::Init(const Payload& request, Action* next)$/;"	f	class:lcs::gateway::DefaultMsg
Init	options.cc	/^bool Gateway::Init(ldd::skel::SimpleModule::ModuleCtx* ctx)$/;"	f	class:lcs::gateway::option::Gateway
Init	options.cc	/^bool Push::Init(ldd::skel::SimpleModule::ModuleCtx* ctx)$/;"	f	class:lcs::gateway::option::Push
Init	options.cc	/^bool Server::Init(ldd::skel::SimpleModule::ModuleCtx* ctx)$/;"	f	class:lcs::gateway::option::Server
Init	options.cc	/^bool Session::Init(ldd::skel::SimpleModule::ModuleCtx* ctx)$/;"	f	class:lcs::gateway::option::Session
Init	options.cc	/^bool Test::Init(ldd::skel::SimpleModule::ModuleCtx* ctx)$/;"	f	class:lcs::gateway::option::Test
Init	options.cc	/^bool User::Init(ldd::skel::SimpleModule::ModuleCtx* ctx)$/;"	f	class:lcs::gateway::option::User
Init	options.cc	/^bool Zookeeper::Init(ldd::skel::SimpleModule::ModuleCtx* ctx)$/;"	f	class:lcs::gateway::option::Zookeeper
Init	push_msg.cc	/^bool ToClient::Init(Payload* request,$/;"	f	class:lcs::gateway::ToClient
Init	push_msg.cc	/^void PushMsg::Init(const Payload& request, Action* next)$/;"	f	class:lcs::gateway::PushMsg
Init	session_msg.cc	/^bool ToSession::Init(Payload* request,$/;"	f	class:lcs::gateway::ToSession
InitIpLocateQuery	gateway_module.cc	/^bool GateWayModule::InitIpLocateQuery() {$/;"	f	class:lcs::gateway::GateWayModule
InitModule	gateway_module.cc	/^bool GateWayModule::InitModule(ModuleCtx* ctx)$/;"	f	class:lcs::gateway::GateWayModule
InitOption	gateway_module.cc	/^bool GateWayModule::InitOption()$/;"	f	class:lcs::gateway::GateWayModule
InitQlog	gateway_module.cc	/^bool GateWayModule::InitQlog()$/;"	f	class:lcs::gateway::GateWayModule
InitServer	gateway_module.cc	/^bool GateWayModule::InitServer()$/;"	f	class:lcs::gateway::GateWayModule
InitShip	gateway_module.cc	/^bool GateWayModule::InitShip()$/;"	f	class:lcs::gateway::GateWayModule
InitZookeeper	gateway_module.cc	/^bool GateWayModule::InitZookeeper()$/;"	f	class:lcs::gateway::GateWayModule
IsComplete	config.h	/^    bool IsComplete() { return op_ == 0; }$/;"	f	class:lcs::gateway::Config
IsFieldV	error_code.h	/^    bool IsFieldV() { return kFieldV == code_; }$/;"	f	class:lcs::gateway::ErrorCode
IsFirstLogin	error_code.h	/^    bool IsFirstLogin() { return kFirstLogin == code_; }$/;"	f	class:lcs::gateway::ErrorCode
IsMessageType	error_code.h	/^    bool IsMessageType() { return kMessageType == code_; }$/;"	f	class:lcs::gateway::ErrorCode
IsOk	error_code.h	/^    bool IsOk() { return code_ == kOk; }$/;"	f	class:lcs::gateway::ErrorCode
IsParseIni	error_code.h	/^    bool IsParseIni() { return kParseIni == code_; }$/;"	f	class:lcs::gateway::ErrorCode
IsReqeust	error_code.h	/^    bool IsReqeust() { return code_ == kRequest; }$/;"	f	class:lcs::gateway::ErrorCode
IsSecondSconf	error_code.h	/^    bool IsSecondSconf() { return kSecondSconf == code_; }$/;"	f	class:lcs::gateway::ErrorCode
IsServer	error_code.h	/^    bool IsServer() { return kServer == code_; }$/;"	f	class:lcs::gateway::ErrorCode
IsServerTimerout	error_code.h	/^    bool IsServerTimerout() { return kServerTimeout == code_; }$/;"	f	class:lcs::gateway::ErrorCode
IsTooManyUser	error_code.h	/^    bool IsTooManyUser() { return kTooManyUser == code_; }$/;"	f	class:lcs::gateway::ErrorCode
IsUserConnectLimit	error_code.h	/^    bool IsUserConnectLimit() { return kUserConnectLimit == code_; }$/;"	f	class:lcs::gateway::ErrorCode
IsUserRequestLimit	error_code.h	/^    bool IsUserRequestLimit() { return kUserRequestLimit == code_; }$/;"	f	class:lcs::gateway::ErrorCode
IsValidProtocol	gateway_module.cc	/^bool GateWayModule::IsValidProtocol(int protocol)$/;"	f	class:lcs::gateway::GateWayModule
JsonToNode	config.cc	/^bool Config::JsonToNode(const std::string &json, Node *node)$/;"	f	class:lcs::gateway::Config
LCS_GATEWAY	config.cc	/^const char *LCS_GATEWAY = "\/gateway";$/;"	m	namespace:lcs::gateway	file:
LCS_GATEWAY_SHIP_H_	ship.h	5;"	d
LCS_PROTOCOLS	config.cc	/^const char *LCS_PROTOCOLS = "\/protocols";$/;"	m	namespace:lcs::gateway	file:
LCS_SERVICES	config.cc	/^const char *LCS_SERVICES = "\/services";$/;"	m	namespace:lcs::gateway	file:
LOGIN_FIRST_STEP	user.h	23;"	d
LOGIN_OTHER_STEP	user.h	26;"	d
LOGIN_SECOND_STEP	user.h	24;"	d
LOGIN_THIRD_STEP	user.h	25;"	d
MessageType	error_code.h	/^    static ErrorCode MessageType() { return ErrorCode(kMessageType); }$/;"	f	class:lcs::gateway::ErrorCode
Multicast	ship.cc	/^void Ship::Multicast(const boost::shared_ptr<PushMsg> &push_msg)$/;"	f	class:lcs::gateway::Ship
MulticastOperation	ship.h	/^    MulticastOperation() : index_(0) {}$/;"	f	struct:lcs::gateway::MulticastOperation
MulticastOperation	ship.h	/^struct MulticastOperation {$/;"	s	namespace:lcs::gateway
Node	config.h	/^    Node(const std::string &node_path$/;"	f	struct:lcs::gateway::Node
Node	config.h	/^struct Node {$/;"	s	namespace:lcs::gateway
NodeIt	config.h	/^    typedef std::map<std::string, std::vector<std::string> >::iterator NodeIt;$/;"	t	class:lcs::gateway::Config
NodeIt	ship.h	/^typedef std::map<std::string, std::list<Node> >::iterator NodeIt;$/;"	t	namespace:lcs::gateway
NodeNotifier	config.h	/^    typedef boost::function<void(OP op, const Node &)> NodeNotifier;$/;"	t	class:lcs::gateway::Config
NodeNotifier	gateway_module.cc	/^void GateWayModule::NodeNotifier(OP op$/;"	f	class:lcs::gateway::GateWayModule
NodeWatcher	config.cc	/^void Config::NodeWatcher(const NodeEvent &node_event)$/;"	f	class:lcs::gateway::Config
NotifyCage	config.cc	/^void NotifyCage(const CageState& state$/;"	f	namespace:lcs::gateway
OP	config.h	/^enum OP {$/;"	g	namespace:lcs::gateway
OPTIMIZE	Makefile	/^OPTIMIZE = -DH_USING_PB3 # Comment this line for optimized(-O3) code$/;"	m
OUTPUT_DIR	proto/Makefile	/^OUTPUT_DIR=$(shell pwd)$/;"	m
OUTPUT_DIR	proto/bakup_proto3/Makefile	/^OUTPUT_DIR=$(shell pwd)$/;"	m
Ok	error_code.h	/^    static ErrorCode Ok() { return ErrorCode(); }$/;"	f	class:lcs::gateway::ErrorCode
OnCreated	config.cc	/^void Config::OnCreated(const ldd::cage::CreateResult& result)$/;"	f	class:lcs::gateway::Config
OnDeleteSelf	config.cc	/^void Config::OnDeleteSelf(const DeleteResult &result)$/;"	f	class:lcs::gateway::Config
OnNode	config.cc	/^void Config::OnNode(const std::string &service_name$/;"	f	class:lcs::gateway::Config
OnProtocol	config.cc	/^void Config::OnProtocol(const std::string &path$/;"	f	class:lcs::gateway::Config
OnProtocolValue	config.cc	/^void Config::OnProtocolValue(const std::string &name$/;"	f	class:lcs::gateway::Config
OnSelfExists	config.cc	/^void Config::OnSelfExists(const ExistsResult &result)$/;"	f	class:lcs::gateway::Config
OnServices	config.cc	/^void Config::OnServices(const std::string &path$/;"	f	class:lcs::gateway::Config
OnServicesChild	config.cc	/^void Config::OnServicesChild(const std::string &name$/;"	f	class:lcs::gateway::Config
OnZookeeperSessionExpire	gateway_module.cc	/^void GateWayModule::OnZookeeperSessionExpire()$/;"	f	class:lcs::gateway::GateWayModule
OnZookeeperTimer	gateway_module.cc	/^void GateWayModule::OnZookeeperTimer()$/;"	f	class:lcs::gateway::GateWayModule
PB2_OUTPUT_DIR	proto/Makefile	/^PB2_OUTPUT_DIR=$(shell pwd)\/pb2_output$/;"	m
PB2_PROTOS	proto/Makefile	/^PB2_PROTOS := $(wildcard *.proto)$/;"	m
PB2_SRCS	proto/Makefile	/^PB2_SRCS   := $(patsubst %.proto, $(PB2_OUTPUT_DIR)\/%.pb.cc, $(PB2_PROTOS)) $(patsubst %.proto, $(PB2_OUTPUT_DIR)\/%_pb2.py, $(PB2_PROTOS))$/;"	m
PB3_OUTPUT_DIR	proto/Makefile	/^PB3_OUTPUT_DIR=$(shell pwd)$/;"	m
PB3_PROTOS	proto/Makefile	/^PB3_PROTOS := $(wildcard *.proto)$/;"	m
PB3_SRCS	proto/Makefile	/^PB3_SRCS   := $(patsubst %.proto, $(PB3_OUTPUT_DIR)\/%.pb.cc, $(PB3_PROTOS)) $(patsubst %.proto, $(PB3_OUTPUT_DIR)\/%_pb2.py, $(PB3_PROTOS))$/;"	m
PROTOC	proto/Makefile	/^PROTOC := \/home\/s\/safe\/bin\/protoc3$/;"	m
PROTOS	proto/bakup_proto3/Makefile	/^PROTOS := $(wildcard *.proto)$/;"	m
ParseIni	error_code.h	/^    static ErrorCode ParseIni() { return ErrorCode(kParseIni); }$/;"	f	class:lcs::gateway::ErrorCode
PrintMsgDetail	push_msg.cc	/^void PushMsg::PrintMsgDetail()$/;"	f	class:lcs::gateway::PushMsg
ProcessServerError	default_msg.cc	/^void ToServer::ProcessServerError(int ec)$/;"	f	class:lcs::gateway::ToServer
ProtocolNotifier	config.h	/^    typedef boost::function<void(OP op, int protocol)> ProtocolNotifier;$/;"	t	class:lcs::gateway::Config
ProtocolNotifier	gateway_module.cc	/^void GateWayModule::ProtocolNotifier(OP op, int protocol)$/;"	f	class:lcs::gateway::GateWayModule
ProtocolValueWatcher	config.cc	/^void Config::ProtocolValueWatcher(const std::string &name$/;"	f	class:lcs::gateway::Config
ProtocolWatcher	config.cc	/^void Config::ProtocolWatcher(const ChildEvent& child_event)$/;"	f	class:lcs::gateway::Config
Push	options.h	/^    Push() :$/;"	f	struct:lcs::gateway::option::Push
Push	options.h	/^struct Push$/;"	s	namespace:lcs::gateway::option
PushMsg	push_msg.cc	/^PushMsg::PushMsg(GateWayModule *gateway, Ship *ship) $/;"	f	class:lcs::gateway::PushMsg
PushMsg	push_msg.h	/^class PushMsg : public ldd::net::DynamicIncomingMsg {$/;"	c	namespace:lcs::gateway
PushMsgToUser	push_msg.cc	/^void PushMsg::PushMsgToUser(User *user)$/;"	f	class:lcs::gateway::PushMsg
QpollerStatus	gateway_module.cc	/^void GateWayModule::QpollerStatus($/;"	f	class:lcs::gateway::GateWayModule
ROOT	Makefile	/^ROOT = .$/;"	m
RandomAdvance	service.cc	/^int Service::RandomAdvance()$/;"	f	class:lcs::gateway::Service
ReCreateSelf	config.cc	/^void Config::ReCreateSelf()$/;"	f	class:lcs::gateway::Config
RecordPushSessionInfo	ship.cc	/^void Ship::RecordPushSessionInfo(const boost::shared_ptr<ldd::net::Channel> &channel, lcs::srv::Sessions& sessions) {$/;"	f	class:lcs::gateway::Ship
RecordSucPushMsg	push_msg.cc	/^void PushMsg::RecordSucPushMsg(User *user) {$/;"	f	class:lcs::gateway::PushMsg
Recv	default_msg.cc	/^bool ToServer::Recv(const Payload& response,$/;"	f	class:lcs::gateway::ToServer
Recv	push_msg.cc	/^bool ToClient::Recv(const Payload& response,$/;"	f	class:lcs::gateway::ToClient
Recv	session_msg.cc	/^bool ToSession::Recv(const Payload& response,$/;"	f	class:lcs::gateway::ToSession
RegisterSelf	config.cc	/^void Config::RegisterSelf()$/;"	f	class:lcs::gateway::Config
RemoveBroadcastOperation	ship.cc	/^void Ship::RemoveBroadcastOperation(const boost::shared_ptr<BroadcastOperation> &push)$/;"	f	class:lcs::gateway::Ship
RemoveChannel	service.cc	/^bool Service::RemoveChannel(const std::string &ip, int port)$/;"	f	class:lcs::gateway::Service
RemoveMulticastOperation	ship.cc	/^void Ship::RemoveMulticastOperation(const boost::shared_ptr<MulticastOperation> &multicast)$/;"	f	class:lcs::gateway::Ship
RemoveNode	gateway_module.cc	/^void GateWayModule::RemoveNode(const Node &node)$/;"	f	class:lcs::gateway::GateWayModule
RemoveNode	ship.cc	/^void Ship::RemoveNode(const Node &node)$/;"	f	class:lcs::gateway::Ship
RemoveSessionOperation	ship.cc	/^void Ship::RemoveSessionOperation(const boost::shared_ptr<SessionOperation> &sess)$/;"	f	class:lcs::gateway::Ship
RemoveUser	ship.cc	/^void Ship::RemoveUser(const boost::shared_ptr<ldd::net::Channel> &channel)$/;"	f	class:lcs::gateway::Ship
RepeatedClientID	push_msg.h	/^typedef ::google::protobuf::RepeatedPtrField<lcs::Channel::ClientID> RepeatedClientID;$/;"	t	namespace:lcs::gateway
Request	error_code.h	/^    static ErrorCode Request() { return ErrorCode(kRequest); }$/;"	f	class:lcs::gateway::ErrorCode
RequestHandler	gateway_module.cc	/^void GateWayModule::RequestHandler($/;"	f	class:lcs::gateway::GateWayModule
ResponseTimerHandler	push_msg.cc	/^void PushMsg::ResponseTimerHandler()$/;"	f	class:lcs::gateway::PushMsg
ReviseBroadcastOperation	ship.cc	/^void Ship::ReviseBroadcastOperation(User *user)$/;"	f	class:lcs::gateway::Ship
ReviseSessionOperation	ship.cc	/^void Ship::ReviseSessionOperation(User *user)$/;"	f	class:lcs::gateway::Ship
SRCS	proto/bakup_proto3/Makefile	/^SRCS   := $(patsubst %.proto, $(OUTPUT_DIR)\/%.pb.cc, $(PROTOS)) $(patsubst %.proto, $(OUTPUT_DIR)\/%_pb2.py, $(PROTOS))$/;"	m
SUBDIRS	Makefile	/^SUBDIRS = $/;"	m
SecondSconf	error_code.h	/^    static ErrorCode SecondSconf() { return ErrorCode(kSecondSconf); }$/;"	f	class:lcs::gateway::ErrorCode
SelfExists	config.cc	/^void Config::SelfExists()$/;"	f	class:lcs::gateway::Config
SelfExistsWatcher	config.cc	/^void Config::SelfExistsWatcher(const NodeEvent &node_event)$/;"	f	class:lcs::gateway::Config
SendBroadcast	push_msg.cc	/^void PushMsg::SendBroadcast()$/;"	f	class:lcs::gateway::PushMsg
SendMulticast	push_msg.cc	/^void PushMsg::SendMulticast(const Buffer &buff)$/;"	f	class:lcs::gateway::PushMsg
SendPushMsg	user.cc	/^ErrorCode User::SendPushMsg(const boost::shared_ptr<ldd::net::OutgoingMsg> &msg)$/;"	f	class:lcs::gateway::User
SendReq	user.cc	/^ErrorCode User::SendReq(const boost::shared_ptr<ldd::net::OutgoingMsg> &msg$/;"	f	class:lcs::gateway::User
SendRequest	default_msg.cc	/^bool DefaultMsg::SendRequest()$/;"	f	class:lcs::gateway::DefaultMsg
SendSession	ship.cc	/^bool Ship::SendSession(const std::string& msg_content, boost::shared_ptr<ldd::net::Channel> channel, int retried_times) {$/;"	f	class:lcs::gateway::Ship
SendUnicast	push_msg.cc	/^bool PushMsg::SendUnicast(const Buffer &buff)$/;"	f	class:lcs::gateway::PushMsg
SendUserInfo	ship.cc	/^void Ship::SendUserInfo()$/;"	f	class:lcs::gateway::Ship
SendUserOffLineInfo	ship.cc	/^void Ship::SendUserOffLineInfo() {$/;"	f	class:lcs::gateway::Ship
SendUserOnlineInfo	ship.cc	/^void Ship::SendUserOnlineInfo() {$/;"	f	class:lcs::gateway::Ship
Server	error_code.h	/^    static ErrorCode Server() { return ErrorCode(kServer); }$/;"	f	class:lcs::gateway::ErrorCode
Server	options.h	/^    Server() :$/;"	f	struct:lcs::gateway::option::Server
Server	options.h	/^struct Server$/;"	s	namespace:lcs::gateway::option
ServerClosed	ship.cc	/^void Ship::ServerClosed(const boost::shared_ptr<ldd::net::Channel>& channel)$/;"	f	class:lcs::gateway::Ship
ServerConnected	ship.cc	/^void Ship::ServerConnected(const boost::shared_ptr<ldd::net::Channel>& channel)$/;"	f	class:lcs::gateway::Ship
ServerTimeout	error_code.h	/^    static ErrorCode ServerTimeout() { return ErrorCode(kServerTimeout); }$/;"	f	class:lcs::gateway::ErrorCode
Service	service.cc	/^Service::Service(int protocol) : protocol_(protocol)$/;"	f	class:lcs::gateway::Service
Service	service.h	/^class Service {$/;"	c	namespace:lcs::gateway
ServiceIt	ship.h	/^typedef std::map<int, boost::shared_ptr<Service> >::iterator ServiceIt;$/;"	t	namespace:lcs::gateway
Services	gateway_module.cc	/^void GateWayModule::Services($/;"	f	class:lcs::gateway::GateWayModule
ServicesChildWatcher	config.cc	/^void Config::ServicesChildWatcher(const std::string &name$/;"	f	class:lcs::gateway::Config
ServicesJson	config.cc	/^std::string Config::ServicesJson()$/;"	f	class:lcs::gateway::Config
ServicesWatcher	config.cc	/^void Config::ServicesWatcher(const ChildEvent& child_event)$/;"	f	class:lcs::gateway::Config
Session	options.h	/^    Session() :$/;"	f	struct:lcs::gateway::option::Session
Session	options.h	/^struct Session$/;"	s	namespace:lcs::gateway::option
SessionExpireNotifier	config.h	/^typedef boost::function<void()> SessionExpireNotifier;$/;"	t	namespace:lcs::gateway
SessionExpired	config.cc	/^void Config::SessionExpired()$/;"	f	class:lcs::gateway::Config
SessionOperation	ship.h	/^    SessionOperation() {}$/;"	f	struct:lcs::gateway::SessionOperation
SessionOperation	ship.h	/^struct SessionOperation {$/;"	s	namespace:lcs::gateway
SessionTimerHandler	ship.cc	/^void Ship::SessionTimerHandler()$/;"	f	class:lcs::gateway::Ship
Ship	ship.cc	/^Ship::Ship(GateWayModule *gateway, ldd::net::EventLoop *event_loop) $/;"	f	class:lcs::gateway::Ship
Ship	ship.h	/^class Ship {$/;"	c	namespace:lcs::gateway
ShipIt	gateway_module.h	/^    typedef std::map<pthread_t,  boost::shared_ptr<Ship> >::iterator ShipIt;$/;"	t	class:lcs::gateway::GateWayModule
StartFirstPacketTimer	user.cc	/^void User::StartFirstPacketTimer()$/;"	f	class:lcs::gateway::User
StartHttp	gateway_module.cc	/^bool GateWayModule::StartHttp()$/;"	f	class:lcs::gateway::GateWayModule
StartResponseTimer	push_msg.cc	/^void PushMsg::StartResponseTimer()$/;"	f	class:lcs::gateway::PushMsg
StartRetryTimer	config.cc	/^void Config::StartRetryTimer()$/;"	f	class:lcs::gateway::Config
StartSessionTimer	ship.cc	/^void Ship::StartSessionTimer()$/;"	f	class:lcs::gateway::Ship
StartStatTimer	gateway_module.cc	/^void GateWayModule::StartStatTimer() {$/;"	f	class:lcs::gateway::GateWayModule
StartTimeCacheTimer	ship.cc	/^void Ship::StartTimeCacheTimer()$/;"	f	class:lcs::gateway::Ship
StartZookeeperTimer	gateway_module.cc	/^void GateWayModule::StartZookeeperTimer()$/;"	f	class:lcs::gateway::GateWayModule
StatInfo	gateway_module.cc	/^void GateWayModule::StatInfo()$/;"	f	class:lcs::gateway::GateWayModule
Status	gateway_module.cc	/^void GateWayModule::Status($/;"	f	class:lcs::gateway::GateWayModule
TARGETS	Makefile	/^TARGETS = lcs_gateway.so$/;"	m
TOPMK	Makefile	/^TOPMK=\/home\/s\/include\/topmk$/;"	m
Test	options.h	/^    Test() :$/;"	f	struct:lcs::gateway::option::Test
Test	options.h	/^struct Test$/;"	s	namespace:lcs::gateway::option
ToClient	push_msg.h	/^    explicit ToClient(const boost::shared_ptr<PushMsg>& push_msg$/;"	f	class:lcs::gateway::ToClient
ToClient	push_msg.h	/^class ToClient : public ldd::net::OutgoingMsg {$/;"	c	namespace:lcs::gateway
ToServer	default_msg.cc	/^ToServer::ToServer(const boost::shared_ptr<DefaultMsg>& default_msg) $/;"	f	class:lcs::gateway::ToServer
ToServer	default_msg.h	/^class ToServer : public ldd::net::DynamicOutgoingMsg {$/;"	c	namespace:lcs::gateway
ToSession	session_msg.h	/^    explicit ToSession(ldd::net::MessageType msg_type$/;"	f	class:lcs::gateway::ToSession
ToSession	session_msg.h	/^class ToSession: public ldd::net::OutgoingMsg {$/;"	c	namespace:lcs::gateway
ToString	error_code.cc	/^const std::string ErrorCode::ToString() const $/;"	f	class:lcs::gateway::ErrorCode
TooManyUser	error_code.h	/^    static ErrorCode TooManyUser() { return ErrorCode(kTooManyUser); }$/;"	f	class:lcs::gateway::ErrorCode
UpdateTimeCache	ship.cc	/^void Ship::UpdateTimeCache()$/;"	f	class:lcs::gateway::Ship
User	options.h	/^    User()$/;"	f	struct:lcs::gateway::option::User
User	options.h	/^struct User$/;"	s	namespace:lcs::gateway::option
User	user.cc	/^User::User(GateWayModule *gateway$/;"	f	class:lcs::gateway::User
User	user.h	/^class User : public boost::intrusive::list_base_hook<$/;"	c	namespace:lcs::gateway
UserClosed	gateway_module.cc	/^void GateWayModule::UserClosed(const boost::shared_ptr<ldd::net::Channel> &channel)$/;"	f	class:lcs::gateway::GateWayModule
UserConnectLimit	error_code.h	/^    static ErrorCode UserConnectLimit() { return ErrorCode(kUserConnectLimit); }$/;"	f	class:lcs::gateway::ErrorCode
UserConnected	gateway_module.cc	/^void GateWayModule::UserConnected(const boost::shared_ptr<ldd::net::Channel> &channel)$/;"	f	class:lcs::gateway::GateWayModule
UserInfo	ship.h	/^    UserInfo(uint32_t user_ip, uint16_t user_port, const std::string user_mid)$/;"	f	struct:lcs::gateway::UserInfo
UserInfo	ship.h	/^struct UserInfo {$/;"	s	namespace:lcs::gateway
UserIt	ship.h	/^typedef std::map<int, std::map<uint16_t, boost::shared_ptr<User> > >::iterator UserIt;$/;"	t	namespace:lcs::gateway
UserKey	ship.h	/^typedef std::pair<uint32_t, uint16_t> UserKey;$/;"	t	namespace:lcs::gateway
UserList	ship.h	/^typedef boost::intrusive::list<User, boost::intrusive::constant_time_size<false> > UserList;$/;"	t	namespace:lcs::gateway
UserMap	ship.h	/^typedef std::map<int, std::map<uint16_t, boost::shared_ptr<User> > > UserMap;$/;"	t	namespace:lcs::gateway
UserRequestLimit	error_code.h	/^    static ErrorCode UserRequestLimit() { return ErrorCode(kUserRequestLimit); }$/;"	f	class:lcs::gateway::ErrorCode
UserSessionMap	ship.h	/^typedef std::map<UserKey, std::string> UserSessionMap;$/;"	t	namespace:lcs::gateway
WatchProtocol	config.cc	/^void Config::WatchProtocol()$/;"	f	class:lcs::gateway::Config
WatchServices	config.cc	/^void Config::WatchServices()$/;"	f	class:lcs::gateway::Config
WatchServicesChild	config.cc	/^void Config::WatchServicesChild(const std::string &name)$/;"	f	class:lcs::gateway::Config
ZoneOrGrayLimit	ship.cc	/^bool Ship::ZoneOrGrayLimit(const boost::shared_ptr<BroadcastOperation> &push, User *user)const  {$/;"	f	class:lcs::gateway::Ship
Zookeeper	options.h	/^    Zookeeper() :$/;"	f	struct:lcs::gateway::option::Zookeeper
Zookeeper	options.h	/^struct Zookeeper$/;"	s	namespace:lcs::gateway::option
__ERROR_CODE_H__	error_code.h	5;"	d
__GATEWAY_MODULE_IMPL_H__	gateway_module.h	5;"	d
__OPTIONS_H__	options.h	5;"	d
__SERVICE_H__	service.h	5;"	d
__SESSION_MSG_H_	session_msg.h	4;"	d
__USER_H__	user.h	4;"	d
__ZK_CONFIG_IMPL_H__	config.h	4;"	d
__msg_content_H__	push_msg.h	5;"	d
broadcast_task_ids_	ship.h	/^    std::map<std::string, time_t> broadcast_task_ids_;$/;"	m	class:lcs::gateway::Ship
byond_connect_limit	user.h	/^    bool byond_connect_limit() const { $/;"	f	class:lcs::gateway::User
byond_user_connect_limit_	user.h	/^    bool byond_user_connect_limit_;$/;"	m	class:lcs::gateway::User
cage_	config.h	/^    boost::shared_ptr<ldd::cage::Cage> cage_;$/;"	m	class:lcs::gateway::Config
channel	user.h	/^    boost::shared_ptr<ldd::net::Channel> channel() { return channel_; }$/;"	f	class:lcs::gateway::User
channel_	ship.h	/^    boost::shared_ptr<ldd::net::Channel> channel_;$/;"	m	struct:lcs::gateway::SessionOperation
channel_	user.h	/^    boost::shared_ptr<ldd::net::Channel> channel_;$/;"	m	class:lcs::gateway::User
channel_name	default_msg.cc	/^std::string ToServer::channel_name()$/;"	f	class:lcs::gateway::ToServer
channel_name	push_msg.cc	/^std::string ToClient::channel_name()$/;"	f	class:lcs::gateway::ToClient
channel_name_	session_msg.h	/^    std::string channel_name_;$/;"	m	class:lcs::gateway::ToSession
channels_	service.h	/^    std::list<boost::shared_ptr<ldd::net::Channel> > channels_;$/;"	m	class:lcs::gateway::Service
cids	push_msg.h	/^    RepeatedClientID cids() { return push_.cids(); }$/;"	f	class:lcs::gateway::PushMsg
cids_size	push_msg.h	/^    int cids_size() { return push_user_count_; }$/;"	f	class:lcs::gateway::PushMsg
client_	ship.h	/^    boost::shared_ptr<ldd::net::Client> client_;$/;"	m	class:lcs::gateway::Ship
code	error_code.h	/^    Code code() { return code_; }$/;"	f	class:lcs::gateway::ErrorCode
code_	error_code.h	/^    Code code_;$/;"	m	class:lcs::gateway::ErrorCode
complete_count_	push_msg.h	/^    uint64_t complete_count_;$/;"	m	class:lcs::gateway::PushMsg
config_	gateway_module.h	/^    lcs::gateway::Config *config_;$/;"	m	class:lcs::gateway::GateWayModule
ctor_time_	push_msg.h	/^    ldd::util::Timestamp ctor_time_;$/;"	m	class:lcs::gateway::PushMsg
ctor_time_	push_msg.h	/^    ldd::util::Timestamp ctor_time_;$/;"	m	class:lcs::gateway::ToClient
ctor_time_	session_msg.h	/^    ldd::util::Timestamp ctor_time_;$/;"	m	class:lcs::gateway::ToSession
ctx_	gateway_module.h	/^    ModuleCtx* ctx_;$/;"	m	class:lcs::gateway::GateWayModule
cur_	service.h	/^    std::list<boost::shared_ptr<ldd::net::Channel> >::iterator cur_;$/;"	m	class:lcs::gateway::Service
cur_connections_	gateway_module.h	/^    ldd::util::Atomic<uint64_t> cur_connections_;$/;"	m	class:lcs::gateway::GateWayModule
cur_user_	ship.h	/^    UserSessionMap::const_iterator cur_user_;$/;"	m	struct:lcs::gateway::SessionOperation
cur_users_	gateway_module.h	/^    ldd::util::Atomic<uint64_t> cur_users_;$/;"	m	class:lcs::gateway::GateWayModule
done_time_	push_msg.h	/^    ldd::util::Timestamp done_time_;$/;"	m	class:lcs::gateway::PushMsg
echo	options.h	/^    bool echo;$/;"	m	struct:lcs::gateway::option::Gateway
ekFieldV	default_msg.cc	/^__thread uint32_t ekFieldV      = 0;$/;"	m	namespace:lcs::gateway	file:
ekFirstLogin	default_msg.cc	/^__thread uint32_t ekFirstLogin  = 0;$/;"	m	namespace:lcs::gateway	file:
ekMessageType	default_msg.cc	/^__thread uint32_t ekMessageType = 0;$/;"	m	namespace:lcs::gateway	file:
ekParseIni	default_msg.cc	/^__thread uint32_t ekParseIni    = 0;$/;"	m	namespace:lcs::gateway	file:
ekRequest	default_msg.cc	/^__thread uint32_t ekRequest     = 0;$/;"	m	namespace:lcs::gateway	file:
ekSecondSconf	default_msg.cc	/^__thread uint32_t ekSecondSconf = 0;$/;"	m	namespace:lcs::gateway	file:
ekServer	default_msg.cc	/^__thread uint32_t ekServer      = 0;$/;"	m	namespace:lcs::gateway	file:
ekServerTimeout	default_msg.cc	/^__thread uint32_t ekServerTimeout   = 0;$/;"	m	namespace:lcs::gateway	file:
ekTooManyUser	default_msg.cc	/^__thread uint32_t ekTooManyUser = 0;$/;"	m	namespace:lcs::gateway	file:
ekUserConnectLimit	default_msg.cc	/^__thread uint32_t ekUserConnectLimit = 0;$/;"	m	namespace:lcs::gateway	file:
ekUserRequestLimit	default_msg.cc	/^__thread uint32_t ekUserRequestLimit = 0;$/;"	m	namespace:lcs::gateway	file:
emit_time_	push_msg.h	/^    ldd::util::Timestamp emit_time_;$/;"	m	class:lcs::gateway::PushMsg
enable	options.h	/^    bool enable;$/;"	m	struct:lcs::gateway::option::Test
error_code_	default_msg.h	/^    ErrorCode error_code_;$/;"	m	class:lcs::gateway::DefaultMsg
error_code_	push_msg.h	/^    ErrorCode error_code_;$/;"	m	class:lcs::gateway::PushMsg
event_loop	gateway_module.cc	/^ldd::net::EventLoop *GateWayModule::event_loop()$/;"	f	class:lcs::gateway::GateWayModule
event_loop	ship.h	/^    ldd::net::EventLoop *event_loop() { return event_loop_; }$/;"	f	class:lcs::gateway::Ship
event_loop_	config.h	/^    ldd::net::EventLoop *event_loop_;$/;"	m	class:lcs::gateway::Config
event_loop_	gateway_module.h	/^    ldd::net::EventLoop *event_loop_; \/\/主线程$/;"	m	class:lcs::gateway::GateWayModule
event_loop_	ship.h	/^    ldd::net::EventLoop *event_loop_;$/;"	m	class:lcs::gateway::Ship
failed_count	default_msg.cc	/^__thread uint32_t failed_count = 0;$/;"	m	namespace:lcs::gateway	file:
failed_count_	push_msg.h	/^    uint64_t failed_count_;$/;"	m	class:lcs::gateway::PushMsg
fin_010_count	default_msg.cc	/^__thread uint32_t fin_010_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_020_count	default_msg.cc	/^__thread uint32_t fin_020_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_030_count	default_msg.cc	/^__thread uint32_t fin_030_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_040_count	default_msg.cc	/^__thread uint32_t fin_040_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_050_count	default_msg.cc	/^__thread uint32_t fin_050_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_100_count	default_msg.cc	/^__thread uint32_t fin_100_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_200_count	default_msg.cc	/^__thread uint32_t fin_200_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_300_count	default_msg.cc	/^__thread uint32_t fin_300_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_400_count	default_msg.cc	/^__thread uint32_t fin_400_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_500_count	default_msg.cc	/^__thread uint32_t fin_500_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_600_count	default_msg.cc	/^__thread uint32_t fin_600_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_700_count	default_msg.cc	/^__thread uint32_t fin_700_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_800_count	default_msg.cc	/^__thread uint32_t fin_800_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_900_count	default_msg.cc	/^__thread uint32_t fin_900_count = 0;$/;"	m	namespace:lcs::gateway	file:
fin_rst_count	default_msg.cc	/^__thread uint32_t fin_rst_count = 0;$/;"	m	namespace:lcs::gateway	file:
first_	default_msg.h	/^    bool first_;$/;"	m	class:lcs::gateway::DefaultMsg
first_packet_timeout	options.h	/^    int first_packet_timeout; \/\/客户端第一个数据包超时时间，单位毫秒，默认为1000 ms$/;"	m	struct:lcs::gateway::option::User
first_send_	default_msg.h	/^    bool first_send_;$/;"	m	class:lcs::gateway::DefaultMsg
free_id	default_msg.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:lcs::gateway::DefaultMsg
free_id	default_msg.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:lcs::gateway::ToServer
free_id	push_msg.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:lcs::gateway::PushMsg
free_id	push_msg.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:lcs::gateway::ToClient
free_id	session_msg.h	/^    static const uint64_t free_id() { return free_id_; }$/;"	f	class:lcs::gateway::ToSession
free_id_	default_msg.cc	/^ldd::util::Atomic<uint64_t> DefaultMsg::free_id_;$/;"	m	class:lcs::gateway::DefaultMsg	file:
free_id_	default_msg.cc	/^ldd::util::Atomic<uint64_t> ToServer::free_id_;$/;"	m	class:lcs::gateway::ToServer	file:
free_id_	default_msg.h	/^    static ldd::util::Atomic<uint64_t> free_id_;$/;"	m	class:lcs::gateway::DefaultMsg
free_id_	default_msg.h	/^    static ldd::util::Atomic<uint64_t> free_id_;$/;"	m	class:lcs::gateway::ToServer
free_id_	push_msg.cc	/^ldd::util::Atomic<uint64_t> PushMsg::free_id_;$/;"	m	class:lcs::gateway::PushMsg	file:
free_id_	push_msg.cc	/^ldd::util::Atomic<uint64_t> ToClient::free_id_;$/;"	m	class:lcs::gateway::ToClient	file:
free_id_	push_msg.h	/^    static ldd::util::Atomic<uint64_t> free_id_;$/;"	m	class:lcs::gateway::PushMsg
free_id_	push_msg.h	/^    static ldd::util::Atomic<uint64_t> free_id_;$/;"	m	class:lcs::gateway::ToClient
free_id_	session_msg.cc	/^ldd::util::Atomic<uint64_t> ToSession::free_id_;$/;"	m	class:lcs::gateway::ToSession	file:
free_id_	session_msg.h	/^    static ldd::util::Atomic<uint64_t> free_id_;$/;"	m	class:lcs::gateway::ToSession
gateway	config.cc	/^namespace gateway {$/;"	n	namespace:lcs	file:
gateway	config.h	/^namespace gateway {$/;"	n	namespace:lcs
gateway	default_msg.cc	/^namespace gateway {$/;"	n	namespace:lcs	file:
gateway	default_msg.h	/^namespace gateway {$/;"	n	namespace:lcs
gateway	error_code.cc	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs	file:
gateway	error_code.h	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs
gateway	gateway_module.cc	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs	file:
gateway	gateway_module.h	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs
gateway	options.cc	/^namespace gateway {$/;"	n	namespace:lcs	file:
gateway	options.h	/^namespace gateway {$/;"	n	namespace:lcs
gateway	push_msg.cc	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs	file:
gateway	push_msg.h	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs
gateway	service.cc	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs	file:
gateway	service.h	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs
gateway	session_msg.cc	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs	file:
gateway	session_msg.h	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs
gateway	ship.cc	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs	file:
gateway	ship.h	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs
gateway	user.cc	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs	file:
gateway	user.h	/^namespace lcs { namespace gateway {$/;"	n	namespace:lcs
gateway_	default_msg.h	/^    GateWayModule *gateway_;$/;"	m	class:lcs::gateway::DefaultMsg
gateway_	push_msg.h	/^    GateWayModule *gateway_;$/;"	m	class:lcs::gateway::PushMsg
gateway_	ship.h	/^    GateWayModule *gateway_;$/;"	m	class:lcs::gateway::Ship
gateway_	user.h	/^    GateWayModule *gateway_;$/;"	m	class:lcs::gateway::User
gateway_option	gateway_module.h	/^    const option::Gateway &gateway_option() const { return gateway_option_; }$/;"	f	class:lcs::gateway::GateWayModule
gateway_option_	gateway_module.h	/^    option::Gateway gateway_option_;$/;"	m	class:lcs::gateway::GateWayModule
host	config.h	/^    std::string host;$/;"	m	struct:lcs::gateway::Node
host	options.h	/^    std::string host;$/;"	m	struct:lcs::gateway::option::Zookeeper
http_	gateway_module.h	/^    mx::StandaloneHTTPServer http_;$/;"	m	class:lcs::gateway::GateWayModule
http_port	options.h	/^    int http_port;$/;"	m	struct:lcs::gateway::option::Gateway
id	gateway_module.h	/^    uint32_t id() { return id_; }$/;"	f	class:lcs::gateway::GateWayModule
id	ship.h	/^    pthread_t id() { return id_; }$/;"	f	class:lcs::gateway::Ship
id_	gateway_module.h	/^    uint32_t id_; \/\/见common.proto文件，以网络字节序的ip地址来生成$/;"	m	class:lcs::gateway::GateWayModule
id_	ship.h	/^    pthread_t id_;$/;"	m	class:lcs::gateway::Ship
index_	ship.h	/^    int index_;$/;"	m	struct:lcs::gateway::MulticastOperation
init_	config.h	/^    bool init_;$/;"	m	class:lcs::gateway::Config
init_time_	default_msg.h	/^    ldd::util::Timestamp init_time_;$/;"	m	class:lcs::gateway::DefaultMsg
init_time_	default_msg.h	/^    ldd::util::Timestamp init_time_;$/;"	m	class:lcs::gateway::ToServer
init_time_	push_msg.h	/^    ldd::util::Timestamp init_time_;$/;"	m	class:lcs::gateway::PushMsg
init_time_	push_msg.h	/^    ldd::util::Timestamp init_time_;$/;"	m	class:lcs::gateway::ToClient
init_time_	session_msg.h	/^    ldd::util::Timestamp init_time_;$/;"	m	class:lcs::gateway::ToSession
init_timeout	options.h	/^    int init_timeout;$/;"	m	struct:lcs::gateway::option::Zookeeper
init_timer_	gateway_module.h	/^    boost::scoped_ptr<ldd::net::TimerEvent> init_timer_;$/;"	m	class:lcs::gateway::GateWayModule
instance_	config.cc	/^Config *Config::instance_ = NULL;$/;"	m	class:lcs::gateway::Config	file:
instance_	config.h	/^    static Config *instance_;$/;"	m	class:lcs::gateway::Config
ip	config.h	/^    std::string ip;$/;"	m	struct:lcs::gateway::Node
ip	ship.h	/^    uint32_t ip;$/;"	m	struct:lcs::gateway::UserInfo
ip	user.h	/^    std::string ip() const { return channel_->peer_endpoint().address().ToString(); }$/;"	f	class:lcs::gateway::User
ip_	user.h	/^    uint32_t ip_;$/;"	m	class:lcs::gateway::User
ip_locate_file	options.h	/^    std::string ip_locate_file;$/;"	m	struct:lcs::gateway::option::Gateway
ip_locate_query	gateway_module.h	/^    const std::tr1::shared_ptr<safe::util::IpLocateQuery>& ip_locate_query() const { return ip_locate_query_;}$/;"	f	class:lcs::gateway::GateWayModule
ip_locate_query_	gateway_module.h	/^    std::tr1::shared_ptr<safe::util::IpLocateQuery>  ip_locate_query_;$/;"	m	class:lcs::gateway::GateWayModule
ip_u32	user.h	/^    uint32_t ip_u32() const { return channel_->peer_endpoint().address().ToU32(); }$/;"	f	class:lcs::gateway::User
kAddNode	config.h	/^    kAddNode,$/;"	e	enum:lcs::gateway::OP
kAddProtocol	config.h	/^    kAddProtocol,$/;"	e	enum:lcs::gateway::OP
kDelNode	config.h	/^    kDelNode,$/;"	e	enum:lcs::gateway::OP
kDelProtocol	config.h	/^    kDelProtocol$/;"	e	enum:lcs::gateway::OP
kFieldV	error_code.h	/^        kFieldV,$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
kFirstLogin	error_code.h	/^        kFirstLogin,$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
kMessageType	error_code.h	/^        kMessageType$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
kOk	error_code.h	/^        kOk = 0,$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
kParseIni	error_code.h	/^        kParseIni,$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
kRequest	error_code.h	/^        kRequest,$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
kSecondSconf	error_code.h	/^        kSecondSconf,$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
kServer	error_code.h	/^        kServer,$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
kServerTimeout	error_code.h	/^        kServerTimeout,$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
kTooManyUser	error_code.h	/^        kTooManyUser,$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
kUserConnectLimit	error_code.h	/^        kUserConnectLimit,$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
kUserRequestLimit	error_code.h	/^        kUserRequestLimit,$/;"	e	enum:lcs::gateway::ErrorCode::__anon1
key	user.h	/^    const std::string key() const { return serialized_key_; }$/;"	f	class:lcs::gateway::User
lcs	config.cc	/^namespace lcs {$/;"	n	file:
lcs	config.h	/^namespace lcs {$/;"	n
lcs	default_msg.cc	/^namespace lcs {$/;"	n	file:
lcs	default_msg.h	/^namespace lcs {$/;"	n
lcs	error_code.cc	/^namespace lcs { namespace gateway {$/;"	n	file:
lcs	error_code.h	/^namespace lcs { namespace gateway {$/;"	n
lcs	gateway_module.cc	/^namespace lcs { namespace gateway {$/;"	n	file:
lcs	gateway_module.h	/^namespace lcs { namespace gateway {$/;"	n
lcs	options.cc	/^namespace lcs {$/;"	n	file:
lcs	options.h	/^namespace lcs {$/;"	n
lcs	push_msg.cc	/^namespace lcs { namespace gateway {$/;"	n	file:
lcs	push_msg.h	/^namespace lcs { namespace gateway {$/;"	n
lcs	service.cc	/^namespace lcs { namespace gateway {$/;"	n	file:
lcs	service.h	/^namespace lcs { namespace gateway {$/;"	n
lcs	session_msg.cc	/^namespace lcs { namespace gateway {$/;"	n	file:
lcs	session_msg.h	/^namespace lcs { namespace gateway {$/;"	n
lcs	ship.cc	/^namespace lcs { namespace gateway {$/;"	n	file:
lcs	ship.h	/^namespace lcs { namespace gateway {$/;"	n
lcs	user.cc	/^namespace lcs { namespace gateway {$/;"	n	file:
lcs	user.h	/^namespace lcs { namespace gateway {$/;"	n
lcs_gateway.so_CXXFLAGS	Makefile	/^lcs_gateway.so_CXXFLAGS= -I.\/ \\$/;"	m
lcs_gateway.so_LDFLAGS	Makefile	/^lcs_gateway.so_LDFLAGS = -L\/home\/s\/safe\/protobuf3\/lib \\$/;"	m
lcs_gateway.so_LDLIBS	Makefile	/^lcs_gateway.so_LDLIBS  = -llddnet \\$/;"	m
lcs_gateway.so_RPATHS	Makefile	/^lcs_gateway.so_RPATHS  = \/home\/s\/safe\/protobuf3\/lib \/home\/s\/safe\/lib \/home\/s\/lib $/;"	m
lcs_gateway.so_SOURCES	Makefile	/^lcs_gateway.so_SOURCES = $(wildcard *.cc) $(wildcard proto\/*.cc)$/;"	m
listener_	gateway_module.h	/^    ldd::net::Listener* listener_;$/;"	m	class:lcs::gateway::GateWayModule
local_complete_count_	push_msg.h	/^    uint64_t local_complete_count_;$/;"	m	class:lcs::gateway::PushMsg
local_failed_count_	push_msg.h	/^    uint64_t local_failed_count_;$/;"	m	class:lcs::gateway::PushMsg
local_host_	config.h	/^    std::string local_host_;$/;"	m	class:lcs::gateway::Config
local_ip_	gateway_module.h	/^    std::string local_ip_ ;$/;"	m	class:lcs::gateway::GateWayModule
local_timeout_count_	push_msg.h	/^    uint64_t local_timeout_count_;$/;"	m	class:lcs::gateway::PushMsg
local_total_count_	push_msg.h	/^    uint64_t local_total_count_;$/;"	m	class:lcs::gateway::PushMsg
log_conf	options.h	/^    std::string log_conf;$/;"	m	struct:lcs::gateway::option::Gateway
log_great_than	default_msg.cc	/^int log_great_than = 100;$/;"	m	namespace:lcs::gateway	file:
log_stat_interval	default_msg.cc	/^uint32_t log_stat_interval = 1;$/;"	m	namespace:lcs::gateway	file:
login_time_	user.h	/^    time_t login_time_; \/\/seconds$/;"	m	class:lcs::gateway::User
max_connections	options.h	/^    uint64_t max_connections;$/;"	m	struct:lcs::gateway::option::Gateway
max_connects	options.h	/^    int max_connects;  \/\/每IP连接数限制，默认为5$/;"	m	struct:lcs::gateway::option::User
max_retry_counts	options.h	/^    int max_retry_counts;$/;"	m	struct:lcs::gateway::option::Session
mid	ship.h	/^    std::string mid;$/;"	m	struct:lcs::gateway::UserInfo
mid	user.h	/^    const std::string mid() const { return mid_; }$/;"	f	class:lcs::gateway::User
mid_	user.h	/^    std::string mid_;$/;"	m	class:lcs::gateway::User
msg_content_	push_msg.h	/^    ldd::net::Buffer msg_content_;$/;"	m	class:lcs::gateway::PushMsg
msg_content_	push_msg.h	/^    ldd::net::Buffer msg_content_;$/;"	m	class:lcs::gateway::ToClient
msg_content_	session_msg.h	/^    ldd::net::Buffer msg_content_;$/;"	m	class:lcs::gateway::ToSession
msg_type_	push_msg.h	/^    ldd::net::MessageType msg_type_;$/;"	m	class:lcs::gateway::ToClient
msg_type_	session_msg.h	/^    ldd::net::MessageType msg_type_;$/;"	m	class:lcs::gateway::ToSession
name	user.h	/^    const std::string &name() const { return name_; }$/;"	f	class:lcs::gateway::User
name_	user.h	/^    std::string name_;$/;"	m	class:lcs::gateway::User
new_users_	ship.h	/^    std::map<UserKey, std::string> new_users_;$/;"	m	class:lcs::gateway::Ship
next_id	default_msg.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:lcs::gateway::DefaultMsg
next_id	default_msg.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:lcs::gateway::ToServer
next_id	push_msg.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:lcs::gateway::PushMsg
next_id	push_msg.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:lcs::gateway::ToClient
next_id	session_msg.h	/^    static const uint64_t next_id() { return next_id_; }$/;"	f	class:lcs::gateway::ToSession
next_id_	default_msg.cc	/^ldd::util::Atomic<uint64_t> ToServer::next_id_;$/;"	m	class:lcs::gateway::ToServer	file:
next_id_	default_msg.h	/^    static ldd::util::Atomic<uint64_t> next_id_;$/;"	m	class:lcs::gateway::DefaultMsg
next_id_	default_msg.h	/^    static ldd::util::Atomic<uint64_t> next_id_;$/;"	m	class:lcs::gateway::ToServer
next_id_	push_msg.cc	/^ldd::util::Atomic<uint64_t> ToClient::next_id_;$/;"	m	class:lcs::gateway::ToClient	file:
next_id_	push_msg.h	/^    static ldd::util::Atomic<uint64_t> next_id_;$/;"	m	class:lcs::gateway::PushMsg
next_id_	push_msg.h	/^    static ldd::util::Atomic<uint64_t> next_id_;$/;"	m	class:lcs::gateway::ToClient
next_id_	session_msg.cc	/^ldd::util::Atomic<uint64_t> ToSession::next_id_;$/;"	m	class:lcs::gateway::ToSession	file:
next_id_	session_msg.h	/^    static ldd::util::Atomic<uint64_t> next_id_;$/;"	m	class:lcs::gateway::ToSession
node_notifier_	config.h	/^    NodeNotifier node_notifier_;$/;"	m	class:lcs::gateway::Config
nodes_	ship.h	/^    std::map<std::string, Node> nodes_;$/;"	m	class:lcs::gateway::Ship
old_users_	ship.h	/^    std::map<UserKey, std::string> old_users_;$/;"	m	class:lcs::gateway::Ship
once_push_users	options.h	/^    int once_push_users;$/;"	m	struct:lcs::gateway::option::Gateway
once_push_users	options.h	/^    int once_push_users;$/;"	m	struct:lcs::gateway::option::Push
op_	config.h	/^    int op_;$/;"	m	class:lcs::gateway::Config
option	options.cc	/^namespace option {$/;"	n	namespace:lcs::gateway	file:
option	options.h	/^namespace option {$/;"	n	namespace:lcs::gateway
option_	config.h	/^    option::Zookeeper option_;$/;"	m	class:lcs::gateway::Config
ordered_user_sessions_	ship.h	/^    UserSessionMap ordered_user_sessions_;$/;"	m	struct:lcs::gateway::SessionOperation
ordered_users_	ship.h	/^    UserList ordered_users_;$/;"	m	class:lcs::gateway::Ship
parent_	default_msg.h	/^    boost::weak_ptr<DefaultMsg> parent_;$/;"	m	class:lcs::gateway::ToServer
parent_	push_msg.h	/^    boost::weak_ptr<PushMsg> parent_;$/;"	m	class:lcs::gateway::ToClient
parent_id_	default_msg.h	/^    ldd::net::IncomingMsg::Id parent_id_;$/;"	m	class:lcs::gateway::ToServer
path	config.h	/^    std::string path;$/;"	m	struct:lcs::gateway::Node
pending_multicast_operations_	ship.h	/^    std::vector<boost::shared_ptr<MulticastOperation> > pending_multicast_operations_;$/;"	m	class:lcs::gateway::Ship
pending_operations_	ship.h	/^    std::vector<boost::shared_ptr<BroadcastOperation> > pending_operations_;$/;"	m	class:lcs::gateway::Ship
pending_session_operations_	ship.h	/^    std::vector<boost::shared_ptr<SessionOperation> > pending_session_operations_;$/;"	m	class:lcs::gateway::Ship
port	config.h	/^    std::vector<int> port;$/;"	m	struct:lcs::gateway::Node
port	options.h	/^    int port;$/;"	m	struct:lcs::gateway::option::Test
port	ship.h	/^    uint16_t port;$/;"	m	struct:lcs::gateway::UserInfo
port	user.h	/^    uint16_t port() const { return channel_->peer_endpoint().port(); }$/;"	f	class:lcs::gateway::User
port_	user.h	/^    uint16_t port_;$/;"	m	class:lcs::gateway::User
pre_second_total_pulse_timeout_	gateway_module.h	/^    uint64_t pre_second_total_pulse_timeout_;$/;"	m	class:lcs::gateway::GateWayModule
pre_second_total_request_	gateway_module.h	/^    uint64_t pre_second_total_request_;$/;"	m	class:lcs::gateway::GateWayModule
prev_time_	user.h	/^    time_t prev_time_;$/;"	m	class:lcs::gateway::User
protocol	config.h	/^    std::vector<int> protocol;$/;"	m	struct:lcs::gateway::Node
protocol_	service.h	/^    int protocol_;$/;"	m	class:lcs::gateway::Service
protocol_mutex_	gateway_module.h	/^    ldd::util::Mutex protocol_mutex_;$/;"	m	class:lcs::gateway::GateWayModule
protocol_notifier_	config.h	/^    ProtocolNotifier protocol_notifier_;$/;"	m	class:lcs::gateway::Config
protocols_	config.h	/^    std::vector<std::string> protocols_;$/;"	m	class:lcs::gateway::Config
protocols_	gateway_module.h	/^    std::set<int> protocols_;$/;"	m	class:lcs::gateway::GateWayModule
pulse_interval	options.h	/^    int pulse_interval; \/\/server timeout$/;"	m	struct:lcs::gateway::option::Server
pulse_interval	options.h	/^    int pulse_interval;$/;"	m	struct:lcs::gateway::option::User
pulse_lazy_emitting	options.h	/^    bool pulse_lazy_emitting;$/;"	m	struct:lcs::gateway::option::Server
pulse_lazy_emitting	options.h	/^    bool pulse_lazy_emitting;$/;"	m	struct:lcs::gateway::option::User
pulse_relaxed_checking	options.h	/^    bool pulse_relaxed_checking;$/;"	m	struct:lcs::gateway::option::Server
pulse_relaxed_checking	options.h	/^    bool pulse_relaxed_checking;$/;"	m	struct:lcs::gateway::option::User
pulse_timeout_peer_second_	gateway_module.h	/^    uint64_t pulse_timeout_peer_second_;$/;"	m	class:lcs::gateway::GateWayModule
push	push_msg.h	/^    const lcs::push::Message& push() const { return push_; }$/;"	f	class:lcs::gateway::PushMsg
push_	push_msg.h	/^    lcs::push::Message push_;$/;"	m	class:lcs::gateway::PushMsg
push_channel_login_users_	ship.h	/^    std::map<ldd::net::Channel*, std::map<UserKey, std::string> > push_channel_login_users_;$/;"	m	class:lcs::gateway::Ship
push_msg_	ship.h	/^    boost::shared_ptr<PushMsg> push_msg_;$/;"	m	struct:lcs::gateway::BroadcastOperation
push_msg_	ship.h	/^    boost::shared_ptr<PushMsg> push_msg_;$/;"	m	struct:lcs::gateway::MulticastOperation
push_option	gateway_module.h	/^    const option::Push &push_option() const { return push_option_; }$/;"	f	class:lcs::gateway::GateWayModule
push_option_	gateway_module.h	/^    option::Push push_option_;$/;"	m	class:lcs::gateway::GateWayModule
push_task_id	push_msg.h	/^    uint64_t push_task_id() {return push_task_id_;} $/;"	f	class:lcs::gateway::PushMsg
push_task_id_	push_msg.h	/^    uint64_t push_task_id_;$/;"	m	class:lcs::gateway::PushMsg
push_type_	push_msg.h	/^    int push_type_;$/;"	m	class:lcs::gateway::PushMsg
push_user_count_	push_msg.h	/^    int push_user_count_;$/;"	m	class:lcs::gateway::PushMsg
qlog_info	options.h	/^    bool qlog_info;$/;"	m	struct:lcs::gateway::option::Push
recv_timeout	options.h	/^    int recv_timeout;$/;"	m	struct:lcs::gateway::option::Push
recv_timeout	options.h	/^    int recv_timeout;$/;"	m	struct:lcs::gateway::option::Session
recv_timeout_	push_msg.h	/^    int recv_timeout_;$/;"	m	class:lcs::gateway::ToClient
recv_timeout_	session_msg.h	/^    int recv_timeout_;$/;"	m	class:lcs::gateway::ToSession
req_buf_	default_msg.h	/^    ldd::net::Buffer req_buf_;$/;"	m	class:lcs::gateway::DefaultMsg
request_count_	user.h	/^    int request_count_;$/;"	m	class:lcs::gateway::User
request_limit_peer_second	options.h	/^    int request_limit_peer_second;$/;"	m	struct:lcs::gateway::option::User
request_peer_second_	gateway_module.h	/^    uint64_t request_peer_second_;$/;"	m	class:lcs::gateway::GateWayModule
request_recv_timeout	options.h	/^    int request_recv_timeout;$/;"	m	struct:lcs::gateway::option::Server
request_send_timeout	options.h	/^    int request_send_timeout;$/;"	m	struct:lcs::gateway::option::Server
request_str	push_msg.h	/^    const std::string & request_str() const { return request_str_;}$/;"	f	class:lcs::gateway::PushMsg
request_str_	push_msg.h	/^    std::string request_str_;$/;"	m	class:lcs::gateway::PushMsg
res_	push_msg.h	/^    boost::shared_ptr<lcs::push::Response> res_;$/;"	m	class:lcs::gateway::PushMsg
res_buf_	default_msg.h	/^    ldd::net::Buffer res_buf_;$/;"	m	class:lcs::gateway::DefaultMsg
response_interval	options.h	/^    int response_interval;$/;"	m	struct:lcs::gateway::option::Push
response_threshold	options.h	/^    int response_threshold;$/;"	m	struct:lcs::gateway::option::Push
response_timer_	push_msg.h	/^    ldd::net::TimerEvent response_timer_;$/;"	m	class:lcs::gateway::PushMsg
retried_channels_	default_msg.h	/^    std::set<void *> retried_channels_;$/;"	m	class:lcs::gateway::DefaultMsg
retried_times_	session_msg.h	/^    int retried_times_;$/;"	m	class:lcs::gateway::ToSession
retry_interval	options.h	/^    int retry_interval;$/;"	m	struct:lcs::gateway::option::Zookeeper
retry_timer_	config.h	/^    boost::scoped_ptr<ldd::net::TimerEvent> retry_timer_;$/;"	m	class:lcs::gateway::Config
retry_times	options.h	/^    int retry_times;$/;"	m	struct:lcs::gateway::option::User
retry_times	options.h	/^    int retry_times;$/;"	m	struct:lcs::gateway::option::Zookeeper
retry_times_	default_msg.h	/^    int retry_times_;$/;"	m	class:lcs::gateway::DefaultMsg
root_path	options.h	/^    std::string root_path;$/;"	m	struct:lcs::gateway::option::Zookeeper
send_timeout	options.h	/^    int send_timeout;$/;"	m	struct:lcs::gateway::option::Push
send_timeout	options.h	/^    int send_timeout;$/;"	m	struct:lcs::gateway::option::Session
serialized_key_	user.h	/^    std::string serialized_key_;$/;"	m	class:lcs::gateway::User
server	options.h	/^    std::string server;$/;"	m	struct:lcs::gateway::option::Test
server_	gateway_module.h	/^    boost::scoped_ptr<ldd::net::Server> server_;$/;"	m	class:lcs::gateway::GateWayModule
server_connections_	gateway_module.h	/^    ldd::util::Atomic<uint64_t> server_connections_;$/;"	m	class:lcs::gateway::GateWayModule
server_option	gateway_module.h	/^    const option::Server &server_option() const { return server_option_; }$/;"	f	class:lcs::gateway::GateWayModule
server_option_	gateway_module.h	/^    option::Server server_option_;$/;"	m	class:lcs::gateway::GateWayModule
service	config.h	/^    std::string service;$/;"	m	struct:lcs::gateway::Node
service_nodes_	config.h	/^    std::map<std::string, std::vector<std::string> > service_nodes_;$/;"	m	class:lcs::gateway::Config
services_	config.h	/^    std::vector<std::string> services_;$/;"	m	class:lcs::gateway::Config
services_	ship.h	/^    std::map<int, boost::shared_ptr<Service> > services_;$/;"	m	class:lcs::gateway::Ship
session_expire_notifier_	config.h	/^    SessionExpireNotifier session_expire_notifier_;$/;"	m	class:lcs::gateway::Config
session_option	gateway_module.h	/^    const option::Session &session_option() const { return session_option_; }$/;"	f	class:lcs::gateway::GateWayModule
session_option_	gateway_module.h	/^    option::Session session_option_;$/;"	m	class:lcs::gateway::GateWayModule
session_timer_	ship.h	/^    boost::scoped_ptr<ldd::net::TimerEvent> session_timer_;$/;"	m	class:lcs::gateway::Ship
set_byond_connect_limit	user.h	/^    void set_byond_connect_limit(bool flag) { $/;"	f	class:lcs::gateway::User
set_id	ship.h	/^    void set_id(pthread_t id) { id_ = id; }$/;"	f	class:lcs::gateway::Ship
set_key	user.h	/^    void set_key(std::string serialized_key) { $/;"	f	class:lcs::gateway::User
set_mid	user.cc	/^void User::set_mid(const std::string &mid) {$/;"	f	class:lcs::gateway::User
set_stat	user.cc	/^void User::set_stat(int stat)$/;"	f	class:lcs::gateway::User
ship	user.h	/^    Ship *ship() { return ship_; }$/;"	f	class:lcs::gateway::User
ship_	push_msg.h	/^    Ship *ship_;$/;"	m	class:lcs::gateway::PushMsg
ship_	push_msg.h	/^    Ship *ship_;$/;"	m	class:lcs::gateway::ToClient
ship_	session_msg.h	/^    Ship* ship_;$/;"	m	class:lcs::gateway::ToSession
ship_	user.h	/^    Ship *ship_;$/;"	m	class:lcs::gateway::User
ships_	gateway_module.h	/^    std::map<pthread_t,  boost::shared_ptr<Ship> > ships_;$/;"	m	class:lcs::gateway::GateWayModule
size	service.h	/^    size_t size() { return channels_.size(); }$/;"	f	class:lcs::gateway::Service
startup_time	config.h	/^    std::string startup_time;$/;"	m	struct:lcs::gateway::Node
stat	user.h	/^    int stat() const { return stat_; }$/;"	f	class:lcs::gateway::User
stat_	user.h	/^    int stat_;$/;"	m	class:lcs::gateway::User
stat_fin	default_msg.cc	/^inline void stat_fin(osl::StatTime *st, int64_t ms)$/;"	f	namespace:lcs::gateway
stat_timer_	gateway_module.h	/^    boost::scoped_ptr<ldd::net::TimerEvent> stat_timer_;$/;"	m	class:lcs::gateway::GateWayModule
stat_tsm	default_msg.cc	/^__thread osl::StatTimeManager *stat_tsm = NULL;$/;"	m	namespace:lcs::gateway	file:
status	ship.h	/^    ServerStatus status;$/;"	m	struct:lcs::gateway::SessionOperation
status_file	options.h	/^    std::string status_file;$/;"	m	struct:lcs::gateway::option::Gateway
success_count	default_msg.cc	/^__thread uint32_t success_count = 0;$/;"	m	namespace:lcs::gateway	file:
success_request_	user.h	/^    int success_request_;$/;"	m	class:lcs::gateway::User
test_option	gateway_module.h	/^    const option::Test &test_option() const { return test_option_; }$/;"	f	class:lcs::gateway::GateWayModule
test_option_	config.h	/^    option::Test test_option_;$/;"	m	class:lcs::gateway::Config
test_option_	gateway_module.h	/^    option::Test test_option_;$/;"	m	class:lcs::gateway::GateWayModule
thread_count	options.h	/^    int thread_count; \/\/线程数量$/;"	m	struct:lcs::gateway::option::Gateway
threads_	gateway_module.h	/^    boost::ptr_vector<ldd::net::EventLoopThread> threads_;$/;"	m	class:lcs::gateway::GateWayModule
threads_dispatching	options.h	/^    bool threads_dispatching;$/;"	m	struct:lcs::gateway::option::Gateway
time_cache	ship.h	/^    time_t time_cache() { return time_cache_; };$/;"	f	class:lcs::gateway::Ship
time_cache_	ship.h	/^    time_t time_cache_;$/;"	m	class:lcs::gateway::Ship
time_cache_timer_	ship.h	/^    boost::scoped_ptr<ldd::net::TimerEvent> time_cache_timer_;$/;"	m	class:lcs::gateway::Ship
timeout	options.h	/^    int timeout;$/;"	m	struct:lcs::gateway::option::Zookeeper
timeout_count_	push_msg.h	/^    uint64_t timeout_count_;$/;"	m	class:lcs::gateway::PushMsg
timeout_ms_	user.h	/^    int timeout_ms_;$/;"	m	class:lcs::gateway::User
timer_	user.h	/^    boost::scoped_ptr<ldd::net::TimerEvent> timer_;$/;"	m	class:lcs::gateway::User
total_count_	push_msg.h	/^    uint64_t total_count_;$/;"	m	class:lcs::gateway::PushMsg
total_pulse_timeout_	gateway_module.h	/^    ldd::util::Atomic<uint64_t> total_pulse_timeout_;$/;"	m	class:lcs::gateway::GateWayModule
total_request_	gateway_module.h	/^    ldd::util::Atomic<uint64_t> total_request_;$/;"	m	class:lcs::gateway::GateWayModule
total_request_	user.h	/^    int total_request_;$/;"	m	class:lcs::gateway::User
type	push_msg.h	/^    virtual ldd::net::MessageType type() const { return msg_type_; }$/;"	f	class:lcs::gateway::ToClient
type	session_msg.h	/^    virtual ldd::net::MessageType type() const { return msg_type_; }$/;"	f	class:lcs::gateway::ToSession
use_login	options.h	/^    bool use_login;$/;"	m	struct:lcs::gateway::option::Gateway
used_server_	default_msg.h	/^    std::string used_server_;$/;"	m	class:lcs::gateway::DefaultMsg
used_server_port_	default_msg.h	/^    int used_server_port_;$/;"	m	class:lcs::gateway::DefaultMsg
used_server_stat_	default_msg.h	/^    int used_server_stat_;$/;"	m	class:lcs::gateway::DefaultMsg
used_time_	push_msg.h	/^    int used_time_;$/;"	m	class:lcs::gateway::PushMsg
user_	default_msg.h	/^    boost::weak_ptr<User> user_;$/;"	m	class:lcs::gateway::DefaultMsg
user_	push_msg.h	/^    User *user_;$/;"	m	class:lcs::gateway::ToClient
user_	ship.h	/^    User* user_;$/;"	m	struct:lcs::gateway::BroadcastOperation
user_check_interval	options.h	/^    int user_check_interval;$/;"	m	struct:lcs::gateway::option::Session
user_count_	ship.h	/^    uint64_t user_count_;$/;"	m	class:lcs::gateway::Ship
user_login_push_channel_	ship.h	/^    std::map<UserKey, boost::shared_ptr<ldd::net::Channel> > user_login_push_channel_ ;$/;"	m	class:lcs::gateway::Ship
user_num_once_send	options.h	/^    int user_num_once_send;$/;"	m	struct:lcs::gateway::option::Session
user_option	gateway_module.h	/^    const option::User &user_option() const { return user_option_; }$/;"	f	class:lcs::gateway::GateWayModule
user_option_	gateway_module.h	/^    option::User user_option_;$/;"	m	class:lcs::gateway::GateWayModule
users_	ship.h	/^    UserMap users_;$/;"	m	class:lcs::gateway::Ship
zookeeper_option	gateway_module.h	/^    const option::Zookeeper &zookeeper_option() const { return zookeeper_option_; }$/;"	f	class:lcs::gateway::GateWayModule
zookeeper_option_	gateway_module.h	/^    option::Zookeeper zookeeper_option_;$/;"	m	class:lcs::gateway::GateWayModule
zookeeper_wait_count_	gateway_module.h	/^    int zookeeper_wait_count_;$/;"	m	class:lcs::gateway::GateWayModule
~BroadcastOperation	ship.h	/^    ~BroadcastOperation() {}$/;"	f	struct:lcs::gateway::BroadcastOperation
~Config	config.cc	/^Config::~Config()$/;"	f	class:lcs::gateway::Config
~DefaultMsg	default_msg.cc	/^DefaultMsg::~DefaultMsg()$/;"	f	class:lcs::gateway::DefaultMsg
~GateWayModule	gateway_module.cc	/^GateWayModule::~GateWayModule()$/;"	f	class:lcs::gateway::GateWayModule
~MulticastOperation	ship.h	/^    ~MulticastOperation() {}$/;"	f	struct:lcs::gateway::MulticastOperation
~PushMsg	push_msg.cc	/^PushMsg::~PushMsg()$/;"	f	class:lcs::gateway::PushMsg
~Service	service.cc	/^Service::~Service()$/;"	f	class:lcs::gateway::Service
~SessionOperation	ship.h	/^    ~SessionOperation() {}$/;"	f	struct:lcs::gateway::SessionOperation
~Ship	ship.cc	/^Ship::~Ship()$/;"	f	class:lcs::gateway::Ship
~ToClient	push_msg.h	/^    virtual ~ToClient() { free_id_++; }$/;"	f	class:lcs::gateway::ToClient
~ToServer	default_msg.cc	/^ToServer::~ToServer()$/;"	f	class:lcs::gateway::ToServer
~ToSession	session_msg.h	/^    virtual ~ToSession() { free_id_++; }$/;"	f	class:lcs::gateway::ToSession
~User	user.cc	/^User::~User() {$/;"	f	class:lcs::gateway::User
