!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Add	easyevent.cpp	/^bool SignalEvent::Add(int signo) {$/;"	f	class:SignalEvent
AsyncWait	easyevent.cpp	/^void FdEvent::AsyncWait(int fd, int events, const Functor& handler) {$/;"	f	class:FdEvent
AsyncWait	easyevent.cpp	/^void SignalEvent::AsyncWait(const Functor& handler)$/;"	f	class:SignalEvent
AsyncWait	easyevent.cpp	/^void TimerEvent::AsyncWait(const Functor& handler,$/;"	f	class:TimerEvent
CFLAGS	Makefile	/^CFLAGS=-g $/;"	m
CXX	Makefile	/^CXX=\/usr\/bin\/g++$/;"	m
Cancel	easyevent.cpp	/^void FdEvent::Cancel() {$/;"	f	class:FdEvent
Cancel	easyevent.cpp	/^void SignalEvent::Cancel()$/;"	f	class:SignalEvent
Cancel	easyevent.cpp	/^void TimerEvent::Cancel() {$/;"	f	class:TimerEvent
Clear	easyevent.cpp	/^bool SignalEvent::Clear() {$/;"	f	class:SignalEvent
DONG_BASE_THREADLOCAL_H	thread_local_storage.h	2;"	d
DoPendingFunctors	EventLoop.cpp	/^void EventLoop::DoPendingFunctors()$/;"	f	class:EventLoop
EventBase	EventLoop.cpp	/^struct event_base* EventLoop::EventBase(){$/;"	f	class:EventLoop
EventLoop	EventLoop.cpp	/^EventLoop::EventLoop():tid_(0),calling_pending_functors_(false)$/;"	f	class:EventLoop
EventLoop	EventLoop.h	/^class EventLoop{$/;"	c
EventLoopThread	EventLoopThread.cpp	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	EventLoopThread.h	/^class EventLoopThread{$/;"	c
EventLoopThreadPool	EventLoopThreadPool.cpp	/^EventLoopThreadPool::EventLoopThreadPool(EventLoop* base_loop):base_loop_(NULL), started_(false),threads_num_(0),next_(0)$/;"	f	class:EventLoopThreadPool
EventLoopThreadPool	EventLoopThreadPool.h	/^class EventLoopThreadPool$/;"	c
EventLoopThreadPtr	EventLoopThreadPool.h	/^    typedef std::tr1::shared_ptr<EventLoopThread> EventLoopThreadPtr;$/;"	t	class:EventLoopThreadPool
FdEvent	easyevent.cpp	/^FdEvent::FdEvent(struct event_base* base)$/;"	f	class:FdEvent
FdEvent	easyevent.h	/^class FdEvent : noncopyable {$/;"	c
Functor	easyevent.h	/^    typedef std::tr1::function<void()> Functor;$/;"	t	class:TimerEvent
Functor	easyevent.h	/^    typedef std::tr1::function<void(int)> Functor;$/;"	t	class:FdEvent
Functor	easyevent.h	/^    typedef std::tr1::function<void(int)> Functor;$/;"	t	class:SignalEvent
GetEventBase	EventLoopThread.cpp	/^struct event_base* EventLoopThread::GetEventBase()$/;"	f	class:EventLoopThread
GetEventLoop	EventLoopThread.cpp	/^std::tr1::shared_ptr<EventLoop> EventLoopThread::GetEventLoop()$/;"	f	class:EventLoopThread
GetName	EventLoopThread.cpp	/^string EventLoopThread::GetName()$/;"	f	class:EventLoopThread
GetNextLoop	EventLoopThreadPool.cpp	/^EventLoop* EventLoopThreadPool::GetNextLoop()$/;"	f	class:EventLoopThreadPool
GetNextLoopWithHash	EventLoopThreadPool.cpp	/^EventLoop* EventLoopThreadPool::GetNextLoopWithHash(uint64_t hash)$/;"	f	class:EventLoopThreadPool
H_LINUX_THREAD_PRIORITY	Thread.h	12;"	d
Handler	Thread.h	/^    typedef std::tr1::function< void () > Handler;$/;"	t	class:ThreadRunner
INCLUDE	Makefile	/^INCLUDE=-I\/home\/libin3-s\/locallibevnet\/include -I..\/include\/$/;"	m
IsRunning	EventLoopThread.cpp	/^bool EventLoopThread::IsRunning()$/;"	f	class:EventLoopThread
IsRunning	EventLoopThreadPool.cpp	/^bool EventLoopThreadPool::IsRunning()const$/;"	f	class:EventLoopThreadPool
IsStopped	EventLoopThread.cpp	/^bool EventLoopThread::IsStopped()$/;"	f	class:EventLoopThread
IsStopped	EventLoopThreadPool.cpp	/^bool EventLoopThreadPool::IsStopped()const$/;"	f	class:EventLoopThreadPool
LIBS	Makefile	/^LIBS=-lpthread  \/home\/libin3-s\/locallibevnet\/lib\/libevent.a -Wl,-Bstatic  -llog4cxx -L..\/lib\/log4cxx -Wl,-Bdynamic -lm -L\/usr\/lib64 -L\/usr\/local\/apr\/lib\/ -lapr-1 -L\/usr\/local\/apr-util\/lib\/ -laprutil-1 ..\/common\/libcommon.a $/;"	m
MainThread	Thread.cpp	/^    MainThread()$/;"	f	class:MainThread
MainThread	Thread.cpp	/^class MainThread : public Thread$/;"	c	file:
Notify	EventLoop.cpp	/^void EventLoop::Notify()$/;"	f	class:EventLoop
Notify	easyevent.cpp	/^void FdEvent::Notify(int fd, short what, void *arg) {$/;"	f	class:FdEvent
OBJS	Makefile	/^OBJS=$(patsubst %.cpp,%.o,$(wildcard *.cpp))$/;"	m
OnSignal	easyevent.cpp	/^void SignalEvent::OnSignal(int fd, short what, void *arg)$/;"	f	class:SignalEvent
OnTimer	easyevent.cpp	/^void TimerEvent::OnTimer(int fd, short what, void *arg) {$/;"	f	class:TimerEvent
PipeProcess	EventLoop.cpp	/^void EventLoop::PipeProcess(int fd, short which, void* arg)$/;"	f	class:EventLoop
QueueInLoop	EventLoop.cpp	/^void EventLoop::QueueInLoop(const functor &fun)$/;"	f	class:EventLoop
Remove	easyevent.cpp	/^bool SignalEvent::Remove(int signo) {$/;"	f	class:SignalEvent
Run	EventLoop.cpp	/^void EventLoop::Run()$/;"	f	class:EventLoop
Run	EventLoopThread.cpp	/^void EventLoopThread::Run()$/;"	f	class:EventLoopThread
RunInLoop	EventLoop.cpp	/^void EventLoop::RunInLoop(const functor &fun)$/;"	f	class:EventLoop
S_FORCECHAR	Thread.h	/^            S_FORCECHAR = 0xff,$/;"	e	enum:Thread::ThreadState
S_NULL	Thread.h	/^            S_NULL = 0,  \/\/! Thread is not initialized.$/;"	e	enum:Thread::ThreadState
S_RUNNING	Thread.h	/^            S_RUNNING,   \/\/! Thread is running in run(...) method.$/;"	e	enum:Thread::ThreadState
S_STARTING	Thread.h	/^            S_STARTING,  \/\/! Thread is starting, but has not entered run(...) method.$/;"	e	enum:Thread::ThreadState
S_STOPPING	Thread.h	/^            S_STOPPING,  \/\/! Thread is required stopping.$/;"	e	enum:Thread::ThreadState
SetName	EventLoopThread.cpp	/^void EventLoopThread::SetName(string name)$/;"	f	class:EventLoopThread
SetThreadNum	EventLoopThreadPool.cpp	/^void EventLoopThreadPool::SetThreadNum(int thread_num)$/;"	f	class:EventLoopThreadPool
SignalEvent	easyevent.cpp	/^SignalEvent::SignalEvent(event_base* base)$/;"	f	class:SignalEvent
SignalEvent	easyevent.h	/^class SignalEvent : noncopyable {$/;"	c
Start	EventLoopThread.cpp	/^bool EventLoopThread::Start(bool wait_until_thread_started)$/;"	f	class:EventLoopThread
Start	EventLoopThreadPool.cpp	/^bool EventLoopThreadPool::Start(bool wait_until_thread_started)$/;"	f	class:EventLoopThreadPool
Start	easyevent.cpp	/^void FdEvent::Start(int fd, int events) {$/;"	f	class:FdEvent
Start	easyevent.cpp	/^void TimerEvent::Start() {$/;"	f	class:TimerEvent
Stop	EventLoop.cpp	/^void EventLoop::Stop()$/;"	f	class:EventLoop
Stop	EventLoopThread.cpp	/^void EventLoopThread::Stop(bool wait_until_thread_exited)$/;"	f	class:EventLoopThread
Stop	EventLoopThreadPool.cpp	/^void EventLoopThreadPool::Stop(bool wait_thread_exit)$/;"	f	class:EventLoopThreadPool
StopInLoop	EventLoop.cpp	/^void EventLoop::StopInLoop()$/;"	f	class:EventLoop
StringMap	thread_local_storage.h	/^    typedef std::map<string, T> StringMap;$/;"	t	class:ThreadLocalStorage
TARGET	Makefile	/^TARGET=libthread.a$/;"	m
THREAD_PRIORITY_DEFAULT	Thread.h	/^            THREAD_PRIORITY_DEFAULT   \/**< Priority scheduling default    *\/$/;"	e	enum:Thread::ThreadPriority
THREAD_PRIORITY_HIGH	Thread.h	/^            THREAD_PRIORITY_HIGH,     \/**< A high (but not max) setting   *\/$/;"	e	enum:Thread::ThreadPriority
THREAD_PRIORITY_LOW	Thread.h	/^            THREAD_PRIORITY_LOW,      \/**< A low (but not min) setting    *\/$/;"	e	enum:Thread::ThreadPriority
THREAD_PRIORITY_MAX	Thread.h	/^            THREAD_PRIORITY_MAX = 0,  \/**< The maximum possible priority  *\/$/;"	e	enum:Thread::ThreadPriority
THREAD_PRIORITY_MIN	Thread.h	/^            THREAD_PRIORITY_MIN,      \/**< The minimum possible priority *\/$/;"	e	enum:Thread::ThreadPriority
THREAD_PRIORITY_NORMAL	Thread.h	/^            THREAD_PRIORITY_NORMAL,  \/**< An average priority            *\/$/;"	e	enum:Thread::ThreadPriority
TID	Thread.h	/^        typedef pthread_t TID;$/;"	t	class:Thread
Thread	Thread.cpp	/^Thread::Thread()$/;"	f	class:Thread
Thread	Thread.h	/^class Thread{$/;"	c
ThreadHandle	Thread.h	/^        typedef pthread_t ThreadHandle;$/;"	t	class:Thread
ThreadLocal	thread_local_storage.h	/^    ThreadLocal()$/;"	f	class:ThreadLocal
ThreadLocal	thread_local_storage.h	/^class ThreadLocal: Noncopyable$/;"	c
ThreadLocalStorage	thread_local_storage.h	/^    ThreadLocalStorage()$/;"	f	class:ThreadLocalStorage
ThreadLocalStorage	thread_local_storage.h	/^class ThreadLocalStorage : Noncopyable$/;"	c
ThreadPriority	Thread.h	/^        enum ThreadPriority$/;"	g	class:Thread
ThreadProc	Thread.cpp	/^void* Thread::ThreadProc( void* pvArg )$/;"	f	class:Thread
ThreadRunner	Thread.h	/^    ThreadRunner(Handler handler) $/;"	f	class:ThreadRunner
ThreadRunner	Thread.h	/^class  ThreadRunner : public Thread$/;"	c
ThreadState	Thread.h	/^        enum ThreadState$/;"	g	class:Thread
Tid	EventLoopThread.cpp	/^pthread_t EventLoopThread::Tid()$/;"	f	class:EventLoopThread
TimerEvent	easyevent.cpp	/^TimerEvent::TimerEvent(struct event_base* base)$/;"	f	class:TimerEvent
TimerEvent	easyevent.h	/^class TimerEvent : noncopyable {$/;"	c
TlsFree	thread_local_storage.h	8;"	d
TlsGetValue	thread_local_storage.h	6;"	d
TlsSetValue	thread_local_storage.h	7;"	d
Type	easyevent.h	/^    enum Type {$/;"	g	class:FdEvent
__EASYEVENT	easyevent.h	2;"	d
__EVENTLOOP	EventLoop.h	2;"	d
__EVENTLOOPTHREAD	EventLoopThread.h	2;"	d
__EVENT_LOOP_THREAD_POOL	EventLoopThreadPool.h	2;"	d
__THREAD	Thread.h	2;"	d
active_	easyevent.h	/^    bool active_;$/;"	m	class:FdEvent
active_	easyevent.h	/^    bool active_;$/;"	m	class:TimerEvent
base_	EventLoop.h	/^        struct event_base* base_;$/;"	m	class:EventLoop	typeref:struct:EventLoop::event_base
base_	easyevent.h	/^    struct event_base  *base_;$/;"	m	class:FdEvent	typeref:struct:FdEvent::event_base
base_	easyevent.h	/^    struct event_base * base_;$/;"	m	class:SignalEvent	typeref:struct:SignalEvent::event_base
base_	easyevent.h	/^    struct event_base *base_;$/;"	m	class:TimerEvent	typeref:struct:TimerEvent::event_base
base_loop_	EventLoopThreadPool.h	/^    EventLoop* base_loop_;$/;"	m	class:EventLoopThreadPool
calling_pending_functors_	EventLoop.h	/^        bool calling_pending_functors_;$/;"	m	class:EventLoop
destructor	thread_local_storage.h	/^    static void destructor(void *x)$/;"	f	class:ThreadLocal
destructor	thread_local_storage.h	/^    static void destructor(void *x)$/;"	f	class:ThreadLocalStorage
doWork	Thread.cpp	/^void Thread::doWork()$/;"	f	class:Thread
ev_	easyevent.h	/^    struct event *ev_;$/;"	m	class:FdEvent	typeref:struct:FdEvent::event
event_loop_ptr_	EventLoopThread.h	/^        std::tr1::shared_ptr<EventLoop> event_loop_ptr_;$/;"	m	class:EventLoopThread
flags_	easyevent.h	/^    int8_t flags_;$/;"	m	class:FdEvent
functor	EventLoop.h	/^        typedef std::tr1::function<void()> functor;$/;"	t	class:EventLoop
functor	EventLoopThread.h	/^        typedef std::tr1::function<void()> functor;$/;"	t	class:EventLoopThread
functors_queue_	EventLoop.h	/^        vector<functor> functors_queue_;$/;"	m	class:EventLoop
getCurrentThread	Thread.cpp	/^Thread* Thread::getCurrentThread()$/;"	f	class:Thread
getCurrentThreadID	Thread.cpp	/^Thread::ThreadHandle Thread::getCurrentThreadID()$/;"	f	class:Thread
getName	Thread.h	/^        const string& getName()const$/;"	f	class:Thread
getNumWorkingThread	Thread.cpp	/^int32_t Thread::getNumWorkingThread()$/;"	f	class:Thread
getPriority	Thread.h	/^        ThreadPriority getPriority()const$/;"	f	class:Thread
getProcessAffinity	Thread.cpp	/^uint32_t  Thread::getProcessAffinity()$/;"	f	class:Thread
getState	Thread.h	/^        ThreadState getState() const $/;"	f	class:Thread
getThreadHandle	Thread.h	/^        ThreadHandle getThreadHandle()const$/;"	f	class:Thread
getTidString	Thread.cpp	/^const string& Thread::getTidString()$/;"	f	class:Thread
handler_	Thread.h	/^    Handler handler_;$/;"	m	class:ThreadRunner
handler_	easyevent.h	/^    Functor handler_; $/;"	m	class:SignalEvent
handler_	easyevent.h	/^    Functor handler_;$/;"	m	class:FdEvent
handler_	easyevent.h	/^    Functor handler_;$/;"	m	class:TimerEvent
isRunning	Thread.h	/^        bool isRunning() const$/;"	f	class:Thread
isStopped	Thread.h	/^        bool isStopped() const$/;"	f	class:Thread
join	Thread.cpp	/^    bool join( uint32_t msWait )$/;"	f	class:MainThread
join	Thread.cpp	/^bool Thread::join( uint32_t msWait )$/;"	f	class:Thread
kNoTime	easyevent.h	/^        kNoTime = 0,$/;"	e	enum:FdEvent::__anon1
kReadable	easyevent.h	/^        kReadable = 1,$/;"	e	enum:FdEvent::Type
kTimeDiff	easyevent.h	/^        kTimeDiff = 1,$/;"	e	enum:FdEvent::__anon1
kTimeStamp	easyevent.h	/^        kTimeStamp = 2,$/;"	e	enum:FdEvent::__anon1
kWritable	easyevent.h	/^        kWritable = 2,$/;"	e	enum:FdEvent::Type
m_hThread	Thread.h	/^        ThreadHandle           m_hThread;$/;"	m	class:Thread
m_nPriority	Thread.h	/^        ThreadPriority       m_nPriority;$/;"	m	class:Thread
m_nState	Thread.h	/^        volatile ThreadState    m_nState;   \/\/! object state. It is maintained by thread.$/;"	m	class:Thread
m_strName	Thread.h	/^        string                 m_strName;   \/\/! Thread Name;$/;"	m	class:Thread
m_thread_attr	Thread.h	/^        pthread_attr_t     m_thread_attr;$/;"	m	class:Thread
mutex_	EventLoop.h	/^        pthread_mutex_t mutex_;$/;"	m	class:EventLoop
next_	EventLoopThreadPool.h	/^    int next_;$/;"	m	class:EventLoopThreadPool
operator T&	thread_local_storage.h	/^    operator T&()$/;"	f	class:ThreadLocal
pipe_event_	EventLoop.h	/^        std::tr1::shared_ptr<FdEvent> pipe_event_;$/;"	m	class:EventLoop
pipes_	EventLoop.h	/^        int32_t pipes_[2];$/;"	m	class:EventLoop
run	Thread.cpp	/^    void run()$/;"	f	class:MainThread
run	Thread.h	/^    virtual void run()$/;"	f	class:ThreadRunner
s_nNumThreads	Thread.cpp	/^volatile int32_t  s_nNumThreads = 0;$/;"	v
s_nNumWorkingThread	Thread.cpp	/^volatile int32_t  s_nNumWorkingThread = 0;$/;"	v
s_pMainThread	Thread.cpp	/^Thread* s_pMainThread = NULL;$/;"	v
s_thread_key	Thread.cpp	/^pthread_key_t   s_thread_key = 0;$/;"	v
setHandler	Thread.h	/^    void setHandler(Handler handler) { handler_ = handler; }$/;"	f	class:ThreadRunner
setName	Thread.h	/^        void setName( const string& strName )$/;"	f	class:Thread
setPriority	Thread.cpp	/^void Thread::setPriority( Thread::ThreadPriority nPriority )$/;"	f	class:Thread
setThreadAffinity	Thread.cpp	/^void Thread::setThreadAffinity( uint32_t nMask )$/;"	f	class:Thread
sig_ev_	easyevent.h	/^    map<int, struct event*> sig_ev_;$/;"	m	class:SignalEvent
start	Thread.cpp	/^    bool start()$/;"	f	class:MainThread
start	Thread.cpp	/^bool Thread::start()$/;"	f	class:Thread
started_	EventLoopThreadPool.h	/^    bool started_;$/;"	m	class:EventLoopThreadPool
stop	Thread.cpp	/^    void stop()             {}$/;"	f	class:MainThread
stop	Thread.cpp	/^void Thread::stop()$/;"	f	class:Thread
t_tid	Thread.cpp	/^static ThreadLocal<Thread::ThreadHandle> t_tid;$/;"	v	file:
t_tidstring	Thread.cpp	/^static ThreadLocal<string>              t_tidstring;\/\/for Logging$/;"	v	file:
terminate	Thread.cpp	/^    virtual void terminate() {}$/;"	f	class:MainThread
terminate	Thread.cpp	/^void Thread::terminate()$/;"	f	class:Thread
thread_key_	thread_local_storage.h	/^    pthread_key_t thread_key_;$/;"	m	class:ThreadLocal
thread_key_	thread_local_storage.h	/^    pthread_key_t thread_key_;$/;"	m	class:ThreadLocalStorage
thread_ptr_	EventLoopThread.h	/^        std::tr1::shared_ptr<ThreadRunner> thread_ptr_;         $/;"	m	class:EventLoopThread
threads_	EventLoopThreadPool.h	/^    vector<EventLoopThreadPtr> threads_;$/;"	m	class:EventLoopThreadPool
threads_num_	EventLoopThreadPool.h	/^    int threads_num_;$/;"	m	class:EventLoopThreadPool
tid	Thread.h	/^        TID tid() const $/;"	f	class:Thread
tid_	EventLoop.h	/^        pthread_t tid_;$/;"	m	class:EventLoop
time_flag_	easyevent.h	/^    int8_t time_flag_;$/;"	m	class:FdEvent
timeout_	easyevent.h	/^    struct timeval timeout_;$/;"	m	class:TimerEvent	typeref:struct:TimerEvent::timeval
timer_ev_	easyevent.h	/^    struct event * timer_ev_;$/;"	m	class:TimerEvent	typeref:struct:TimerEvent::event
value	thread_local_storage.h	/^    T& value()$/;"	f	class:ThreadLocal
value	thread_local_storage.h	/^    T& value(const string& key)$/;"	f	class:ThreadLocalStorage
~EventLoop	EventLoop.cpp	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoopThread	EventLoopThread.cpp	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThreadPool	EventLoopThreadPool.cpp	/^EventLoopThreadPool::~EventLoopThreadPool()$/;"	f	class:EventLoopThreadPool
~FdEvent	easyevent.cpp	/^FdEvent::~FdEvent() {$/;"	f	class:FdEvent
~MainThread	Thread.cpp	/^    ~MainThread()$/;"	f	class:MainThread
~SignalEvent	easyevent.cpp	/^SignalEvent::~SignalEvent()$/;"	f	class:SignalEvent
~Thread	Thread.cpp	/^Thread::~Thread()$/;"	f	class:Thread
~ThreadLocal	thread_local_storage.h	/^    ~ThreadLocal()$/;"	f	class:ThreadLocal
~ThreadLocalStorage	thread_local_storage.h	/^    ~ThreadLocalStorage()$/;"	f	class:ThreadLocalStorage
~TimerEvent	easyevent.cpp	/^TimerEvent::~TimerEvent() {$/;"	f	class:TimerEvent
