#include <glog/logging.h>
#include "c2p_atomic_incr.h"
#include "p2s_atomic_incr.h"

#include "ldd/proxy/proxy.h"

using namespace ldd::net;

C2PAtomicIncr::C2PAtomicIncr(Proxy *proxy) 
    : proxy_(proxy)
      , namespace_id_(0)
      , hash_val_(0)
      , bucket_id_(0)
      , farm_id_(0)
      , p2s_atomic_incr_(0)
{
}

C2PAtomicIncr::~C2PAtomicIncr()
{
}

bool C2PAtomicIncr::ParseFrom(const Buffer &buff, const std::map<int8_t, Buffer>& extras)
{
    //(1).处理请求
    LOG(INFO) << "recv atomic incr mesasge, len=" << buff.len(); 
    if (!req_.ParseFrom(buff.ptr(), buff.len())) {
        LOG(ERROR) << "parse body for atomic incr message error";
        return false;
    }
    else {
        LOG(INFO) << "Parse Ok" 
            << ", namespace=" << req_.name_space_.data()
            << ", key=" << req_.key_.data()
            << ", operand=" << req_.u64operand_
            << ", initial len=" << req_.initial_.size()
            << ", initial=" << req_.initial_.data()
            << ", ttl=" << req_.u64ttl_;
    }

    namespace_id_ = proxy_->GetNameSpaceID(req_.name_space_.data());
    LOG(INFO) << "namespace id=" << namespace_id_;

    hash_val_ = proxy_->GetHashValue(req_.key_);
    bucket_id_ = proxy_->GetBucketID(hash_val_);
    if (bucket_id_ == -1) {
        LOG(ERROR) << "get bucket id error, key=" 
            << req_.key_.data();
        return false;
    }

    int farm_id_ = proxy_->GetFarmID(bucket_id_);
    if (farm_id_ == -1) {
        LOG(ERROR) << "get farm id error, key=" 
            << req_.key_.data();
    }

    SendRequest();

    return true;
}

void C2PAtomicIncr::HandleCancel()
{
    LOG(INFO) << "HandleCancel called";
    p2s_atomic_incr_.Load()->Cancel();
}

void C2PAtomicIncr::SendResult()
{
    //构造响应包
    Buffer data(res_.MaxSize());
    int len = res_.SerializeTo(data.ptr());
    data.ReSize(len);

    //发送响应
    bool ret = Respond(data);
    if (!ret) {
        LOG(ERROR) << "send atomic increase response to client failed";
    }

    if (res_.s64Version_ < 0) {
        Finalize();
    }
}

void C2PAtomicIncr::SendRequest()
{
    p2s_atomic_incr_ = new P2SAtomicIncr(this);
    p2s_atomic_incr_.Load()->req_.u16Ns_ = namespace_id_;
    p2s_atomic_incr_.Load()->req_.u16BucketID_ = bucket_id_;
    p2s_atomic_incr_.Load()->req_.key_ = req_.key_;
    p2s_atomic_incr_.Load()->req_.u64operand_ = req_.u64operand_;
    p2s_atomic_incr_.Load()->req_.initial_ = req_.initial_;
    p2s_atomic_incr_.Load()->req_.u64ttl_ = req_.u64ttl_;

    //设置发送超时时间
    p2s_atomic_incr_.Load()->set_conn_timeout(1000);
    p2s_atomic_incr_.Load()->set_send_timeout(1000);
    p2s_atomic_incr_.Load()->set_recv_timeout(2000);

    boost::shared_ptr<Channel> channel = proxy_->GetReadChannel(hash_val_
            , farm_id_);
    channel->Send(p2s_atomic_incr_);
}

