#include <glog/logging.h>

#include "ldd/proxy/proxy.h"
#include "ldd/proxy/p2s/atomic_append.h"
#include "ldd/proxy/c2p/atomic_append.h"

using namespace ldd::net;

C2PAtomicAppend::C2PAtomicAppend(Proxy *proxy) 
    : proxy_(proxy) 
      , namespace_id_(0)
      , hash_val_(0)
      , bucket_id_(0)
      , farm_id_(0)
{
}


C2PAtomicAppend::~C2PAtomicAppend()
{
} 

bool C2PAtomicAppend::ParseFrom(const Buffer &buff, const std::map<int8_t, Buffer>& extras)
{
    //(1).处理请求
    LOG(INFO) << "recv atomic append mesasge, len=" << buff.len(); 
    if (!req_.ParseFrom(buff.ptr(), buff.len())) {
        LOG(ERROR) << "parse body for atomic append message error";
        return false;
    }
    else {
        LOG(INFO) << "Parse Ok" 
            << ", namespace=" << req_.name_space_.ToString()
            << ", key=" << req_.key_.ToString()
            << ", position=" << req_.u8position_
            << ", slice=" << req_.content_.ToString()
            << ", ttl=" << req_.u64ttl_;
    }

    request_ = buff;

    namespace_id_ = proxy_->GetNameSpaceID(req_.name_space_.ToString());
    if (namespace_id_ < 0) {
        LOG(ERROR) << "get namespace id error";
        return false;
    }
    LOG(INFO) << "namespace id=" << namespace_id_;

    hash_val_ = proxy_->GetHashValue(req_.key_);
    bucket_id_ = proxy_->GetBucketID(hash_val_);
    if (bucket_id_ == -1) {
        LOG(ERROR) << "get bucket id error, key=" 
            << req_.key_.ToString();
        return false;
    }

    farm_id_ = proxy_->GetFarmID(bucket_id_);
    if (farm_id_ == -1) {
        LOG(ERROR) << "get farm id error, key=" 
            << req_.key_.ToString();
    }

    SendRequest();

    return true;
}

void C2PAtomicAppend::HandleCancel()
{
    LOG(INFO) << "HandleCancel called";
    if (p2s_atomic_append_ != NULL) {
        p2s_atomic_append_.Load()->Cancel();
    }
}

void C2PAtomicAppend::SendResult()
{
    //构造响应包
    Buffer data(res_.MaxSize());
    int len = res_.SerializeTo(data.ptr());
    data.ReSize(len);

    //发送响应
    bool ret = Respond(data);
    if (!ret) {
        LOG(ERROR) << "send response to client failed";
    }
}


void C2PAtomicAppend::SendRequest()
{
    LOG(INFO) << "send request called, farm id=" << farm_id_;
    P2SAtomicAppend *aa = new P2SAtomicAppend(this);
    p2s_atomic_append_ = aa;
    aa->req_.u16Ns_ = namespace_id_;
    aa->req_.u16BucketID_ = bucket_id_;
    aa->req_.key_ = req_.key_;
    aa->req_.u8position_ = req_.u8position_;
    aa->req_.content_ = req_.content_;
    aa->req_.u64ttl_ = req_.u64ttl_;

    //设置发送超时时间
    aa->set_conn_timeout(1000);
    aa->set_send_timeout(1000);
    aa->set_recv_timeout(2000);

    boost::shared_ptr<Channel> channel = proxy_->GetWriteChannel(farm_id_);
    CHECK(channel.get() != NULL) << "get write channel failed";
    channel->Send(aa);
}

